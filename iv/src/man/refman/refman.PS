%!PS-Adobe-2.0
%%Creator: ./title.doc
%%Pages: atend
%%EndComments
save 20 dict begin

/sf {   % scale /fontName => -  (set current font)
    {findfont} stopped {pop /Courier findfont} if
    exch scalefont setfont
} def

/ws {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 8#40 4 3 roll
    widthshow
} def

/as {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 3 2 roll
    ashow
} def

%%EndProlog
%%Page: 1 1
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
168.004 214.52(Copyright  \(c\)  1991) 4 259.996 ws
61.192 199.88(The  Board  of  Trustees  of  the  Leland  Stanford  Junior  University) 18 366.808 ws
12 /Times-Roman sf
16 125(Permission  to  copy  this  manual  or  any  portion  thereof  as  necessary  for  use  of) 26 412 ws
16 111.26(this  software  is  hereby  granted  provided  this  copyright  notice  and  statement  of) 22 412 ws
16 97.5199(permission  are  included.) 4 133.648 ws
24 /Times-Bold sf
54.4 531.92(InterViews  Reference  Manual) 4 358.32 ws
139.364 504.56(Version  3.0.1) 2 273.356 ws
14 /Times-Italic sf
160.671 475.28(October  4,  1991) 4 252.049 ws
18 /Times-Roman sf
149.615 434(Mark  A.  Linton) 4 263.105 ws
153.611 413.96(Paul  R.  Calder) 4 259.109 ws
141.128 393.92(John  A.  Interrante) 4 271.592 ws
161.117 373.88(Steven  Tang) 2 251.603 ws
141.605 353.84(John  M.  Vlissides) 4 271.115 ws
showpage
%%Trailer
end restore
%%Pages: 1
%!PS-Adobe-2.0
%%Creator: ./cover.doc
%%Pages: atend
%%EndComments
save 20 dict begin

/sf {   % scale /fontName => -  (set current font)
    {findfont} stopped {pop /Courier findfont} if
    exch scalefont setfont
} def

/ws {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 8#40 4 3 roll
    widthshow
} def

/as {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 3 2 roll
    ashow
} def

%%EndProlog
%%Page: 1 1
92 37.08 translate
0 0 0 setrgbcolor
24 /Times-Bold sf
143.692 662.72(Release  Notes) 2 284.308 ws
12 /Times-Roman sf
16 634.4(The  InterViews  3.0  distribution  contains  a  README  file  and  a  single) 20 412 ws
16 620.66(subdirectory,  ) 2 83.3552 ws
10 /Helvetica sf
83.3552 620.66(iv) 2 90.5752 as
12 /Times-Roman sf
90.5752 620.66(,  that  contains  the  source  and  documentation.   InterViews  can  be) 19 412 ws
16 606.92(compiled  with  any  C++  compiler  that  accepts  the  2.0  or  2.1  revisions  of  the) 26 412 ws
16 593.18(language,  and  can  run  on  X11R4  or  X11R5.   You  can  specify  your  compiler  and) 27 412 ws
16 579.44(other  site  definitions  in  the  file  \252iv/src/config/InterViews/local.de) 12 330.292 ws
10 /Helvetica sf
330.292 579.44(f) 1 333.072 as
12 /Times-Roman sf
333.072 579.44(\272.) 2 341.4 as
26.668 564.8(The  README) 2 101.589 ws
12 /Helvetica sf
101.589 564.8(  ) 2 107.814 ws
12 /Times-Roman sf
107.814 564.8(file  describes  how  to  build  InterViews.   Under  \252iv/src\272,  the) 17 412 ws
16 551.06(directory  \252include) 2 103.73 ws
10 /Helvetica sf
103.73 551.06(\272  ) 2 110.538 ws
12 /Times-Roman sf
110.538 551.06(contains  include  directories,  \252bin\272  contains  applications  \(each) 12 412 ws
16 537.32(in  its  own  subdirectory\),  \252lib\272  contains  libraries  \(each  in  its  own  subdirectory\),) 22 412 ws
16 523.58(\252config\272  contains  configuration-specific  files,  \252man\272  contains  PostScript  or  troff) 16 412 ws
16 509.84(for  the  manual,  and  papers  contains  PostScript  for  user  tutorials.) 18 324.292 ws
37.336 495.2(The  work  at  Stanford  has  been  supported  by  Fujitsu  America,  Digital) 20 412 ws
16 481.46(Equipment  Corporation,  and  NASA  CASIS  project  under  Contract  NAGW  419,) 18 412 ws
16 467.72(and  a  grant  from  the  Charles  Lee  Powell  Foundation.   Special  thanks  to  Ira) 25 412 ws
16 453.98(Machefsky  of  Digital  and  Charles  Brauer  of  Fujitsu  America  for  their  assistance.) 22 412 ws
16 440.24(We  are  also  grateful  to  the  ever-growing  InterViews  user  community  for  its) 22 412 ws
16 426.5(encouragement  and  support.) 4 151.636 ws
26.668 411.86(Please  address  questions  or  comments  about  InterViews  to) 14 308.296 ws
48.004 392.42(Mark  Linton) 2 109 ws
48.004 377.78(linton@sgi.com) 14 124.732 as
showpage
%%Page: 2 2
92 37.08 translate
0 0 0 setrgbcolor
24 /Times-Bold sf
111.04 662.72(Differences  between) 2 316.96 ws
24 /Times-Bold sf
110.992 635.36(Versions  2.6) 2 236.32 ws
24 /Times-Bold sf
236.32 635.36(  and) 2 281.008 ws
24 /Times-Bold sf
281.008 635.36(  3.0) 2 317.008 ws
12 /Times-Roman sf
16 607.04(InterViews  3.0  supports  very  lightweight  user  interface  objects  \(called  ``glyphs''\),) 18 412 ws
16 593.3(contains  the  Unidraw  library  for  building  graphical  editors,  an  interface  builder) 20 412 ws
16 579.56(\(ibuild\),  and  a  simple  WYSIWYG  document  editor  \(doc\).   We  include  Sam) 21 412 ws
16 565.82(Leffler's  TIFF  image  format  library.   We  no  longer  include  g++,  the  GNU  C++) 25 412 ws
16 552.08(compiler.) 9 61.66 as
26.668 537.44(The  InterViews  source  is  partitioned  into  six  directories  \(both  under  lib  and) 22 412 ws
16 523.7(include\):) 9 58.66 as
37.336 504.26(InterViews  \261  Intrinsics) 4 147.316 ws
37.336 490.82(IV-2_6  \261  Classes  for  compatibility  with  2.6) 12 246.328 ws
37.336 477.38(IV-X11  \261   X11-dependent  implementation) 7 240.472 ws
37.336 463.94(IV-look  \261  Classes  with  a  concrete  user  interface) 14 267.604 ws
37.336 450.5(TIFF  \261  Image  file  reader) 8 155.968 ws
37.336 437.06(Unidraw  \261  drawing  framework) 6 186.292 ws
37.336 423.62(Dispatch  \261  Low-level  access  to  input  events  and  IPC  support) 18 329.632 ws
37.336 410.18(OS  \261  operating  system  support  classes) 10 221.656 ws
37.336 396.74(graphic  \261  Structured  graphics  library  with  same  classes  as  in  2.6.) 20 348.616 ws
16 377.3(The  source  is  built  into  a  single  library  binary,  libIV.a,  from  the  \252lib/IV\272  directory.) 26 412 ws
18 /Times-Bold sf
16 348.02(Configuration) 13 125.008 as
12 /Times-Roman sf
16 327.62(We  have  simplified  the  writing  of  application  Imakefiles  by  defining  macros  that) 22 412 ws
16 313.88(expand  to  the  appropriate  definitions  and  understand  the  dependencies  between) 18 412 ws
16 300.14(libraries.   Use  the  macro  ) 9 137.377 ws
10 /Helvetica sf
137.377 300.14(Use_libInterViews) 17 217.397 as
12 /Times-Roman sf
217.397 300.14(  for  a  program  that  uses  the  base  library) 16 412 ws
16 286.4(\(the  macro  will  automatically  include  the  IV,  Xext,  X11,  and  system  math) 22 412 ws
16 272.66(libraries.   Use  the  macro  ) 9 139.789 ws
10 /Helvetica sf
139.789 272.66(Use_libUnidraw) 14 209.799 as
12 /Times-Roman sf
209.799 272.66(  instead  if  the  program  uses  the  Unidraw) 14 412 ws
16 258.92(library,  or  the  macro  ) 8 127.555 ws
10 /Helvetica sf
127.555 258.92(Use_libgraphic) 14 193.685 as
12 /Times-Roman sf
193.685 258.92(  instead  if  the  program  uses  the  structured) 14 412 ws
16 245.18(graphics  library.) 2 94.648 ws
18 /Times-Bold sf
16 215.9(Coords) 6 71.998 as
12 /Times-Roman sf
16 195.5(The  Coord  type  is  now  a  float.   The  default  units  are  printers  points,  not  pixels.) 29 412 ws
16 181.76(This  change  simplifies  many  applications  \(such  as  document  editors\)  that  want  to) 22 412 ws
16 168.02(deal  with  fonts,  bitmaps,  and  graphics  in  units  useful  for  printing.   Applications) 23 412 ws
16 154.28(compiled  with  2.6  compatibility  still  have  Coord  defined  as  an  integer.) 20 355.312 ws
18 /Times-Bold sf
16 125(Glyphs) 6 71.026 as
12 /Times-Roman sf
16 104.6(Glyphs  are  the  basic  unit  for  building  the  presentation  side  of  a  user  interface.) 26 412 ws
16 90.8599(Glyphs  define  no  storage  by  default  and  are  passed  all  contextual  information) 22 412 ws
16 77.1199(for  display.   ) 5 80.6914 ws
91.3594 77.1199(The  InterViews  library  defines  three  kinds  of  glyph  subclasses.) 16 412 ws
16 63.3799(Primitives  are  glyphs  whose  instances  are  leaves,  such  as  characters,  labels,) 20 412 ws
395.44 39.92(0-2) 3 411.436 as
showpage
%%Page: 3 3
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(glue,  and  images.   Composite  glyphs  contain  several  components  and  typically) 19 412 ws
16 657.62(arrange  them  in  some  form.   Glyphs  that  contain  a  single  component  are  called) 25 412 ws
16 643.88(monoglyphs;  they  alter  the  component's  appearance  or  behavior.) 14 327.268 ws
26.668 629.24(Interactor  is  now  a  subclass  of  Glyph.   However,  interactors  are  still  allocated) 23 412 ws
16 615.5(their  own  X  subwindows.) 6 139.324 ws
18 /Times-Bold sf
16 592.22(Styles) 6 61 as
12 /Times-Roman sf
16 571.82(A  style  is  similar  to  an  environment  in  a  document  processing  system.   Styles  may) 27 412 ws
16 558.08(be  nested  hierarchically  and  attributes  are  inherited  from  ancestors.   Attribute) 19 412 ws
16 544.34(names  may  use  a  wildcard  notation,  providing  compatibility  with  X  resources.) 20 412 ws
16 530.6(Styles  provide  a  unified  framework  for  managing  user-customizable  attributes,) 16 412 ws
16 516.86(document  formatting  information,  and  structured  graphics  state.) 12 322.624 ws
18 /Times-Bold sf
16 493.58(Kits) 4 48.004 as
12 /Times-Roman sf
16 473.18(A  kit  is  an  object  that  creates  user  interface  objects  with  a  concrete  look-and-feel,) 26 412 ws
16 459.44(such  as  pulldown  menus,  push  buttons,  and  scrollbars.   Kits  isolate  the  application) 23 412 ws
16 445.7(from  specific  look-and-feel  issues,  as  well  as  the  details  of  how  a  concrete) 24 412 ws
16 431.96(component  is  implemented.) 4 148.996 ws
18 /Times-Bold sf
16 402.68(Windows) 7 88.018 as
12 /Times-Roman sf
16 382.28(A  window  is  an  object  that  can  be  mapped  onto  a  display  and  receive  input.) 28 412 ws
16 368.54(Associated  with  a  window  is  a  glyph  that  is  the  root  of  a  hierarchy  or  acyclic) 30 412 ws
16 354.8(graph.   The  window  draws  the  glyph  to  refresh  the  display  and  calls  pick  on  the) 29 412 ws
16 341.06(glyph  to  determine  what  to  do  with  input  events.   Two  subclasses  of  window  are) 27 412 ws
16 327.32(provided:   ManagedWindow,  for  defining  information  for  a  window  manager,) 17 412 ws
16 313.58(and  PopupWindow,  for  windows  that  should  be  mapped  outside  of  window) 20 412 ws
16 299.84(manager  control.   Subclasses  of  ManagedWindow  include  ApplicationWindow,) 13 412 ws
16 286.1(TopLevelWindow,  TransientWindow,  and  IconWindow.  ) 8 291.616 ws
18 /Times-Bold sf
16 256.82(Unidraw) 7 84.004 as
12 /Times-Roman sf
16 236.42(The  Unidraw  library  defines  basic  abstractions  for  building  graphical  editors.) 18 412 ws
16 222.68(Components  represent  the  data  that  the  user  is  editing,  commands  are  undo-able) 22 412 ws
16 208.94(actions,  tools  are  direct  manipulation  objects  for  creating  or  changing  components,) 20 412 ws
16 195.2(and  external  representations  store  the  components  in  a  domain-specific  format.) 18 412 ws
16 181.46(An  important  subclass  of  component  is  connector,  which  supports  both  graphical) 20 412 ws
16 167.72(connectivity  and  dataflow  among  components.   The  InterViews  drawing  editor) 17 412 ws
16 153.98(\(idraw\)  has  been  re-implemented  using  Unidraw.   The  interface  builder  \(ibuild\)  is) 21 412 ws
16 140.24(also  implemented  with  Unidraw.  ) 8 176.32 ws
18 /Times-Bold sf
16 110.96(Dispatcher) 10 99.988 as
12 /Times-Roman sf
16 90.5601(Applications  that  only  read  user  input  need  not  be  concerned  with  the) 22 412 ws
16 76.8201(implementation  of  input  dispatching.   For  applications  that  need  to  integrate) 19 412 ws
16 63.0801(timeouts  or  IPC  with  user  input  handling,  however,  the  dispatcher  is  important.) 22 412 ws
395.44 39.92(0-3) 3 411.436 as
showpage
%%Page: 4 4
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(There  is  one  dispatcher  object  per  application.   Dispatcher::instance  is  a  static) 21 412 ws
16 657.62(member  function  that  retrieves  this  object.   The  dispatcher  allows  a  file  descriptor) 23 412 ws
16 643.88(to  be  associated  with  an  IOHandler  object  whose  inputReady  member  function) 20 412 ws
16 630.14(is  called  when  input  is  available  from  the  file  descriptor.   For  convenience,) 23 412 ws
16 616.4(a  generic  IOCallback\(T\)  type  is  provided  to  define  a  simple  IOHandler  as  a) 24 412 ws
16 602.66(pointer-to-member  function  for  an  existing  type  T.) 12 258.964 ws
26.668 588.02(The  Dispatch  library  also  defines  classes  for  performing  RPC  to  other) 20 412 ws
16 574.28(processes.   The  rpcstream  class  uses  the  approach  of  the  standard  C++  iostream) 23 412 ws
16 560.54(class,  except  the  data  can  be  sent/received  as  binary.   The  rpcbuf  class  is  a) 27 412 ws
16 546.8(subclass  of  the  standard  streambuf  and  provides  an  interface  for  opening  and) 22 412 ws
16 533.06(closing  a  stream  \(TCP\)  socket.  ) 10 166.648 ws
18 /Times-Bold sf
16 503.78(Interface  Builder) 2 148.48 ws
12 /Times-Roman sf
16 483.38(InterViews  3.0  contains  ibuild,  a  tool  for  interactively  building  a  user  interface.) 22 412 ws
16 469.64(Ibuild  allows  the  user  to  arrange  and  connect  common  interactors  and  scenes,) 22 412 ws
16 455.9(generate  the  C++  code  for  the  interface,  compile  the  code  and  execute  the) 24 412 ws
16 442.16(resulting  mini-application.   The  generated  code  defines  a  base  class  from  which) 21 412 ws
16 428.42(subclasses  can  be  written  to  complete  the  application.   This  approach  allows  the) 23 412 ws
16 414.68(interface  to  be  modified  later  without  affecting  the  subclasses.   Ibuild  currently) 21 412 ws
16 400.94(does  not  support  glyphs.  ) 8 136.336 ws
18 /Times-Bold sf
16 371.66(Document  Editor) 2 149.488 ws
12 /Times-Roman sf
16 351.26(InterViews  3.0  contains  a  new  application,  doc,  that  is  a  simple  WYSIWYG) 22 412 ws
16 337.52(document  editor.   Doc  represents  each  character  in  the  document  as  a  \(shared\)) 23 412 ws
16 323.78(object  and  uses  a  TeXCompositor  object  to  compose  glyphs  into  a  layout  using) 24 412 ws
16 310.04(the  TeX  formatting  algorithm.   Doc  reads  and  writes  files  using  a  LaTex-like) 23 412 ws
16 296.3(format,  can  read  idraw  figures  or  pbm  images  and  place  them  in  the  document,) 26 412 ws
16 282.56(and  can  generate  a  PostScript  file  for  printing.  ) 16 240.292 ws
18 /Times-Bold sf
16 253.28(Class  names) 2 110.5 ws
12 /Times-Roman sf
16 232.88(C++  class  names  are  global.   To  avoid  possible  name  conflicts,  the  InterViews) 23 412 ws
16 219.14(header  files  automatically  define  class  names  to  have  the  prefix  ``iv''.   This  prefix) 25 412 ws
16 205.4(is  defined  in  InterViews/iv.h  and  can  be  changed  if  desired.  ) 20 304.6 ws
18 /Times-Bold sf
16 176.12(Compatibility) 13 123.01 as
12 /Times-Roman sf
16 155.72(As  much  as  possible,  we  have  tried  to  make  it  easy  for  applications  based  on) 28 412 ws
16 141.98(InterViews  2.6  to  work.   To  build  a  2.6-based  application  with  3.0,  use  the) 25 412 ws
10 /Helvetica sf
16 128.24(Use_2_6) 7 56.02 as
12 /Times-Roman sf
56.02 128.24(  macro  in  the  application's  Imakefile  in  addition  to  the  ) 20 328.98 ws
10 /Helvetica sf
328.98 128.24(Use_libInterViews) 17 409 as
12 /Times-Roman sf
409 128.24(,) 1 412 as
10 /Helvetica sf
16 114.5(Use_libUnidraw) 14 86.01 as
12 /Times-Roman sf
86.01 114.5(,  or  ) 4 105.006 ws
10 /Helvetica sf
105.006 114.5(Use_libgraphic) 14 171.136 as
12 /Times-Roman sf
171.136 114.5(  macros.) 2 211.792 ws
26.668 99.8601(The  InterViews  configuration  files  have  been  rewritten  to  eliminate  unused) 18 412 ws
16 86.1201(parameters  and  rules,  and  to  reorganize  the  remaining  parameters.   Many) 19 412 ws
16 72.3801(parameters  and  make  variables  were  renamed  for  greater  consistency  and  to) 20 412 ws
395.44 39.92(0-4) 3 411.436 as
showpage
%%Page: 5 5
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(avoid  conflicting  with  X11R4  and  X11R5  parameters  for  C.   Experience  has) 21 412 ws
16 657.62(shown  us  that  separate  parameters  and  make  variables  are  desirable  to  support) 22 412 ws
16 643.88(C++.   Since  users  will  need  to  edit  application  Imakefiles  to  use  the  appropriate) 25 412 ws
16 630.14(macros  anyway,  we  have  also  replaced  a  few  obsolete  macros,  rules,  and) 22 412 ws
16 616.4(make  variables  with  new  ones.   In  particular,  CompileInMachineDepSubdir  and) 17 412 ws
16 602.66(InMachineDepSubdir  have  been  replaced  by  the  single  macro  InObjectCodeDir,) 16 412 ws
16 588.92(MachineDepSubdir  and  DependMachineDepSubdir  have  been  replaced  by  the) 14 412 ws
16 575.18(single  rule  MakeInObjectCodeDir,  and  MakeSubdirs  and  DependSubdirs  have) 14 412 ws
16 561.44(been  replaced  by  the  single  rule  MakeInSubdirs.) 12 248.284 ws
26.668 546.8(Some  2.6  features  are  not  retained  in  3.0.   The  event  types  ChannelEvent  and) 25 412 ws
16 533.06(TimerEvent  no  longer  exist.   The  functionality  can  be  achieved  more  easily  and) 23 412 ws
16 519.32(reliably  using  the  new  Dispatcher  class.) 10 206.632 ws
26.668 504.68(The  WorldView  class  no  longer  exists.   The  IPC  classes  \(Connection,) 19 412 ws
16 490.94(ChiefDeputy,  Deputy,  Packet,  ObjectSpace,  SpaceManager,  ObjectStub,) 10 412 ws
16 477.2(ObjectTag,  and  ObjectTable\)  have  been  replaced  by  a  smaller  set  of  classes  in  the) 26 412 ws
16 463.46(Dispatch  library  that  provide  more  functionality.   The  old  IPC  classes  were  not) 23 412 ws
16 449.72(particularly  portable,  did  not  work  properly  across  a  network,  and  were  hard  to) 24 412 ws
16 435.98(integrate  with  the  user  interface  side  of  an  application.) 16 276.94 ws
26.668 421.34(The  following  Interactor  window-oriented  operations  no  longer  exist  because) 16 412 ws
16 407.6(they  are  superseded  by  Window  and  ManagedWindow  operations:) 14 335.596 ws
10 /Helvetica sf
32.66 389.12(SetName,  GetName,  SetGeometry,  GetGeometry) 6 252.74 ws
32.66 376.6(SetInteractorType,  GetInteractorType,  SetTransientFor,  GetTransientFor) 6 353.9 ws
32.66 364.08(SetIconName,  GetIconName,  SetIconInteractor,  GetIconInteractor) 6 325.02 ws
32.66 351.56(SetIconGeometry,  GetIconGeometry,  SetIconBitmap,  GetIconBitmap) 6 337.24 ws
32.66 339.04(SetIconMask,  GetIconMask,  SetStartIconic,  GetStartIconic) 6 291.66 ws
32.66 325.56(Iconify,  DeIconify) 2 108.8 ws
12 /Times-Roman sf
16 306.12(The  operation  Interactor::GetTopLevelWindow  is  now  provided  to  allow  direct) 16 412 ws
16 292.38(access  to  the  managed  window  associated  with  a  top-level  interactor.) 18 347.26 ws
26.668 277.74(Finally,  the  functionality  provided  by  the  StringPool,  StringTable,  and  Table) 18 412 ws
16 264(classes  has  been  moved  to  the  OS  directory.   StringPool  and  StringTable  have) 23 412 ws
16 250.26(been  replaced  by  the  UniqueString  class.) 10 211.96 ws
395.44 39.92(0-5) 3 411.436 as
showpage
%%Trailer
end restore
%%Pages: 5
%!PS-Adobe-2.0
%%Creator: ./ch1.doc
%%Pages: atend
%%EndComments
save 20 dict begin

/sf {   % scale /fontName => -  (set current font)
    {findfont} stopped {pop /Courier findfont} if
    exch scalefont setfont
} def

/ws {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 8#40 4 3 roll
    widthshow
} def

/as {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 3 2 roll
    ashow
} def

%%EndProlog
%%Page: 1 1
92 37.08 translate
0 0 0 setrgbcolor
24 /Times-Bold sf
16 662.72(Chapter  1) 2 119.32 ws
16 625.76(Introduction) 12 146.68 as
12 /Times-Roman sf
16 597.44(InterViews  is  a  software  system  for  window-based  applications.   Like  most  user) 21 412 ws
16 583.7(environments,  InterViews  is  ) 6 155.44 ws
12 /Times-Italic sf
155.44 583.7(object-oriented) 15 228.76 as
12 /Times-Roman sf
228.76 583.7(  in  that  components  such  as  windows,) 12 412 ws
16 569.96(buttons,  menus,  and  documents  are  active  elements  with  inherited  behavior.   The) 21 412 ws
16 556.22(name  InterViews  comes  from  the  idea  of  a  user  interface  object  presenting) 22 412 ws
16 542.48(an  ) 2 33.2522 ws
12 /Times-Italic sf
33.2522 542.48(inter) 5 55.9202 as
12 /Times-Roman sf
55.9202 542.48(active  ) 2 90.5003 ws
12 /Times-Italic sf
90.5003 542.48(view) 4 112.496 as
12 /Times-Roman sf
112.496 542.48(  of  some  data.   For  example,  a  text  editor  implements  an) 21 412 ws
16 528.74(interactive  view  of  the  contents  of  a  text  file.) 16 230.956 ws
26.668 514.1(This  manual  is  organized  into  eight  chapters.   Chapter  1  defines  basic  terms  and) 25 412 ws
16 500.36(provides  an  overview  of  the  system.   Chapter  2  describes  the  use  of  objects) 25 412 ws
16 486.62(called  ) 2 48.3422 ws
12 /Times-Italic sf
48.3422 486.62(glyphs) 6 79.6742 as
12 /Times-Roman sf
79.6742 486.62(  to  define  the  presentation  of  a  user  interface.   Chapter  3  defines  the) 25 412 ws
16 472.88(graphics-related  objects  that  a  glyph  can  use  to  draw  on  a  screen  or  printer.) 26 412 ws
16 459.14(Chapter  4  describes  how  glyphs  are  associated  with  a  window  on  the  screen  and) 26 412 ws
16 445.4(how  InterViews  objects  communicate  information  to  a  window  manager.   Chapter) 19 412 ws
16 431.66(5  explains  the  input  handling  primitives.   Chapter  6  shows  how  style  attributes) 23 412 ws
16 417.92(such  as  color  and  font  can  be  controlled.   Chapter  7  describes  ) 23 331.042 ws
12 /Times-Italic sf
331.042 417.92(kits) 4 347.71 as
12 /Times-Roman sf
347.71 417.92(,  objects  that) 4 412 ws
16 404.18(build  common  user  interface  components  such  as  buttons,  menus,  and  scrollbars.) 20 412 ws
16 390.44(Chapter  8  describes  the  classes  that  interface  to  the  operating  system.) 20 348.268 ws
18 /Times-Bold sf
16 349.16(1.1) 3 38.5 as
46 349.16(Notation) 8 112.996 as
12 /Times-Roman sf
16 316.76(We  use  C++  syntax  to  describe  the  different  classes  of  InterViews  objects  and) 24 412 ws
16 303.02(assume  the  reader  is  somewhat  familiar  with  C++  semantics.   However,  the) 21 412 ws
16 289.28(specification  of  a  class  here  is  ) 12 176.282 ws
12 /Times-Italic sf
176.282 289.28(not) 3 191.618 as
12 /Times-Roman sf
191.618 289.28(  identical  to  the  C++  class  declaration  in  a) 16 412 ws
16 275.54(header  file.   In  particular,  we  do  not  list  the  private  sections  of  a  class  declaration) 29 412 ws
16 261.8(because  they  are  part  of  the  implementation,  not  the  interface.   We  also  do  not) 27 412 ws
16 248.06(list  members  that  are  implicitly  part  of  the  implementation.   For  example,  C++) 23 412 ws
16 234.32(destructors  are  normally  public  but  often  simply  free  storage  allocated  by  the) 22 412 ws
16 220.58(object.   Thus,  there  is  no  need  to  list  and  document  destructors  as  part  of  a  class) 31 412 ws
16 206.84(interface.) 10 60.976 as
26.668 192.2(A  more  subtle  example  is  a  virtual  function  implemented  by  a  subclass.) 22 412 ws
16 178.46(We  only  list  the  function  in  the  subclass  interface  if  the  subclass  changes  the) 26 412 ws
16 164.72(semantics  of  the  function.   We  do  not  include  PSFont::width,  for  example,) 21 412 ws
16 150.98(because  PSFont  just  implements  the  Font::width  virtual  function  using  PostScript) 18 412 ws
16 137.24(font  metrics  instead  of  screen  font  metrics.  On  the  other  hand,  the  Listener  class) 26 412 ws
16 123.5(actually  extends  the  semantics  of  Glyph::pick  to  put  the  listener's  event  handler) 22 412 ws
16 109.76(on  a  list  associated  with  the  hit  object.   Thus,  we  do  include  Listener::pick  in  the) 29 412 ws
16 96.0201(documentation.) 14 90.328 as
14 /Times-Bold sf
16 69.6201(1.1.1) 5 44 as
51 69.62(Names) 5 91.432 as
12 /Times-Roman sf
16 49.1801(We  use  identifiers  that  begin  with  an  upper  case  letter  for  types;  we  use  lower) 28 412 ws
showpage
%%Page: 2 2
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(case  for  member  functions  and  parameters.  We  assume   that  some  mechanism) 21 412 ws
16 657.62(allows  us  to  use  any  names  we  wish\261there  is  no  need  to  use  a  special  prefix  for  all) 34 412 ws
16 643.88(global  names  \(types  and  classes\).   Ideally,  this  capability  would  be  provided) 21 412 ws
16 630.14(by  the  C++  language,  but  this  is  not  yet  the  case.   Currently,  we  use  #define) 29 412 ws
16 616.4(macros  to  prepend  the  prefix  ``iv''  to  all  class  names  and  global  type  names.) 26 412 ws
16 602.66(This  redefinition  is  hidden  from  the  programmer,  except  inasmuch  as  it  shows) 22 412 ws
16 588.92(up  during  debugging.   To  undefine  these  macros,  a  source  file  must  include) 23 412 ws
10 /Helvetica sf
16 575.18(<InterViews/leave-scope.h>) 26 139.39 as
12 /Times-Roman sf
139.39 575.18(.   After  leaving  the  InterViews  scope,  InterViews  names) 15 412 ws
16 561.44(are  specified  by  \252_lib_iv\() 6 138.789 ws
12 /Times-Italic sf
138.789 561.44(name) 4 164.781 as
12 /Times-Roman sf
164.781 561.44(\)\272,  where  ) 4 212.744 ws
12 /Times-Italic sf
212.744 561.44(name) 4 238.736 as
12 /Times-Roman sf
238.736 561.44(  is  the  class  or  type  name  defined  in) 16 412 ws
16 547.7(this  manual.) 2 74.668 ws
14 /Times-Bold sf
16 521.3(1.1.2) 5 44 as
51 521.3(Use  of  const) 4 122.54 ws
12 /Times-Roman sf
16 500.86(C++  allows  the  type  modifier  \252const\272  to  be  used  in  a  variety  of  different  ways.) 28 412 ws
16 487.12(For  concrete  objects  \(int,  float,  char*\),  it  refers  to  read-only  storage.   For  abstract) 25 412 ws
16 473.38(objects,  however,  storage  access  should  not  be  visible  in  an  interface.   For) 23 412 ws
16 459.64(example,  a  function  on  a  transformation  matrix  could  be  defined   that  returns) 23 412 ws
16 445.9(whether  the  matrix  is  the  identity  or  not.   A  simple  implementation  could  compute) 25 412 ws
16 432.16(the  identity  test  and  could  be  defined  as  const  in  the  storage  sense.   However,) 27 412 ws
16 418.42(another  implementation  might  cache  the  result  of  the  test  to  avoid  the  overhead  of) 26 412 ws
16 404.68(the  test  when  the  matrix  is  not  changing.   This  second  implementation  is  not  const) 27 412 ws
16 390.94(in  the  storage  sense  because  it  modifies  the  transformation  matrix  object.) 20 366.28 ws
26.668 376.3(We  use  const  for  functions  that  do  not  change  the  ) 20 297.597 ws
12 /Times-Italic sf
297.597 376.3(behavior) 8 340.257 as
12 /Times-Roman sf
340.257 376.3(  of  an  object.) 6 412 ws
16 362.56(That  is,  a  member  function  is  const  if  a  call  to  it  could  be  omitted  without) 30 412 ws
16 348.82(changing  the  effect  of  subsequent   function  calls  on  the  object.   This  definition  is) 26 412 ws
16 335.08(consistent  with  the  notion  that  a  compiler  could  eliminate  redundant  calls  to  the) 24 412 ws
16 321.34(same  const  function.   The  one  notable  counter-example  is  reference  counting,) 19 412 ws
16 307.6(where  incrementing  and  decrementing  the  reference  count  of  a  shared  object) 20 412 ws
16 293.86(changes  its  lifetime  \(a  call  could  not  be  eliminated  by  the  compiler\)  but  does  not) 28 412 ws
16 280.12(change  its  behavior  \(the  operation  is  considered  const\).) 14 280.612 ws
26.668 265.48(Using  our  semantics  of  const,  the  transformation  matrix  identity  function) 18 412 ws
16 251.74(mentioned  above  should  be  defined  as  const.   This  approach  implies  that  an) 23 412 ws
16 238(implementation  may  be  forced  to  cast  the  ) 14 230.103 ws
12 /Times-Bold sf
230.103 238(this) 4 248.775 as
12 /Times-Roman sf
248.775 238(  pointer  from  const  to  non-const) 10 412 ws
16 224.26(to  avoid  a  compiler  error  message  because  most  C++  compilers  assume  that  a) 24 412 ws
16 210.52(function  should  not  be  const  if  the  function  does  modifies  storage.) 20 333.64 ws
26.668 195.88(It  is  also  possible  \(indeed,  likely\)  that  a  function  does  not  follow  our  semantics) 26 412 ws
16 182.14(of  const  even  though  it  does  not  modify  the  object's  storage.   If  an  object  contains) 29 412 ws
16 168.4(a  pointer  to  another  object  and  a  member  function  performs  some  non-const) 22 412 ws
16 154.66(operation  on  that  object,  then  the  member  function  may  need  to  be  defined  as) 26 412 ws
16 140.92(non-const.) 10 66.328 as
14 /Times-Bold sf
16 114.52(1.1.3) 5 44 as
51 114.52(Common  Symbols) 2 160.284 ws
12 /Times-Roman sf
16 94.0801(Several  definitions  are  pervasive  throughout  the  system.   These  definitions  are) 19 412 ws
16 80.3401(automatically  defined  as  a  side  effect  of  using  any  other  InterViews  classes.) 22 412 ws
16 66.6001(The  type  ) 4 68.666 ws
12 /Times-Bold sf
68.666 66.6001(boolean) 7 108.674 as
12 /Times-Roman sf
108.674 66.6001(  is  defined  in  the  conventional  sense  of  a  language  such) 20 412 ws
395.2 38.72(1-2) 3 411.196 as
showpage
%%Page: 3 3
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(as  Pascal,  as  are  the  constants  ) 12 177.733 ws
12 /Times-Bold sf
177.733 671.36(true) 4 199.057 as
12 /Times-Roman sf
199.057 671.36(  and  ) 4 227.752 ws
12 /Times-Bold sf
227.752 671.36(false) 5 251.08 as
12 /Times-Roman sf
251.08 671.36(.   The  constant  ) 7 332.629 ws
12 /Times-Bold sf
332.629 671.36(nil) 3 345.973 as
12 /Times-Roman sf
345.973 671.36(  is  presumed) 4 412 ws
16 657.62(to  be  type-equivalent  to  any  pointer  type  and  represents  an  invalid  pointer) 22 412 ws
16 643.88(value.   In  C++,  we  #define  nil   to  zero.   The  class  ) 23 267.272 ws
12 /Times-Bold sf
267.272 643.88(String) 6 299.276 as
12 /Times-Roman sf
299.276 643.88(  is  referenced  by  other) 8 412 ws
16 630.14(InterViews  classes,  though  no  specific  interface  or  implementation  is  presumed.) 18 412 ws
16 616.4(The  operating  system  interface  \(described  in  Chapter  8\)  includes  a  string  class  for) 24 412 ws
16 602.66(the  current  InterViews  implementation.) 6 205.3 ws
14 /Times-Bold sf
16 576.26(1.1.4) 5 44 as
51 576.26(Coordinates) 11 124.108 as
12 /Times-Roman sf
16 555.82(Many  classes  and  functions  in  a  toolkit  manipulate  coordinates.  We  define  a  type) 24 412 ws
12 /Times-Bold sf
16 542.08(Coord) 5 48.664 as
12 /Times-Roman sf
48.664 542.08(  to  represent  a  position  or  a  distance.  The  default  units  for  a  coordinate  are) 28 412 ws
16 528.34(printers  points.  By  default,  coordinate  values  are  scaled  according  to  screen  fonts,) 22 412 ws
16 514.6(not  the  dots-per-inch  of  the  screen.   Thus,  the  coordinate  scaling  factor  is  75/72  on) 27 412 ws
16 500.86(systems   with  75-dpi  fonts.   The  scaling  factor  for  a  screen  can  be  customized  on  a) 30 412 ws
16 487.12(per-screen   basis.) 3 97.468 ws
26.668 472.48(The  reason  for  using  font  resolution  instead  of  screen  resolution  is  that  most) 24 412 ws
16 458.74(applications  want  to  show  geometry  as  it  would  appear  relative  to  text,  not  at  its) 28 412 ws
16 445(actual  size.   The  problem  is  that  font  metric  information  is  given  in  terms  of  the) 29 412 ws
16 431.26(font  resolution.   For  example,  consider  the  character  \252x\272  drawn  using  a  75-dpi) 23 412 ws
16 417.52(font  next  to  a  rectangle  on  a  90-dpi  screen.   If  the  rectangle  is  scaled  using  90-dpi,) 31 412 ws
16 403.78(then  it  will  look  too  small  relative  to  the  \252x\272  on  a  printer.   ) 27 294.148 ws
26.668 389.14(Ideally,  Coord  would  be  a  C++  class  with  well-defined  operations  and) 20 412 ws
16 375.4(conversions  to  concrete  types.   However,  current  C++  compilers  do  not  make  it) 23 412 ws
16 361.66(practical  to  define  a  Coord  class  that  is  represented  as  a  single  word.   We  therefore) 29 412 ws
16 347.92(typedef  Coord  to  a  float.) 8 133.648 ws
26.668 333.28(For  applications  with  simple  graphics  needs,  the  use  of  floating  point) 20 412 ws
16 319.54(coordinates  is  typically  not  a  problem.   Applications  with  more  sophisticated  text) 21 412 ws
16 305.8(or  graphics  usually  need  to  manipulate  floating  point  coordinates  anyway.) 18 371.284 ws
26.668 291.16(The  use  of  non-pixel  units  allows  objects  to  be  resolution-independent,  but  also) 22 412 ws
16 277.42(means  that  one  cannot  rely  on  precise  output  at  low  resolutions.   Coordinates  are) 25 412 ws
16 263.68(rounded-off  to  guarantee  that  objects  that  abut  in  coordinates  will  abut  on  the) 24 412 ws
16 249.94(screen.   This  choice  means  that  a  one  point  line  might  generate  one  or  two  pixels,) 29 412 ws
16 236.2(depending  on  where  it  is  on  the  screen.   Objects  that  need  to  generate  consistent) 27 412 ws
16 222.46(pixel  sizes  must  explicitly  scale  to  pixel  units.  ) 16 239.668 ws
14 /Times-Bold sf
16 196.06(1.1.5) 5 44 as
51 196.06(Dimensions) 10 120.23 as
12 /Times-Roman sf
16 175.62(Many  composition  strategies  manipulate  coordinates  in  one  dimension.  To  use  a) 20 412 ws
16 161.88(single  strategy  in  any  dimension,  we  define  an  enumerated  type  ) 20 327.34 ws
12 /Times-Bold sf
327.34 161.88(DimensionName) 13 412 as
12 /Times-Roman sf
16 148.14(as  ) 2 29.5373 ws
10 /Helvetica sf
29.5373 148.14(Dimension_X) 11 88.9973 as
12 /Times-Italic sf
88.9973 148.14(,) 1 91.9973 as
12 /Times-Roman sf
91.9973 148.14(  ) 2 95.5387 ws
10 /Helvetica sf
95.5387 148.14(Dimension_Y) 11 154.999 as
12 /Times-Italic sf
154.999 148.14(,) 1 157.999 as
12 /Times-Roman sf
157.999 148.14(  or  ) 4 175.077 ws
10 /Helvetica sf
175.077 148.14(Dimension_Z) 11 233.977 as
12 /Times-Roman sf
233.977 148.14(.   It  is  possible  that  other  dimensions) 13 412 ws
16 134.4(may  be  defined  in  the  future.   The  enumeration  constant  ) 19 301.117 ws
10 /Helvetica sf
301.117 134.4(Dimension_Undefined) 19 399.487 as
12 /Times-Roman sf
399.487 134.4(  is) 2 412 ws
16 120.66(defined  after  any  other  dimensions.   Thus,  one  can  iterate  through  all  dimensions) 23 412 ws
16 106.92(by  stopping  at  ) 6 87.004 ws
10 /Helvetica sf
87.004 106.92(Dimension_Undefined) 19 185.374 as
12 /Times-Roman sf
185.374 106.92(.  ) 2 191.374 ws
14 /Times-Bold sf
16 80.5201(1.1.6) 5 44 as
51 80.5201(Reference  counting) 2 166.472 ws
12 /Times-Roman sf
16 60.0801(Because  C++  does  not  provide  garbage  collection,  it  is  necessary  to  manage) 22 412 ws
395.2 38.72(1-3) 3 411.196 as
showpage
%%Page: 4 4
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 490.68(shared  objects  within  a  program.   We  make  objects  easier  to  share  by  deriving) 25 412 ws
16 476.94(from  class  Resource,  which  manages  a  reference  count.   If  we  had  garbage) 23 412 ws
16 463.2(collection,  we  would  not  need  the  resource  class.   We  do  not  consider  resource) 25 412 ws
16 449.46(really  part  of  the  InterViews  programming  interface;  it  does  not  appear  in  any) 24 412 ws
16 435.72(function  type  signatures.  However,  it  is  necessary  to  understand  which  objects) 20 412 ws
16 421.98(can  be  shared  and  as  a  practical  matter  implementations  must  manage  references) 22 412 ws
16 408.24(correctly.) 10 61.648 as
26.668 393.6(Figure  1.1  shows  the  Resource  class  interface.   Every  resource  has  a  reference) 23 412 ws
16 379.86(count  that  is  initially  zero  and  must  be  explicitly  incremented  by  calling) 22 412 ws
16 366.12(Resource::ref.   The  reason  the  count  is  initially  zero  is  that  an  object  is  often) 27 412 ws
16 352.38(created  and  immediately  passed  as  a  parameter  to  another  object  that  stores  the) 24 412 ws
16 338.64(reference.   Since  the  receiver  must  reference  the  parameter  anyway,  it  is  confusing) 23 412 ws
16 324.9(to  force  the  creator  to  unreference  the  resource  after  passing  it.) 20 316.888 ws
16 310.26(   A  resource  should  not  be  deleted  like  other  objects;  instead,  Resource::unref) 23 412 ws
16 296.52(should  be  used  to  unreference  an  object.   When  a  resource  is  unreferenced,  the) 25 412 ws
16 282.78(count  is  decremented.   If  the  count  is  not  positive,  then  the  object  is  destroyed.) 27 412 ws
16 269.04(The  static  ref  and  unref  functions  check  if  their  arguments  are  nil  and  if  not  call) 30 412 ws
16 255.3(the  non-static  ref  or  unref  member  functions,  respectively.) 14 295.6 ws
26.668 240.66(Resource::defer  and  Resource::flush  can  be  used  to  control  when  objects  are) 20 412 ws
16 226.92(actually  destroyed.   Often,  an  object  may  initiate  a  delete  on  one  of  its  ancestors  or) 29 412 ws
16 213.18(some  other  object  with  an  active  member  function.   In  these  cases,  it  is  simplest  to) 29 412 ws
16 199.44(wait  to  destroy  objects  until  the  system  is  in  a  known  state.   Resource::defer  called) 27 412 ws
16 185.7(with  a  value  of  true  will  cause  subsequent  Resource::unref  operations  to  queue) 22 412 ws
16 171.96(objects  with  zero  counts  instead  of  deleting  them.   Resource::flush  will  delete  all) 23 412 ws
16 158.22(objects  on  the  queue,  in  the  order  of  the  unref  calls.   Resource::defer  returns  the) 27 412 ws
16 144.48(previous  deferral  value.   Initially,  deletions  are  not  deferred.) 15 303.424 ws
14 /Times-Bold sf
16 118.08(1.1.7) 5 44 as
51 118.08(Actions) 7 96.108 as
12 /Times-Roman sf
16 97.6401(C++  provides  a  pointer-to-function  type,  but  often  one  wishes  to  encapsulate  an) 22 412 ws
16 83.9001(object  and  a  pointer  to  a  member  function  to  call  on  the  object.   An  ) 29 380.668 ws
12 /Times-Bold sf
380.668 83.9001(action) 6 412 as
16 70.1601(callback) 8 58.672 as
12 /Times-Roman sf
58.672 70.1601(  provides  this  functionality.   The  base  class  action  defines  a  single) 21 412 ws
395.2 38.72(1-4) 3 411.196 as
newpath
16.96 681.58 moveto
16.96 682.58 lineto
412.96 682.58 lineto
412.96 681.58 lineto
closepath
gsave eofill grestore
38.296 665.02(class  Resource  {) 4 118.036 ws
38.296 651.58(public:) 7 71.632 as
48.964 638.14(Resource\(\);) 11 104.944 as
48.964 624.7(void  ref\(\)  const;) 4 126.28 ws
48.964 611.26(void  unref\(\)  const;) 4 138.28 ws
48.964 597.82(static  void  ref\(const  Resource*\);) 6 205.264 ws
48.964 584.38(static  void  unref\(const  Resource*\);) 6 217.264 ws
48.964 569.74(static  boolean  defer\(boolean\);) 4 192.256 ws
48.964 555.1(static  void  flush\(\);) 4 136.96 ws
38.296 541.66(};  ) 2 50.392 ws
12 /Times-Roman sf
128.65 522.22(Figure  1.1:) 2 181.318 ws
191.986 522.22(Resource  class  interface) 4 307.942 ws
newpath
16.96 512.04 moveto
16.96 513.04 lineto
412.96 513.04 lineto
412.96 512.04 lineto
closepath
gsave eofill grestore
showpage
%%Page: 5 5
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 411.24(operation,  Action::execute.   A  ) 7 167.015 ws
12 /Times-Bold sf
167.015 411.24(macro) 5 199.667 as
12 /Times-Roman sf
199.667 411.24(  is  an  action  that  contains  a  list  of  actions,) 18 412 ws
16 397.5(each  of  which  is  executed  in  order.   Figure  1.2  shows  the  action,  macro,  and) 27 412 ws
16 383.76(action-callback  class  interfaces.) 4 168.28 ws
18 /Times-Bold sf
16 342.48(1.2) 3 38.5 as
46 342.48(Overview) 8 119.98 as
12 /Times-Roman sf
16 310.08(The  goal  of  InterViews  is  to  make  it  easy  to  compose  user  interfaces  from) 26 412 ws
16 296.34(reusable  components.   The  central  class  for  composition  is  ) 17 326.151 ws
12 /Times-Bold sf
326.151 296.34(glyph) 5 354.831 as
12 /Times-Roman sf
354.831 296.34(  because  it) 4 412 ws
16 282.6(defines  the  geometry  of  a  user  interface  object.   The  ) 19 295.997 ws
12 /Times-Bold sf
295.997 282.6(canvas) 6 330.665 as
12 /Times-Roman sf
330.665 282.6(  class  defines  a) 6 412 ws
16 268.86(2-dimensional  surface  upon  to  which  a  group  of  glyphs  are  attached.   The  glyphs) 25 412 ws
16 255.12(negotiate  for  space  on  the  canvas,  draw  on  the  canvas  to  refresh  their  appearance,) 26 412 ws
16 241.38(and  damage  the  canvas  to  cause  an  update  traversal.) 16 265.588 ws
26.668 226.74(The  ) 2 48.9049 ws
12 /Times-Bold sf
48.9049 226.74(window) 6 88.9128 as
12 /Times-Roman sf
88.9128 226.74(  class  creates  a  canvas  for  a  top-level  glyph  and  allows  the  user  to) 26 412 ws
16 213(control  the  canvas  on  a  screen  through  a  window  manager.   The  window  class  does) 27 412 ws
16 199.26(not  define  a  window  management  policy,  only  the  mechanism  for  communicating) 20 412 ws
16 185.52(appropriate  information  between  a  window  manager  and  the  glyphs.) 16 343.6 ws
26.668 170.88(Every  application  can  create  a  ) 10 188.19 ws
12 /Times-Bold sf
188.19 170.88(session) 7 223.53 as
12 /Times-Roman sf
223.53 170.88(  object  to  attach  to  a  ) 12 340.206 ws
12 /Times-Bold sf
340.206 170.88(display) 7 376.89 as
12 /Times-Roman sf
376.89 170.88(  object) 2 412 ws
16 157.14(automatically  and  run  an  event  dispatching  loop.   Sessions  can  also  have) 21 412 ws
16 143.4(additional  displays  attached.   A  session  defines  a  root  ) 17 286.708 ws
12 /Times-Bold sf
286.708 143.4(style) 5 310.036 as
12 /Times-Roman sf
310.036 143.4(  object  derived  from) 6 412 ws
16 129.66(user  customization  files  and  command-line  arguments.   Styles  define  named) 17 412 ws
16 115.92(attributes  with  string  values,  wildcarding  for  matching  classes  of  objects,  and) 20 412 ws
16 102.18(quick  access  to  common  attributes  such  as  fonts  and  colors.) 18 301.96 ws
26.668 87.5401(The  InterViews  input  model  is  ``top-down''.   That  is,  an  input  ) 21 339.017 ws
12 /Times-Bold sf
339.017 87.5401(event) 5 366.341 as
12 /Times-Roman sf
366.341 87.5401(  object  is) 4 412 ws
16 73.8001(first  received  by  the  appropriate  window  as  determined  by  the  window  manager.) 22 412 ws
16 60.0601(The  receiving  window  looks  for  a  ) 12 200.603 ws
12 /Times-Bold sf
200.603 60.0601(handler) 7 240.611 as
12 /Times-Roman sf
240.611 60.0601(  object  that  has  \252grabbed\272  input.) 10 412 ws
395.2 38.72(1-5) 3 411.196 as
newpath
17.2 678.94 moveto
17.2 679.94 lineto
413.2 679.94 lineto
413.2 678.94 lineto
closepath
gsave eofill grestore
38.536 662.38(class  Action  :  virtual  public  Resource  {) 12 227.608 ws
38.536 648.94(protected:) 10 86.524 as
49.204 635.5(Action\(\);) 9 93.196 as
38.536 622.06(public:) 7 71.872 as
49.204 608.62(virtual  void  execute\(\)  =  0;) 8 174.616 ws
38.536 595.18(};) 2 47.632 as
38.536 575.74(class  Macro  :  public  Action  {) 10 179.944 ws
38.536 562.3(public:) 7 71.872 as
49.204 548.86(Macro\(Action*  =  nil,  Action*  =  nil,  Action*  =  nil,  Action*  =  nil\);) 22 366.268 ws
49.204 535.42(void  append\(Action*\);) 2 158.188 ws
38.536 521.98(};) 2 47.632 as
38.536 502.54(class  ActionCallback\(T\)  :  public  Action  {) 10 239.272 ws
38.536 489.1(public:) 7 71.872 as
49.204 475.66(ActionCallback\(T\)\(T*,  void  \(T::*\)\(\)\);) 4 230.836 ws
38.536 462.22(};) 2 47.632 as
12 /Times-Roman sf
103.06 442.78(Figure  1.2:) 2 155.728 ws
166.396 442.78(Action  and  related  class  interfaces.) 8 334.012 ws
newpath
17.2 432.6 moveto
17.2 433.6 lineto
413.2 433.6 lineto
413.2 432.6 lineto
closepath
gsave eofill grestore
showpage
%%Page: 6 6
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(Several  handlers  can  be  grabbing  at  once  \(a  common  implementation  for  walking) 22 412 ws
16 657.62(menus\).   If  a  handler  is  not  interested  in  a  particular  event,  the  window  will  try  the) 31 412 ws
16 643.88(next  more  recent  grabber.   If  no  grabbers  are  interested,  the  window  does  a  ) 27 377.011 ws
12 /Times-Italic sf
377.011 643.88(pick) 4 397.003 as
12 /Times-Roman sf
397.003 643.88(  on) 2 412 ws
16 630.14(its  root  glyph.   Pick  operations  have  two  results:  a  list  of  glyphs  that  were  picked,) 29 412 ws
16 616.4(and  a  list  of  handlers  interested  in  the  event.   A  ) 21 262.792 ws
12 /Times-Bold sf
262.792 616.4(listener) 8 300.784 as
12 /Times-Roman sf
300.784 616.4(  is  a  predefined  glyph) 8 412 ws
16 602.66(subclass  that  adds  an  associated  handler  to  the  pick  result  when  it  detects  an  event) 28 412 ws
16 588.92(of  interest.) 2 67.324 ws
26.668 574.28(InterViews  provides  common  behavior  objects,  such  as  buttons  and  menus,) 18 412 ws
16 560.54(which  are  built  using  listeners  and  handlers.   Unlike  many  other  toolkits,) 21 412 ws
16 546.8(InterViews   objects  are  cheap  enough  that  behavior  objects  are  separate  from) 21 412 ws
16 533.06(appearance  objects.   For  example,  the  button  class  is  given  a  separate  glyph) 23 412 ws
16 519.32(that  denotes  its  appearance;  the  button  only  implements  input  behavior.   The) 21 412 ws
16 505.58(appearance  is  actually  a  ) 8 134.536 ws
12 /Times-Bold sf
134.536 505.58(telltale) 8 169.192 as
12 /Times-Roman sf
169.192 505.58(  glyph,  which  may  look  different  depending  on  its) 16 412 ws
16 491.84(state   \(e.g.,  highlighted,  pressed,  chosen\).   Depending  on  the  input,  the  button) 22 412 ws
16 478.1(requests  a  particular  look  from  the  telltale.) 12 219.628 ws
26.668 463.46(This  approach  of  separating  input  and  output  objects  makes  the  toolkit  more) 22 412 ws
16 449.72(flexible  and  the  individual  objects  simpler,  but  it  can  make  the  task  of  constructing) 26 412 ws
16 435.98(higher-level  user  interface  objects  more  confusing.   In  particular,  it  becomes  less) 21 412 ws
16 422.24(obvious  whether  it  is  appropriate  to  subclass  or  instance  to  create  a  particular) 24 412 ws
16 408.5(component.) 10 72.328 as
26.668 393.86(InterViews  provides  a  ) 6 140.474 ws
12 /Times-Bold sf
140.474 393.86(kit) 3 154.478 as
12 /Times-Roman sf
154.478 393.86(  object  that  encapsulates  these  decisions  in  a  single) 16 412 ws
16 380.12(programming  interface  while  allowing  various  appearances  and  behaviors.   A  kit) 19 412 ws
16 366.38(is  an  object  that  creates  common  user  interface  objects  such  as  buttons,  scrollbars,) 24 412 ws
16 352.64(and  menus.   For  example,  a  push  button  has  button  behavior,  a  beveled  or) 25 412 ws
16 338.9(highlighted  appearance  when  pressed,  and  a  style  for  customization.   The  Kit  class) 23 412 ws
16 325.16(provides  a  function  to  create  a  push  button  object;  the  implementation  is  free  to) 26 412 ws
16 311.42(compose  what  objects  are  necessary  to  provide  the  appropriate  functionality.) 18 412 ws
16 297.68(Each  application  normally  creates  a  single  Kit  object,  which  is  typically  a) 22 412 ws
16 283.94(subclass   defined  for  a  particular  look-and-feel  such  as  OpenLook  or  Motif.   The) 24 412 ws
16 270.2(application  can  call  the  static  function  Kit:::instance  to  return  the  object  and) 22 412 ws
16 256.46(therefore  be  unaware  which  specific  look-and-feel  is  being  used.) 16 326.236 ws
14 /Times-Bold sf
16 230.06(1.2.1) 5 44 as
51 230.06(A  simple  example) 4 156.77 ws
12 /Times-Roman sf
16 209.62(Figure  1.3  shows  a  simple  InterViews  application  that  display  the  text  \252hi  mom!\272) 24 412 ws
16 195.88(in  a  window.   The  application  creates  a  session  and  runs  it  starting  with  a  window) 29 412 ws
16 182.14(containing  the  text  over  a  background.   The  window  is  an  \252application  window\272,) 23 412 ws
16 168.4(meaning  it  is  recognized  by  other  desktop  services  \(window  manager,  session) 20 412 ws
16 154.66(manager\)  as  the  main  window  for  the  application.) 14 254.62 ws
26.668 140.02(The  window  contains  a  background  that  contains  a  label.   A  background  glyph) 23 412 ws
16 126.28(paints  a  given  color  behind  its  contents.   The  label  glyph  is  given  the  text,  font,) 29 412 ws
16 112.54(and  color  for  drawing.   The  text  font  and  color,  as  well   as  the  background  color,) 30 412 ws
16 98.8002(are  obtained  from  the  default  style  for  the  session.) 16 256.288 ws
26.668 84.1602(This  application  does  not  handle  user  input.   It  must  therefore  be  terminated) 23 412 ws
16 70.4202(externally,  either  from  a  window  manager  menu  or  through  the  system.) 20 357.94 ws
395.2 38.72(1-6) 3 411.196 as
showpage
%%Page: 7 7
92 37.08 translate
0 0 0 setrgbcolor
14 /Times-Bold sf
16 374.76(1.2.2) 5 44 as
51 374.76(A  dialog  box) 4 126.46 ws
12 /Times-Roman sf
16 354.32(Figure  1.4  shows  part  of  an  alerter  application  that  puts  up  a  dialog  box  and  waits) 30 412 ws
16 340.58(for  it  to  be  dismissed.   The  dialog  contains  two  parts,  a  message  created  by  the) 29 412 ws
12 /Times-Italic sf
16 326.84(make_message  ) 2 92.092 ws
12 /Times-Roman sf
92.092 326.84(function  and  a  push  button  for  dismissal,  as  well  as  white  space.) 22 412 ws
16 313.1(We  use  the  default  kit  object  to  create  the  button  and  the  default  quit  action) 28 412 ws
16 299.36(\(which  just  terminates  the  main  session  loop\).) 12 236.32 ws
26.668 284.72(The  button  label  is  the  value  retrieved  for  the  attribute  named  \252quitbutton\272) 22 412 ws
16 270.98(defined  by  the  default  style.   We  assume  the  lookup  will  succeed  because  the) 25 412 ws
16 257.24(program  defines  a  default  value  for  the  attribute  in  the  session  constructor.) 22 373.264 ws
26.668 242.6(InterViews  layout  mechanisms  are  based  on  the  TeX  model  of  boxes  and  glue.) 24 412 ws
16 228.86(A  TBBox  tiles  its  components  top-to-bottom,  while  an  LRBox  tiles  left-to-right.) 20 412 ws
16 215.12(Boxes  stretch  or  shrink  their  components  to  fit  available  space.   Typically,) 21 412 ws
16 201.38(components  such  as  labels  and  buttons  are  rigid,  and  glue  objects  are  used  to) 26 412 ws
16 187.64(define  variable  space  between  components.   In  the  dialog,  vertical  glue  is  used) 23 412 ws
16 173.9(above,  below,  and  between  the  message  and  button.   Horizontal  glue  is  used  on) 25 412 ws
16 160.16(both  sides  of  the  dialog  area.) 10 153.976 ws
26.668 145.52(The  button  object  has  a  margin  object  around  it,  which  is  like  putting  glue) 26 412 ws
16 131.78(around  it.   The  LMargin   subclass  leaves  space  to  the  left  of  the  button.) 26 354.28 ws
26.668 117.14(The  VCenter  objects  control  the  alignment  of  the  boxes.   Glyphs  define  an) 23 412 ws
16 103.4(origin  for  alignment  purposes.   For  example,  an  LRBox  tiles  in  the  X  dimension) 25 412 ws
16 89.66(and  aligns  the  origins  in  the  Y  dimension.   Boxes  themselves  must  define  an) 25 412 ws
16 75.92(origin,  which  by  default  is  the  origin  of  their  first  component.   This  approach  is) 27 412 ws
16 62.18(desirable  in  the  case  of  aligning  the  left  edges  of  several  lines  of  text  or  aligning) 30 412 ws
395.2 38.72(1-7) 3 411.196 as
newpath
18.16 678.94 moveto
18.16 679.94 lineto
414.16 679.94 lineto
414.16 678.94 lineto
closepath
gsave eofill grestore
39.496 662.38(#include  <InterViews/background.h>) 2 219.664 ws
39.496 648.94(#include  <InterViews/label.h>) 2 186.34 ws
39.496 635.5(#include  <InterViews/session.h>) 2 197.68 ws
39.496 622.06(#include  <InterViews/style.h>) 2 185.68 ws
39.496 608.62(#include  <InterViews/window.h>) 2 201.676 ws
39.496 589.18(int  main\(int  argc,  char**  argv\)  {) 10 195.22 ws
50.164 575.74(Session*  session  =  new  Session\("Himom",  argc,  argv\);) 12 314.704 ws
50.164 562.3(Style*  style  =  session->style\(\);) 6 198.7 ws
50.164 548.86(session->run_window\() 20 160.252 as
60.832 535.42(new  ApplicationWindow\() 2 185.812 ws
71.5 521.98(new  Background\() 2 157.144 ws
82.168 508.54(new  Label\("hi  mom!",  style->font\(\),  style->foreground\(\)\),) 8 361.768 ws
82.168 495.1(style->background\(\)) 19 180.244 as
71.5 481.66(\)) 1 75.496 as
60.832 468.22(\)) 1 64.828 as
50.164 454.78(\);) 2 57.496 as
39.496 441.34(}) 1 45.256 as
12 /Times-Roman sf
110.944 421.9(Figure  1.3:) 2 163.612 ws
174.28 421.9(InterViews  "hi  mom!"  program.) 6 328.048 ws
newpath
18.16 397.08 moveto
18.16 398.08 lineto
414.16 398.08 lineto
414.16 397.08 lineto
closepath
gsave eofill grestore
showpage
%%Page: 8 8
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 289.56(the  tops  of  lines  in  two  columns,  but  is  not  usually  appropriate  for  dialogs.   The) 29 412 ws
16 275.82(VCenter  object  overrides  the  default  alignment  of  its  component.   Because  the) 21 412 ws
16 262.08(VCenter  is  the  first  component  in  the  box,  it  also  overrides  the  alignment  for  the) 28 412 ws
16 248.34(box.   A  vertical  alignment  of  1.0  means  if  the  TBBox  appears  in  an  LRBox  then) 29 412 ws
16 234.6(the  top  of  the  TBBox  will  be  aligned   the  top  of  the  LRBox.) 25 301.828 ws
18 /Times-Bold sf
16 193.32(1.3) 3 38.5 as
46 193.32(Summary) 7 121.996 as
12 /Times-Roman sf
16 160.92(This  chapter  has  presented  a  broad  overview  of  the  InterViews  architecture,) 20 412 ws
16 147.18(introducing  the  basic  terminology  and  giving  some  simple  examples.   In  the  next) 23 412 ws
16 133.44(chapter,  we  focus  on  the  semantics  of  glyphs  as  the  smallest  unit  of  user  interface) 28 412 ws
16 119.7(construction.   We  also  present  the  glyph  classes  defined  by  InterViews  and  give) 23 412 ws
16 105.96(some  examples  as  to  how  they  can  be  used.) 16 224.296 ws
395.2 38.72(1-8) 3 411.196 as
newpath
15.28 680.86 moveto
15.28 681.86 lineto
411.28 681.86 lineto
411.28 680.86 lineto
closepath
gsave eofill grestore
36.616 664.3(Kit*  kit  =  Kit::instance\(\);) 6 159.052 ws
36.616 650.86(String  button_label;) 2 132.292 ws
36.616 637.42(style->find_attribute\("quitbutton",  button_label\);) 2 271.84 ws
36.616 623.98(Glyph*  vspace  =  new  VGlue\(18.0\);) 8 208.348 ws
36.616 610.54(Glyph*  hspace  =  new  HGlue\(36.0\);) 8 208.348 ws
36.616 597.1(Glyph*  dialog  =  new  Background\() 8 204.028 ws
47.284 583.66(new  TBBox\() 2 109.612 ws
57.952 570.22(new  VCenter\(vspace,  1.0\),) 4 186.244 ws
57.952 556.78(new  LRBox\() 2 120.28 ws
68.62 543.34(hspace,) 7 104.272 as
68.62 529.9(new  TBBox\() 2 130.948 ws
79.288 516.46(new  VCenter\(make_message\(new  TBBox,  kit,  style\),  1.0\),) 10 361.24 ws
79.288 503.02(vspace,) 7 114.94 as
79.288 489.58(new  LMargin\() 2 148.936 ws
89.956 476.14(kit->simple_push_button\(button_label,  style,  kit->quit\(\)\),) 4 366.496 ws
89.956 462.7(0.0,  fil,  0.0) 4 142.624 ws
79.288 449.26(\)) 1 83.284 as
68.62 435.82(\),) 2 75.616 as
68.62 422.38(hspace) 6 101.272 as
57.952 408.94(\),) 2 64.948 as
57.952 395.5(vspace) 6 90.604 as
47.284 382.06(\),) 2 54.28 as
47.284 368.62(style->flat\(\)) 13 104.704 as
36.616 355.18(\);) 2 43.948 as
12 /Times-Roman sf
110.458 335.74(Figure  1.4:) 2 163.126 ws
173.794 335.74(Part  of  alert  dialog  application.) 8 322.774 ws
newpath
15.28 310.92 moveto
15.28 311.92 lineto
411.28 311.92 lineto
411.28 310.92 lineto
closepath
gsave eofill grestore
showpage
%%Trailer
end restore
%%Pages: 8
%!PS-Adobe-2.0
%%Creator: ./ch2.doc
%%Pages: atend
%%EndComments
save 20 dict begin

/sf {   % scale /fontName => -  (set current font)
    {findfont} stopped {pop /Courier findfont} if
    exch scalefont setfont
} def

/ws {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 8#40 4 3 roll
    widthshow
} def

/as {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 3 2 roll
    ashow
} def

%%EndProlog
%%Page: 1 1
92 37.08 translate
0 0 0 setrgbcolor
24 /Times-Bold sf
16 662.72(Chapter  2) 2 119.32 ws
16 625.76(Glyphs) 6 89.368 as
12 /Times-Roman sf
16 597.44(A  glyph  is  an  object  that  draws.   Glyphs  are  the  basic  building  blocks  for  the) 29 412 ws
16 583.7(presentation  side  of  a  user  interface.   Glyphs  define  no  storage  by  default  and  are) 27 412 ws
16 569.96(passed   contextual  information  during  rendering.  Thus,  glyphs  may  be  shared  and) 21 412 ws
16 556.22(a  glyph  structure  need  not  be  strictly  hierarchical;  it  may  be  a  directed  acyclic) 26 412 ws
16 542.48(graph.) 6 46.324 as
26.668 527.84(There  are  three  kinds  of  glyph  subclasses.   ) 15 248.483 ws
12 /Times-Italic sf
248.483 527.84(Primitive) 9 293.147 as
12 /Times-Roman sf
293.147 527.84(  glyphs  are  leaves\261they) 6 412 ws
16 514.1(contain  no  components.   ) 7 148.906 ws
12 /Times-Italic sf
148.906 514.1(Composite) 9 200.242 as
12 /Times-Roman sf
200.242 514.1(  glyphs  contain  several  components  and) 10 412 ws
16 500.36(typically  arrange  them  in  some  form.   ) 13 207.364 ws
12 /Times-Italic sf
207.364 500.36(Monoglyphs) 10 266.692 as
12 /Times-Roman sf
266.692 500.36(   contain  a  single  component,) 9 412 ws
16 486.62(and  they  alter  the  component's  appearance  or  behavior.  ) 16 284.92 ws
18 /Times-Bold sf
16 445.34(2.1) 3 38.5 as
46 445.34(Glyph  base  class) 4 173.026 ws
12 /Times-Roman sf
16 412.94(Glyph  is  a  subclass  of  resource  because  glyphs  can  be  shared.  Resource  must  be  a) 28 412 ws
16 399.2(virtual  base  class  to  ensure  that  only  one  copy  of  resource  information  \(i.e.,) 24 412 ws
16 385.46(reference  count\)  is  managed  in  the  case  of  multiple  inheritance.   Figure  2.1  shows) 25 412 ws
16 371.72(the  glyph  base  class  definition.) 8 164.32 ws
14 /Times-Bold sf
16 345.32(2.1.1) 5 44 as
51 345.32(Geometry  management) 2 191.35 ws
12 /Times-Roman sf
16 324.88(Glyph::request  asks  a  glyph  to  specify  its  desired  geometry  in  the  given) 22 412 ws
16 311.14(requisition.   It  is  desirable  that  this  operation  be  fast  so  that  a  composite  glyph) 27 412 ws
16 297.4(need  not  store  the  requistions  for  its  components.   Glyph::allocate  notifies  a  glyph) 23 412 ws
16 283.66(that  a  portion  of  the  canvas  has  been  allocated  for  it.   A  glyph  can  assume  that) 31 412 ws
16 269.92(allocate  will  be  called  before  draw  is  called  with  the  same  canvas  and  allocation.  ) 28 406.24 ws
14 /Times-Bold sf
16 243.52(2.1.2) 5 44 as
51 243.52(Drawing) 7 103.108 as
12 /Times-Roman sf
16 223.08(Glyph::draw  displays  the  glyph  on  the  canvas  at  the  position  and  size  specified  by) 26 412 ws
16 209.34(the  allocation.   No  clipping  or  translation  is  implicit  in  this  operation\261the  canvas  is) 25 412 ws
16 195.6(the  entire  drawing  area  and  the  allocation  is  in  canvas  coordinates.   However,  a) 25 412 ws
16 181.86(composite  glyph  may  set  clipping  on  the  canvas  before  drawing  its  children.) 22 381.952 ws
26.668 167.22(There  is  no  guarantee  that  a  call  to  draw  will  affect  the  screen  immediately) 26 412 ws
16 153.48(because  of  the  possibility  \(indeed,  likelihood\)  that  the  canvas  is  double-buffered.) 20 412 ws
16 139.74(Furthermore,  drawing  order  is  important  for  glyphs  when  they  are  partially) 20 412 ws
16 126(transparent  and  are  drawn  in  the  same  plane.   A  glyph's  draw  operation  therefore) 25 412 ws
16 112.26(should  not  be  called  directly,  but  rather  is  implicitly  called  during  screen  update.) 24 402.616 ws
26.668 97.62(Glyph::print  generates  a  representation  of  the  glyph  graph  suitable  for  printing.) 20 412 ws
16 83.88(The  canvas  and  printer  rendering  interfaces  are  identical,  and  the  default) 20 412 ws
16 70.14(implementation  of  print  is  simply  to  call  draw.   Most  glyphs  therefore  need  not) 25 412 ws
388.72 36.08(2-) 2 398.716 as
401.716 36.08(1) 1 407.716 as
showpage
%%Page: 2 2
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 254.04(define  a  print  operation.   The  reason  for  a  distinct  print  operation  is  to  allow) 27 412 ws
16 240.3(a  glyph  to  use  different  rendering  requests  for  the  screen  and  a  printer.   For) 27 412 ws
16 226.56(example,  a  glyph  might  use  3D  requests  to  the  screen,  or  might  compute  more) 26 412 ws
16 212.82(precise  output  for  printing.) 6 144.652 ws
26.668 198.18(Glyph::pick  finds  the  glyphs  that  intersect  a  point  or  rectangle  specified) 20 412 ws
16 184.44(in  canvas-relative  coordinates.  Conceptually,  picking  is  like  drawing  and) 16 412 ws
16 170.7(determining  what  glyphs  intersect  the  specified  point  or  rectangle.   The) 19 412 ws
16 156.96(coordinates  are  contained  in  the  hit  parameter.   The  depth  parameter  specifies) 21 412 ws
16 143.22(which  level  in  the  Hit  object  to  store  the   intersecting  glyphs.   When  pick  returns,) 28 412 ws
16 129.48(the  Hit  parameter  contains  the  glyphs  that  were  hit.) 16 261.628 ws
26.668 114.84(Figure  2.2  shows  the  hit  class  operations.   A  hit  object  may  be  constructed  with) 27 412 ws
16 101.1(a  point,  a  rectangle,  or  an  event.   In  the  case  of  the  event,  the  event  pointer) 31 412 ws
16 87.3599(coordinates  are  used  to  detect  intersection  and  glyphs  can  associate  a  handler  with) 24 412 ws
16 73.6199(the  pick  result.) 4 86.992 ws
newpath
16 684.46 moveto
16 685.46 lineto
412 685.46 lineto
412 684.46 lineto
closepath
gsave eofill grestore
37.336 667.9(typedef  long  GlyphIndex;) 4 161.32 ws
37.336 654.46(typedef  unsigned  int  GlyphBreakType;) 6 224.98 ws
37.336 627.58(class  Glyph  :  virtual  public  Resource  {) 12 223.744 ws
37.336 614.14(protected:) 10 85.324 as
48.004 600.7(Glyph\(\);) 8 89.332 as
37.336 587.26(public:) 7 70.672 as
48.004 573.82(virtual  void  request\(Requisition&\)  const;) 6 245.668 ws
48.004 560.38(virtual  void  allocate\(Canvas*,  const  Allocation&,  Extension&\);) 10 354.316 ws
48.004 546.94(virtual  void  draw\(Canvas*,  const  Allocation&\)  const;) 10 305.98 ws
48.004 533.5(virtual  void  print\(Printer*,  const  Allocation&\)  const;) 10 301.996 ws
48.004 520.06(virtual  void  pick\(Canvas*,  const  Allocation&,  int  depth,  Hit&\);) 14 353.332 ws
48.004 493.18(enum  {  no_break,  pre_break,  in_break,  post_break  };) 12 303.796 ws
48.004 479.74(virtual  Glyph*  compose\(GlyphBreakType\)  const;) 6 286.972 ws
48.004 452.86(virtual  void  append\(Glyph*\);) 4 188.656 ws
48.004 439.42(virtual  void  prepend\(Glyph*\);) 4 192.652 ws
48.004 425.98(virtual  void  insert\(Glyph*\);) 4 180.664 ws
48.004 412.54(virtual  void  remove\(Glyph*\);) 4 189.988 ws
48.004 399.1(virtual  void  replace\(GlyphIndex,  Glyph*\);) 6 251.968 ws
48.004 385.66(virtual  void  change\(GlyphIndext\);) 4 212.644 ws
48.004 372.22(virtual  GlyphIndex   count\(\)  const;) 7 210.484 ws
48.004 358.78(virtual  Glyph*  component\(GlyphIndex\)  const;) 6 271.648 ws
48.004 345.34(virtual  void  allotment\() 4 156.004 ws
58.672 331.9(GlyphIndext,  DimensionName,  Allotment&) 4 270.664 ws
48.004 318.46(\)  const;) 2 83.6679 ws
37.336 305.02(};  ) 2 49.4319 ws
12 /Times-Roman sf
135.016 285.58(Figure  2.1:) 2 187.684 ws
198.352 285.58(Glyph  class  interface) 4 299.656 ws
newpath
16 275.4 moveto
16 276.4 lineto
412 276.4 lineto
412 275.4 lineto
closepath
gsave eofill grestore
12 /Times-Roman sf
388.24 36.96(2-) 2 398.236 as
401.236 36.96(2) 1 407.236 as
showpage
%%Page: 3 3
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 237(Hit::event,  Hit::left,  Hit::bottom,  Hit::right,  Hit::top  return  information  about) 14 412 ws
16 223.26(the  specified  hit  area.   Hit::event  returns  nil  if  the  point  or  rectangle  constructors) 25 412 ws
16 209.52(were  used.) 2 67.312 ws
26.668 194.88(Hit::push_transform,  Hit::transform,  and  Hit::pop_transform  modify  the  current) 12 412 ws
16 181.14(intersection  area  for  picking.   These  operations  are  just  like  the  canvas  operations) 23 412 ws
16 167.4(with  the  same  names  except  they  apply  to  the  hit  information  instead  of  a  canvas.) 28 406.276 ws
26.668 152.76(Glyphs  record  information  in  a  hit  object  with  Hit::begin,  Hit::target  and) 20 412 ws
16 139.02(Hit::end.   Hit::target  indicates  that  a  glyph's  output  intersects  the  hit  region.) 21 412 ws
16 125.28(Hit::begin  and  Hit::end  are  used  by  composite  glyphs  that  should  be  on  the  hit) 26 412 ws
16 111.54(list  if  and  only  if  one  of  their  components  calls  Hit::target.   The  parameters  to) 27 412 ws
16 97.7999(Hit::begin  and  Hit::target  have  the  same  meaning.   The  depth  is  the  level  in  the  hit) 29 412 ws
16 84.0599(list  where  the   information  should  be  stored.   The  glyph  is  the  hit  glyph.   The  index) 31 412 ws
16 70.3199(is  additional  information  about  the  hit.   For  a  composite  glyph,  this  is  typically) 25 412 ws
388.24 36.96(2-) 2 398.236 as
401.236 36.96(3) 1 407.236 as
newpath
14.32 677.98 moveto
14.32 678.98 lineto
410.32 678.98 lineto
410.32 677.98 lineto
closepath
gsave eofill grestore
35.656 661.42(class  Hit  {) 4 86.08 ws
35.656 647.98(public:) 7 68.992 as
46.324 634.54(Hit\(const  Event*\);) 2 135.316 ws
46.324 621.1(Hit\(Coord  x,  Coord  y\);) 6 156.988 ws
46.324 607.66(Hit\(Coord  left,  Coord  bottom,  Coord  right,  Coord  top\);) 14 310.996 ws
46.324 588.22(virtual  const  Event*  event\(\)  const;) 8 211.636 ws
46.324 574.78(virtual  Coord  left\(\)  const;) 6 169.312 ws
46.324 561.34(virtual  Coord  bottom\(\)  const;) 6 187.324 ws
46.324 547.9(virtual  Coord  right\(\)  const;) 6 175.984 ws
46.324 534.46(virtual  Coord  top\(\)  const;) 6 168.652 ws
46.324 515.02(virtual  vod  push_transform\(\);) 4 188.308 ws
46.324 501.58(virtual  void  transform\(const  Transformer&\);) 6 260.62 ws
46.324 488.14(virtual  void  pop_transform\(\);) 4 186.976 ws
46.324 468.7(virtual  void  begin\(int  depth,  Glyph*,  GlyphIndex,  Handler*  =  nil\);) 16 366.736 ws
46.324 455.26(virtual  void  target\(int  depth,  Glyph*,  GlyphIndex,  Handler*  =  nil\);) 16 367.396 ws
46.324 441.82(virtual  void  end\(\);) 4 133.648 ws
46.324 428.38(virtual  void  remove\(int  depth,  GlyphIndex  target  =  0\);) 14 307.06 ws
46.324 414.94(virtual  void  retarget\() 4 145.636 ws
56.992 401.5(int  depth,  Glyph*,  GlyphIndex,  Handler*  =  nil,  GlyphIndex  =  0) 18 362.836 ws
46.324 388.06(\);) 2 53.656 as
46.324 368.62(virtual  boolean  any\(\)  const;) 6 178.636 ws
46.324 355.18(virtual  int  count\(\)  const;) 6 162.652 ws
46.324 341.74(virtual  int  depth\(GlyphIndex  target  =  0\)  const;) 12 269.068 ws
46.324 328.3(virtual  Glyph*  target\(int  depth,  GlyphIndex  target  =  0\)  const;) 16 341.392 ws
46.324 314.86(virtual  GlyphIndex  index\(int  depth,  GlyphIndex  =  0\)  const;) 14 331.732 ws
46.324 301.42(virtual  Handler*  handler\(\)  const;) 6 203.956 ws
35.656 287.98(};) 2 44.752 as
12 /Times-Roman sf
139.168 268.54(Figure  2.2:) 2 191.836 ws
202.504 268.54(Hit  class  interface.) 4 292.144 ws
newpath
14.32 258.36 moveto
14.32 259.36 lineto
410.32 259.36 lineto
410.32 258.36 lineto
closepath
gsave eofill grestore
showpage
%%Page: 4 4
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(the  index  of  the  hit  child.   Hit::remove  and  Hit::retarget  modify  the  current  hit) 25 412 ws
16 657.62(information.) 12 75.664 as
26.668 642.98(The  remaining  hit  operations  return  information  about  a  pick.   The  result  is) 23 412 ws
16 629.24(a  list  of  paths,  each  of  which  contains  a  list  of  glyphs  terminating  with  the) 28 412 ws
16 615.5(glyphs  that  would  draw  through  the  pick  region.   Hit::count  returns  the  number  of) 25 412 ws
16 601.76(paths.   Hit::depth  returns  the  index  of  the  last  glyph  in  a  specified  path.   The  path) 30 412 ws
16 588.02(corresponding  to  the  top-most  glyph  is  in  position  zero.   Hit::target  and  Hit::index) 23 412 ws
16 574.28(return  the  information  for  a  given  path  and  depth.) 16 253.624 ws
26.668 559.64(If  a  pick  is  done  on  a  hit  object  constructed  from  an  event,  and  one  or  more) 32 412 ws
16 545.9(glyphs  find  the  event  of  interest,  they  will  associate  a  handler  with  the  hit  object.) 28 412 ws
16 532.16(Hit::handler  returns  the  top-most,  deepest  handler,  or  nil  if  there  is  none.) 22 363.952 ws
14 /Times-Bold sf
16 505.76(2.1.3) 5 44 as
51 505.76(Composition) 11 127.23 as
12 /Times-Roman sf
16 485.32(BreakType  defines  the  choices  for  how  a  composite  glyph  might  break  a  group  of) 26 412 ws
16 471.58(glyphs  in  a  layout.   The  break  may  occur  before  a  glyph  \(pre_break\),  in  the  glyph) 29 412 ws
16 457.84(\(in_break\),  or  after  the  glyph  \(post_break\).) 10 221.608 ws
26.668 443.2(Glyph::compose  on  a  glyph  returns  a  new  glyph  that  should  be  used  to  replace) 26 412 ws
16 429.46(the  target  glyph  when  the  break  occurs.  For  example,  discretionary  white  space  in) 24 412 ws
16 415.72(a  document  will  turn  into  zero-size  glue  if  a  line-break  or  page-break  occurs  on  it.  ) 30 411.904 ws
14 /Times-Bold sf
16 389.32(2.1.4) 5 44 as
51 389.32(Structure) 9 108.54 as
12 /Times-Roman sf
16 368.88(Several  operations  are  provided  to  manipulate  the  list  of  components  that  make  up) 24 412 ws
16 355.14(a  composite  glyph.   Primitive  glyphs  ignore  these  operations,  while  monoglyphs) 19 412 ws
16 341.4(pass  the  operation  through  to  their  body.   A  monoglyph  is  therefore  ``transparent'') 23 412 ws
16 327.66(with  respect  to  structure,  allowing  one  to  put  a  monoglyph  around  a  composite  and) 26 412 ws
16 313.92(pass  the  result  to  another  object  that  manipulates  the  components  of  the  composite.) 24 412 ws
26.668 299.28(Glyph::append  \(prepend\)  adds  a  given  glyph  to  the  end  \(beginning\)  of  the) 22 412 ws
16 285.54(component  list.   Glyph::insert  adds  a  given  glyph  at  a  specified  index  in  the  list.) 27 412 ws
16 271.8(Glyph::remove  removes  the  glyph  at  the  specified  index.   Glyph::replace  replaces) 19 412 ws
16 258.06(the  glyph  at  the  specified  index  with  the  given  glyph.   Glyph::change  notifies  a) 25 412 ws
16 244.32(glyph  that  its  component  at  the  given  index  has  changed,  and  therefore  it  might  be) 28 412 ws
16 230.58(necessary  to  reallocate  it.) 6 137.296 ws
26.668 215.94(Glyph::count  returns  the  number  of  glyphs  in  its  component  list.) 18 412 ws
16 202.2(Glyph::component  returns  the  glyph  in  its  component  list  at  the  given  index.) 22 412 ws
16 188.46(Glyph::allotment  returns  the  allocation  information  in  the  given  dimension  for  the) 20 412 ws
16 174.72(glyph  at  the  given  index  in  its  component  list.) 16 235.672 ws
14 /Times-Bold sf
16 148.32(2.1.5) 5 44 as
51 148.32(Requisitions) 12 124.906 as
12 /Times-Roman sf
16 127.88(Glyphs  define  their  geometric  needs  with  a  ) 14 255.297 ws
12 /Times-Bold sf
255.297 127.88(requisition) 11 310.641 as
12 /Times-Roman sf
310.641 127.88(,  which  specifies  a) 6 412 ws
12 /Times-Bold sf
16 114.14(requirement) 11 79.984 as
12 /Times-Roman sf
79.984 114.14(  in  each  dimension.   Figure  2.3  shows  the  requisition  and  requirement) 21 412 ws
16 100.4(class  interfaces.) 2 91.972 ws
26.668 85.7601(Composite  glyphs  typically  use  a  layout  object  to  arrange  their  components  in) 22 412 ws
16 72.0201(some  manner  such  as  a  tile  or  overlay.   Layouts  are  often  dimension-independent;) 23 412 ws
388.24 36.96(2-) 2 398.236 as
401.236 36.96(4) 1 407.236 as
showpage
%%Page: 5 5
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 167.4(for  example,  there  is  no  algorithmic  difference  between  left-to-right  and) 18 412 ws
16 153.66(top-to-bottom  tiling.  Requisitions  can  therefore  be  specified  and  retrieved) 16 412 ws
16 139.92(independently  in  each  dimension.) 6 177.316 ws
26.668 125.28(Requisition::Requisition  creates  a  requisition  with  undefined  requirements.) 12 412 ws
16 111.54(Requisition::penalty  is  overloaded  to  set  or  get  the  penalty  associated  with) 20 412 ws
16 97.7999(choosing  a  break  at  the  position  defined  by  the  requisition.   Requisition::require) 21 412 ws
16 84.0599(sets  a  requirement  in  a  given  dimension.   Requisition::requirement  returns  the) 19 412 ws
16 70.3199(requirement  for  a  given  dimension.) 8 184.972 ws
388.24 36.96(2-) 2 398.236 as
401.236 36.96(5) 1 407.236 as
newpath
14.32 674.14 moveto
14.32 675.14 lineto
410.32 675.14 lineto
410.32 674.14 lineto
closepath
gsave eofill grestore
35.656 657.58(class  Requisition  {) 4 126.088 ws
35.656 644.14(public:) 7 68.992 as
46.324 630.7(Requisition\(\);) 14 112.996 as
46.324 617.26(Requisition\(const  Requisition&\);) 2 206.008 ws
46.324 597.82(void  penalty\(int\);) 2 129.988 ws
46.324 584.38(int  penalty\(\)  const;) 4 136.984 ws
46.324 564.94(boolean  equals\(const  Requisition&,  float  epsilon\)  const;) 10 316.312 ws
46.324 545.5(void  require\(DimensionName,  const  Requirement&\);) 6 302.956 ws
46.324 532.06(const  Requirement&  requirement\(DimensionName\)  const;) 6 327.952 ws
46.324 518.62(Requirement&  requirement\(DimensionName\);) 2 271.288 ws
35.656 505.18(};) 2 44.752 as
35.656 485.74(class  Requirement  {) 4 132.736 ws
35.656 472.3(public:) 7 68.992 as
46.324 458.86(Requirement\(\);) 14 119.644 as
46.324 445.42(Requirement\(Coord  natural\);) 2 185.968 ws
46.324 431.98(Requirement\(Coord  natural,  Coord  stretch,  Coord  shrink,  float\);) 12 353.956 ws
46.324 418.54(Requirement\() 12 112.312 as
56.992 405.1(Coord  natural_lead,  Coord  max_lead,  Coord  min_lead,) 10 321.628 ws
56.992 391.66(Coord  natural_trail,  Coord  max_trail,  Coord  min_trail) 10 316.648 ws
46.324 378.22(\);) 2 53.656 as
46.324 358.78(boolean  equals\(const  Requirement&,  float  epsilon\)  const;) 10 322.96 ws
46.324 345.34(boolean  defined\(\)  const;) 4 162.964 ws
46.324 325.9(void  natural\(Coord\);) 2 145.312 ws
46.324 312.46(Coord  natural\(\)  const;) 4 152.308 ws
46.324 299.02(void  stretch\(Coord\);) 2 143.98 ws
46.324 285.58(Coord  stretch\(\)  const;) 4 150.976 ws
46.324 272.14(void  shrink\(Coord\);) 2 141.988 ws
46.324 258.7(Coord  shrink\(\)  const;) 4 148.984 ws
46.324 245.26(void  alignment\(float\);) 2 151.984 ws
46.324 231.82(float  alignment\(\)  const;) 4 158.98 ws
35.656 218.38(};) 2 44.752 as
12 /Times-Roman sf
92.494 198.94(Figure  2.3:) 2 145.162 ws
155.83 198.94(Requisition  and  Requirement  classes.  ) 8 338.818 ws
newpath
14.32 188.76 moveto
14.32 189.76 lineto
410.32 189.76 lineto
410.32 188.76 lineto
closepath
gsave eofill grestore
showpage
%%Page: 6 6
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 671.36(A  requirement  consists  of  a  natural  size,  stretchability,  shrinkability,  and) 18 412 ws
16 657.62(alignment.   The  maximum  size  is  the  natural  size  plus  the  stretchability;  the) 23 412 ws
16 643.88(minimum  is  the  natural  minus  the  shrinkability.   It  is  possible  to  have  negative) 25 412 ws
16 630.14(minimum  sizes.   The  alignment  is  a  fraction  that  indicates  the  origin  of  the  area.) 27 412 ws
16 616.4(An  alignment  of  zero  means  the  origin  is  at  the  lower  coordinate  value;  an) 26 412 ws
16 602.66(alignment  of  one  means  it  is  at  the  upper  coordinate  value.) 20 296.956 ws
26.668 588.02(There  are  four  constructors  for  requirement:  with  no  parameters,  which  makes) 20 412 ws
16 574.28(the  natural  size  undefined  and  the  other  fields  zero;  with  a  single  coordinate  that) 26 412 ws
16 560.54(defines  the  natural  size  and  makes  the  other  fields  zero;  with  explicit  coordinates) 24 412 ws
16 546.8(for  the  natural  size,  stretchability,  and  shrinkability,  and  a  float  value  for  the) 24 412 ws
16 533.06(alignment;  and  with  explicit  coordinates  for  specifying  the  distances  on  each  side) 22 412 ws
16 519.32(of  the  origin.) 4 78.328 ws
26.668 504.68(Requirement::equals  compares  two  requirements  \(the  target  object  and  the) 16 412 ws
16 490.94(argument\)  using  a  given  tolerance  for  the  individual  coordinate  comparisons.) 18 412 ws
16 477.2(Requirement::defined  returns  whether  the  natural  size  has  been  defined.   The) 19 412 ws
16 463.46(overloaded  functions  natural,  stretch,  shrink,  and  alignment  set  and  get  the) 20 412 ws
16 449.72(respective  values.) 2 101.308 ws
18 /Times-Bold sf
16 408.44(2.2) 3 38.5 as
46 408.44(Allocations) 11 132.004 as
12 /Times-Roman sf
16 376.04(The  actual  size  a  glyph  is  given  is  defined  by  an  ) 22 263.554 ws
12 /Times-Bold sf
263.554 376.04(allocation) 10 313.558 as
12 /Times-Roman sf
313.558 376.04(,  which  specifies  an) 6 412 ws
12 /Times-Bold sf
16 362.3(allotment) 9 64.66 as
12 /Times-Roman sf
64.66 362.3(  in  each  dimension.   Figure  2.4  shows  the  allocation  and  allotment) 21 412 ws
16 348.56(class  interfaces.  An  allotment  specifies  one  dimension  of  an  allocation  with  three) 22 412 ws
16 334.82(values:  an  origin,  a  span,  and  an  alignment.   The  origin  is  a  position  within  the) 29 412 ws
16 321.08(allotment  and  the  span  is  the  size  of  the  allotment.   The  alignment  is  a  fraction) 29 412 ws
16 307.34(specifying  the  position  of  the  origin.   For  example,   if  the  origin  is  1,  span  is  10,) 32 412 ws
16 293.6(and  alignment  is  0.5,  then  the  allotment  begins  at  -4  and  ends  at  6.) 26 333.976 ws
26.668 278.96(The  allocation  constructor  initializes  each  allotment  to  have  zero  values.) 18 412 ws
16 265.22(Allocation::equals  compares  two  allocations  using  a  tolerance  for  individual) 16 412 ws
16 251.48(coordinate  comparisions.   Allocation::allot  sets  the  allotment  for  a  given) 17 412 ws
16 237.74(dimension.   Allocation::allotment  returns  the  allotment  for  a  specified  dimension.) 17 406.144 ws
26.668 223.1(Several  operations  are  provided  for  convenience  when  accessing  allotments  in) 18 412 ws
16 209.36(the  X  and  Y  dimensions.   Allocation::x  and  Allocation::y  return  the  X  and  Y) 25 412 ws
16 195.62(origins.   Allocation::left  and  Allocation::right  return  the  X  dimension  end-points,) 17 412 ws
16 181.88(Allocation::bottom  and  Allocation::top  return  the  Y  dimension  end-points.) 14 373.996 ws
26.668 167.24(The  Allotment  class  also  provides  an  equals  operation  for  comparing  two) 20 412 ws
16 153.5(allotments  with  a  given  tolerance.   Allotment::origin,  Allotment::span,  and) 15 412 ws
16 139.76(Allotment::alignment  are  overloaded  names  for  setting  and  getting  the  allotment) 18 412 ws
16 126.02(values.   Allotment::offset  adds  to  the  current  origin.) 13 263.476 ws
26.668 111.38(Allotment::begin  and  Allotment::end  return  the  end-points  of  an  allotment.) 16 412 ws
16 97.6401(Allotment::begin  is  equivalent  to  the  origin  minus  the  alignment  times  the  span.) 22 412 ws
16 83.9001(Allotment::end  is  equivalent  to  Allotment::begin  plus  the  span.  ) 16 321.676 ws
388.24 36.96(2-) 2 398.236 as
401.236 36.96(6) 1 407.236 as
showpage
%%Page: 7 7
92 37.08 translate
0 0 0 setrgbcolor
18 /Times-Bold sf
16 220.44(2.3) 3 38.5 as
46 220.44(Primitive  glyphs) 2 172.504 ws
12 /Times-Roman sf
16 188.04(Primitive  glyphs  do  not  contain  component  glyphs\261they  are  leaf  nodes  in  a  glyph) 24 412 ws
16 174.3(instance  graph.   Figure  2.5  shows  the  Character,  Space,  and  Label  class  interfaces.) 23 412 ws
16 160.56(A  ) 2 28.6462 ws
12 /Times-Bold sf
28.6462 160.56(character) 9 77.9542 as
12 /Times-Roman sf
77.9542 160.56(  glyph  draws  a  single  character  using  the  given  font  and  color.   The) 25 412 ws
16 146.82(character  code  is  effectively  an  index  into  the  font  information.) 18 319.264 ws
26.668 132.18(A  ) 2 40.6417 ws
12 /Times-Bold sf
40.6417 132.18(space) 5 68.6377 as
12 /Times-Roman sf
68.6377 132.18(  represents  character  spaces.   Fonts  typically  provide  a  single  space) 19 412 ws
16 118.44(character,  but  applications  need  different  sizes  of  spacing  for  minimum  spacing) 20 412 ws
16 104.7(between  words  and  sentences.   Unlike  glue,  a  space  object  can  be  picked.   A  ) 28 387.328 ws
12 /Times-Bold sf
387.328 104.7(label) 5 412 as
12 /Times-Roman sf
16 90.96(is  semantically  equivalent  to  an  LRBox  containing  the  individual  characters  in  a) 22 412 ws
16 77.22(string.) 7 46.336 as
26.668 62.58(Figure  2.6  shows  the  Rule,  Stencil,  and  Image  class  interfaces.   A  ) 23 349.373 ws
12 /Times-Bold sf
349.373 62.58(rule) 4 370.037 as
12 /Times-Roman sf
370.037 62.58(  is  a  line) 6 412 ws
388.24 36.96(2-) 2 398.236 as
401.236 36.96(7) 1 407.236 as
newpath
15.04 681.58 moveto
15.04 682.58 lineto
411.04 682.58 lineto
411.04 681.58 lineto
closepath
gsave eofill grestore
36.376 665.02(class  Allocation  {) 4 122.128 ws
36.376 651.58(public:) 7 69.712 as
47.044 638.14(Allocation\(\);) 13 109.036 as
47.044 624.7(boolean  equals\(const  Allocation&,  float  epsilon\)  const;) 10 312.352 ws
47.044 611.26(void  allot\(DimensionName,  const  Allotment&\);) 6 277.708 ws
47.044 597.82(Allotment&  allotment\(DimensionName\);) 2 246.04 ws
47.044 584.38(const  Allotment&  allotment\(DimensionName\)  const;) 6 302.704 ws
47.044 570.94(Coord  x\(\)  const;) 4 125.704 ws
47.044 557.5(Coord  y\(\)  const;) 4 125.704 ws
47.044 544.06(Coord  left\(\)  const;) 4 135.7 ws
47.044 530.62(Coord  right\(\)  const;) 4 142.372 ws
47.044 517.18(Coord  bottom\(\)  const;) 4 153.712 ws
47.044 503.74(Coord  top\(\)  const;) 4 135.04 ws
36.376 490.3(};) 2 45.472 as
36.376 463.42(class  Allotment  {) 4 120.136 ws
36.376 449.98(public:) 7 69.712 as
47.044 436.54(Allotment\(\);) 12 107.044 as
47.044 423.1(Allotment\(Coord  origin,  Coord  span,  float  alignment\);) 10 308.704 ws
47.044 409.66(boolean  equals\(const  Allotment&,  float  epsilon\)  const;) 10 310.36 ws
47.044 396.22(void  origin\(Coord\);) 2 141.376 ws
47.044 382.78(void  offset\(Coord\);) 2 140.032 ws
47.044 369.34(Coord  origin\(\)  const;) 4 148.372 ws
47.044 355.9(void  span\(Coord\);) 2 134.704 ws
47.044 342.46(Coord  span\(\)  const;) 4 141.7 ws
47.044 329.02(void  alignment\(float\);) 2 152.704 ws
47.044 315.58(float  alignment\(\)  const;) 4 159.7 ws
47.044 302.14(Coord  begin\(\)  const;) 4 146.368 ws
47.044 288.7(Coord  end\(\)  const;) 4 137.032 ws
36.376 275.26(};  ) 2 48.472 ws
12 /Times-Roman sf
87.058 255.82(Figure  2.4:) 2 139.726 ws
150.394 255.82(Allocation  and  allotment  class  interfaces) 8 345.694 ws
newpath
15.04 245.64 moveto
15.04 246.64 lineto
411.04 246.64 lineto
411.04 245.64 lineto
closepath
gsave eofill grestore
showpage
%%Page: 8 8
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 429.72(that  is  parallel  to  a  coordinate  axis  and  is  useful  for  separating  objects  visually.) 26 412 ws
16 415.98(For  convenience,  HRule  and  VRule  subclasses  are  provided  for  specifying) 18 412 ws
16 402.24(horizontal  and  vertical  lines,  respectively.   A  ) 13 233.294 ws
12 /Times-Bold sf
233.294 402.24(stencil) 7 265.958 as
12 /Times-Roman sf
265.958 402.24(  draws  through  a  bitmap  using) 10 412 ws
16 388.5(the  given  color.  A  bitmap  is  logically  an  array  of  bits  that  can  be  zero  or  one.   For) 35 412 ws
16 374.76(elements  that  are  one,  the  stencil  draws  in  the  foreground  color.   For  elements  that) 27 412 ws
16 361.02(are  zero,  the  stencil  does  not  draw.   An  ) 17 206.085 ws
12 /Times-Bold sf
206.084 361.02(image) 5 236.744 as
12 /Times-Roman sf
236.744 361.02(  draws  a  raster.   The  natural  size  and) 15 412 ws
16 347.28(origin  of  a  stencil  \(image\)  is  defined  by  the  dimensions  and  bearings  of  the  bitmap) 28 412 ws
16 333.54(\(raster\).) 9 53.644 as
26.668 318.9(Figure  2.7  shows  the  interfaces  to  the  classes  that  affect  composition.   A) 23 412 ws
12 /Times-Bold sf
16 305.16(discretionary) 13 83.992 as
12 /Times-Roman sf
83.992 305.16(  can  take  on  one  of  several  appearances  depending  on  whether  a) 22 412 ws
16 291.42(break  occurs  on  it.   A  common  use  of  a  discretionary  is  for  white  space  in  a  line  of) 35 412 ws
388.24 36.96(2-) 2 398.236 as
401.236 36.96(8) 1 407.236 as
newpath
14.08 685.42 moveto
14.08 686.42 lineto
410.08 686.42 lineto
410.08 685.42 lineto
closepath
gsave eofill grestore
35.416 668.86(class  Character  :  public  Glyph  {) 10 189.484 ws
35.416 655.42(public:) 7 68.752 as
46.084 641.98(Character\(long  code,  const  Font*,  const  Color*\);) 10 281.056 ws
35.416 628.54(};) 2 44.512 as
35.416 601.66(class  Space  :  public  Glyph  {) 10 171.496 ws
35.416 588.22(public:) 7 68.752 as
46.084 574.78(Space\(unsigned  int  count,  Coord  each,  const  Font*,  const  Color*\);) 16 365.728 ws
35.416 561.34(};) 2 44.512 as
35.416 534.46(class  Label  :  public  Glyph  {) 10 170.164 ws
35.416 521.02(public:) 7 68.752 as
46.084 507.58(Label\(const  char*,  const  Font*,  const  Color*\);) 10 269.728 ws
46.084 494.14(Label\(const  String&,  const  Font*,  const  Color*\);) 10 281.752 ws
35.416 480.7(};  ) 2 47.512 ws
12 /Times-Roman sf
78.286 461.26(Figure  2.5:) 2 130.954 ws
141.622 461.26(Character,  Space,  and  Label  class  interfaces) 10 352.546 ws
newpath
14.08 451.08 moveto
14.08 452.08 lineto
410.08 452.08 lineto
410.08 451.08 lineto
closepath
gsave eofill grestore
newpath
15.04 274.42 moveto
15.04 275.42 lineto
411.04 275.42 lineto
411.04 274.42 lineto
closepath
gsave eofill grestore
12 /Times-Roman sf
36.376 257.86(class  Rule  :  public  Glyph  {) 10 166.468 ws
36.376 244.42(public:) 7 69.712 as
47.044 230.98(Rule\(DimensionName,  const  Color*,  Coord  thickness\);) 8 313.696 ws
36.376 217.54(};) 2 45.472 as
36.376 198.1(class  Stencil  :  public  Glyph  {) 10 177.136 ws
36.376 184.66(public:) 7 69.712 as
47.044 171.22(Stencil\(const  Bitmap*,  const  Color*\);) 6 229.048 ws
36.376 157.78(};) 2 45.472 as
36.376 138.34(class  Image  :  public  Glyph  {) 10 173.788 ws
36.376 124.9(public:) 7 69.712 as
47.044 111.46(Image\(const  Raster*\);) 2 153.352 ws
36.376 98.02(};) 2 45.472 as
12 /Times-Roman sf
87.562 78.5799(Figure  2.6:) 2 140.23 ws
150.898 78.5799(Rule,  Stencil,  and  Image  class  interfaces) 10 345.19 ws
newpath
15.04 68.4 moveto
15.04 69.4 lineto
411.04 69.4 lineto
411.04 68.4 lineto
closepath
gsave eofill grestore
showpage
%%Page: 9 9
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 348.54(text,  where  the  white  space  becomes  zero-width  glue  if  a  break  occurs  on  the) 26 412 ws
16 334.8(discretionary.   The  penalty  associated  with  a  discretionary  defines  the  relative  cost) 21 412 ws
16 321.06(of  breaking.) 2 73.984 ws
26.668 306.42(A  ) 2 39.667 ws
12 /Times-Bold sf
39.667 306.42(glue) 4 61.003 as
12 /Times-Roman sf
61.003 306.42(  object  is  blank  space  with  explicit  stretchability  and  shrinkability  in  a) 22 412 ws
16 292.68(single  dimension.   For  convenience,  HGlue  and  VGlue  subclasses  are  provided  for) 21 412 ws
16 278.94(horizontal  and  vertical  glue,  respectively.   A  ) 13 239.821 ws
12 /Times-Bold sf
239.821 278.94(shape-of) 8 283.153 as
12 /Times-Roman sf
283.153 278.94(  object  has  no  appearance) 8 412 ws
16 265.2(but   the  identical  shape  of  another  glyph.) 13 210.472 ws
18 /Times-Bold sf
16 223.92(2.4) 3 38.5 as
46 223.92(Composite  glyphs) 2 182.512 ws
12 /Times-Roman sf
16 191.52(A  composite  glyph  contains  one  or  more  components.   Typically,  a  composite) 21 412 ws
16 177.78(glyph  uses  a  ) 6 81.91 ws
12 /Times-Bold sf
81.91 177.78(layout) 6 113.914 as
12 /Times-Roman sf
113.914 177.78(  object  to  arrange  its  components  in  some  manner  such  as  a) 22 412 ws
16 164.04(tile  or  overlay.   A  layout  is  not  a  glyph,  but  an  object  that  helps  glyphs  manage) 31 412 ws
16 150.3(the  requests  and  allocations  of  a  group  of  components.   Figure  2.8  shows  the) 25 412 ws
16 136.56(class  interfaces  for  layout  and  its  sub  classes.  Layout  is  an  abstract  class,  so) 26 412 ws
16 122.82(the  constructor  is  only  available  to  subclasses.   Layout::request  computes  a  total) 21 412 ws
16 109.08(requisition  given  a  set  of  ) 10 157.934 ws
10 /Helvetica sf
157.934 109.08(count) 5 182.394 as
12 /Times-Roman sf
182.394 109.08(  requisitions  for  the  individual  components.) 10 412 ws
16 95.34(Layout::allocate  uses  the  given  allocation  and  individual  requisitions  to  compute) 18 412 ws
16 81.6(the  individual  allocations.) 4 140.332 ws
26.668 66.96(An  ) 2 44.9517 ws
12 /Times-Bold sf
44.9517 66.96(align) 5 70.2957 as
12 /Times-Roman sf
70.2957 66.96(  object  is  a  layout  that  aligns  all  its  components  origins  in  a  particular) 26 412 ws
388.24 36.96(2-) 2 398.236 as
401.236 36.96(9) 1 407.236 as
newpath
15.04 677.74 moveto
15.04 678.74 lineto
411.04 678.74 lineto
411.04 677.74 lineto
closepath
gsave eofill grestore
36.376 661.18(class  Discretionary  :  public  Glyph  {) 10 209.116 ws
36.376 647.74(public:) 7 69.712 as
47.044 634.3(Discretionary\(int  penalty,  Glyph*\);) 4 216.688 ws
47.044 620.86(Discretionary\(int  penalty,  Glyph*  no,  Glyph*  pre,  Glyph*  in,  Glyph*) 16 396.376 ws
36.376 607.12(post\);) 6 63.712 as
36.376 593.68(};) 2 45.472 as
36.376 566.8(class  Glue  :  public  Glyph  {) 10 167.128 ws
36.376 553.36(public:) 7 69.712 as
47.044 539.92(Glue\(DimensionName,  Coord  natural\);) 4 235.348 ws
47.044 526.48(Glue\() 5 74.368 as
57.712 513.04(DimensionName,  Coord  natural,  Coord  stretch,  Coord  shrink,) 12 354.352 ws
57.712 499.6(float  alignment  =  0) 6 149.476 ws
47.044 486.16(\);) 2 54.376 as
47.044 472.72(Glue\(const  Requisition&\);) 2 174.712 ws
36.376 459.28(};) 2 45.472 as
36.376 439.84(class  ShapeOf  :  public  Glyph  {) 10 185.788 ws
36.376 426.4(public:) 7 69.712 as
47.044 412.96(ShapeOf\(const  Glyph*\);) 2 164.692 ws
36.376 399.52(};) 2 45.472 as
12 /Times-Roman sf
54.538 380.08(Figure  2.7:) 2 107.206 ws
117.874 380.08(Primitive  glyphs  that  specify  composition  information) 10 378.214 ws
newpath
15.04 369.9 moveto
15.04 370.9 lineto
411.04 370.9 lineto
411.04 369.9 lineto
closepath
gsave eofill grestore
showpage
%%Page: 10 10
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(dimension.   A  ) 5 86.283 ws
12 /Times-Bold sf
86.283 671.36(superpose) 9 137.619 as
12 /Times-Roman sf
137.619 671.36(  overlays  components  using  two  to  five  other  layouts.   A) 19 412 ws
12 /Times-Bold sf
16 657.62(tile) 4 31.996 as
12 /Times-Roman sf
31.996 657.62(  is  a  layout  that  arranges  components  side-by-side  in  a  particular  dimension.) 22 412 ws
16 643.88(The  components  are  arranged  in  increasing  order;  that  is,  the  first  component) 22 412 ws
16 630.14(starts  at  the  lowest  coordinate  in  the  dimension.   For  example,  Tile\(Dimension_X\)) 21 412 ws
16 616.4(tiles  left-to-right.   TileReversed  is  just  like  Tile  but  places  components  in) 21 412 ws
16 602.66(decreasing  order.   For  example,  TileReversed\(Dimension_Y\)  tiles  top-to-bottom.  ) 15 407.44 ws
388.24 36.96(2-10) 4 410.236 as
newpath
16 574.06 moveto
16 575.06 lineto
412 575.06 lineto
412 574.06 lineto
closepath
gsave eofill grestore
37.336 557.5(class  Layout  {) 4 106.42 ws
37.336 544.06(public:) 7 70.672 as
48.004 530.62(virtual  void  request\() 4 145.324 ws
58.672 517.18(unsigned  long  count,  const  Requisition*,  Requisition&  result) 12 352.024 ws
48.004 503.74(\);) 2 55.336 as
48.004 490.3(virtual  void  allocate\() 4 147.988 ws
58.672 476.86(const  Allocation&  given,  unsigned  long  count,) 10 283 ws
58.672 463.42(const  Requisition*,  Allocation&  result) 6 244.012 ws
48.004 449.98(\);) 2 55.336 as
37.336 436.54(protected:) 10 85.324 as
48.004 423.1(Layout\(\);) 9 93.328 as
37.336 409.66(};) 2 46.432 as
37.336 382.78(class  Align  :  public  Layout  {) 10 176.092 ws
37.336 369.34(public:) 7 70.672 as
48.004 355.9(Align\(DimensionName\);) 21 167.992 as
37.336 342.46(};) 2 46.432 as
37.336 315.58(class  Superpose  :  public  Layout  {) 10 198.748 ws
37.336 302.14(public:) 7 70.672 as
48.004 288.7(Superpose\(Layout*,  Layout*,  Layout*  =  nil,) 8 262.42 ws
58.672 275.26(Layout*  =  nil,  Layout*  =  nil) 10 195.544 ws
48.004 261.82(\);) 2 55.336 as
37.336 248.38(};) 2 46.432 as
37.336 221.5(class  Tile  :  public  Layout  {) 10 168.088 ws
48.004 208.06(Tile\(DimensionName\);) 20 159.988 as
37.336 194.62(};) 2 46.432 as
37.336 167.74(class  TileReversed  :  public  Layout  {) 10 212.74 ws
37.336 154.3(public:) 7 70.672 as
48.004 140.86(TileReversed\(DimensionName\);) 28 204.64 as
37.336 127.42(};  ) 2 49.432 ws
12 /Times-Roman sf
150.508 107.98(Figure  2.8:) 2 203.176 ws
213.844 107.98(Layout  classes) 2 284.164 ws
newpath
16 97.7999 moveto
16 98.7999 lineto
412 98.7999 lineto
412 97.7999 lineto
closepath
gsave eofill grestore
showpage
%%Page: 11 11
92 37.08 translate
0 0 0 setrgbcolor
14 /Times-Bold sf
16 670.4(2.4.1) 5 44 as
51 670.4(Boxes) 5 86 as
12 /Times-Roman sf
16 649.96(A  ) 2 29.4363 ws
12 /Times-Bold sf
29.4363 649.96(box) 3 48.1083 as
12 /Times-Roman sf
48.1083 649.96(  is  a  composite  glyph  that  arranges  its  components  according  to  a  given) 24 412 ws
16 636.22(layout.   For  convenience,  subclasses  are  provided  for  common  layouts.   Figure  2.9) 22 412 ws
16 622.48(shows  the  class  interfaces  for  box  and  its  predefined  subclasses.   A  box  can  be) 27 412 ws
16 608.74(constructed  either  with  a  list  of  up  to  10  glyph  components,  or  an  ) 26 365.88 ws
10 /Helvetica sf
365.88 608.74(initial_size) 12 412 as
12 /Times-Roman sf
16 595(estimate  on  the  number  of  components.   The  size  is  not  a  maximum,  but  can  be) 29 412 ws
16 581.26(used  to  avoid  growing  the  list  dynamically.   The  base  class  is  given  a  specific) 27 412 ws
388.24 36.96(2-11) 4 410.236 as
newpath
15.04 562.54 moveto
15.04 563.54 lineto
411.04 563.54 lineto
411.04 562.54 lineto
closepath
gsave eofill grestore
36.376 545.98(class  Box  :  public  Glyph  {) 10 163.804 ws
36.376 532.54(public:) 7 69.712 as
47.044 519.1(Box\(Layout*,  unsigned  int  initial_size\);) 6 239.044 ws
47.044 505.66(Box\() 4 71.044 as
57.712 492.22(Layout*,) 8 100.708 as
57.712 478.78(Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,) 28 391.912 ws
57.712 465.34(Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil) 28 388.912 ws
47.044 451.9(\);) 2 54.376 as
36.376 438.46(};) 2 45.472 as
36.376 411.58(class  LRBox  :  public  Box  {) 10 169.144 ws
36.376 398.14(public:) 7 69.712 as
47.044 384.7(LRBox\(unsigned  int  initial_size\);) 4 208.384 ws
47.044 371.26(LRBox\() 6 86.38 as
57.712 357.82(Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,) 28 391.912 ws
57.712 344.38(Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil) 28 388.912 ws
47.044 330.94(\);) 2 54.376 as
36.376 317.5(};) 2 45.472 as
36.376 290.62(class  TBBox  :  public  Box  {) 10 169.144 ws
36.376 277.18(public:) 7 69.712 as
47.044 263.74(TBBox\(unsigned  int  initial_size\);) 4 208.384 ws
47.044 250.3(TBBox\() 6 86.38 as
57.712 236.86(Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,) 28 391.912 ws
57.712 223.42(Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil) 28 388.912 ws
47.044 209.98(\);) 2 54.376 as
36.376 196.54(};) 2 45.472 as
36.376 169.66(class  Overlay  :  public  Box  {) 10 172.456 ws
36.376 156.22(public:) 7 69.712 as
47.044 142.78(Overlay\() 8 89.692 as
57.712 129.34(Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,) 28 391.912 ws
57.712 115.9(Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil,  Glyph*  =  nil) 28 388.912 ws
47.044 102.46(\);) 2 54.376 as
36.376 89.0199(};  ) 2 48.472 ws
12 /Times-Roman sf
156.544 69.5799(Figure  2.9:) 2 209.212 ws
219.88 69.5799(Box  classes) 2 276.208 ws
newpath
15.04 59.3999 moveto
15.04 60.3999 lineto
411.04 60.3999 lineto
411.04 59.3999 lineto
closepath
gsave eofill grestore
showpage
%%Page: 12 12
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(layout  to  use.   LRBox  uses  a  tile  layout  in  the  X  dimension  to  arrange  its) 29 412 ws
16 657.62(components  left-to-right.   TBBox  uses  a  tile-reversed  layout  in  the  Y  dimension) 21 412 ws
16 643.88(to  arrange  its  components  top-to-bottom.   Overlay  uses  a  superpose  layout  to) 21 412 ws
16 630.14(place  its  components  in  the  same  position.   The  components  are  ordered  from) 23 412 ws
16 616.4(back-to-front.  ) 2 85.312 ws
14 /Times-Bold sf
16 590(2.4.2) 5 44 as
51 590(Decks) 5 86.77 as
12 /Times-Roman sf
16 569.56(A  ) 2 28.444 ws
12 /Times-Bold sf
28.444 569.56(deck) 4 52.444 as
12 /Times-Roman sf
52.444 569.56(  is  a  composite  glyph  where  only  one  of  the  components  is  visible  at  any) 28 412 ws
16 555.82(time.   The  natural  size  is  the  maximum  size  of  the  natural  sizes  of  its  components.) 29 412 ws
16 542.08(A  deck  can  be  stretched  to  be  as  large  as  its  largest   fully-stretched  component.) 27 412 ws
16 528.34(Figure  2.10  shows  the  class  interface  for  deck.   Deck::card  returns  the  index  of) 25 412 ws
16 514.6(the  component  that  is  currently  visible  \(or  -1  if  no  component  is  showing\).) 24 412 ws
16 500.86(Deck::flip_to  makes  the  component  at  the  given  index  the  visible  one.  ) 22 355.3 ws
14 /Times-Bold sf
16 474.46(2.4.3) 5 44 as
51 474.46(Pages) 5 85.216 as
12 /Times-Roman sf
16 454.02(A  ) 2 30.2062 ws
12 /Times-Bold sf
30.2062 454.02(page) 4 54.2062 as
12 /Times-Roman sf
54.2062 454.02(  is  a  composite  glyph  that  contains  a  background  and  any  number  of) 24 412 ws
16 440.28(foreground  components.   The  location  of  the  components  is  specified  explicitly.) 19 412 ws
16 426.54(Components  of  a  page  are  drawn  when  the  page  is  drawn,  except  for  components) 26 412 ws
16 412.8(that  are  explicitly  ``hidden''  using  Page::show\(false\).  Figure  2.11  shows  the  class) 20 412 ws
16 399.06(interface  for  page.   Page::left,  Page::bottom,  Page::right,  and  Page::top  return) 17 412 ws
16 385.32(the  respective  coordinates  of  the  page's  canvas  as  defined  by  the  page's  most) 24 412 ws
16 371.58(recent  allocation.   Page::x  and  Page::y  return  the  origin  of  the  page.   Page::move) 24 412 ws
388.24 36.96(2-12) 4 410.236 as
newpath
15.04 348.46 moveto
15.04 349.46 lineto
411.04 349.46 lineto
411.04 348.46 lineto
closepath
gsave eofill grestore
36.376 331.9(class  Deck  :  public  Glyph  {) 10 169.12 ws
36.376 318.46(public:) 7 69.712 as
47.044 305.02(Deck\(\);) 7 83.692 as
47.044 291.58(int  card\(\)  const;) 4 123.028 ws
47.044 278.14(void  flip_to\(int  index\);) 4 157.048 ws
36.376 264.7(};) 2 45.472 as
12 /Times-Roman sf
133.396 245.26(Figure  2.10:) 2 192.064 ws
202.732 245.26(Deck  class  interface) 4 299.356 ws
12 /Times-Roman sf
36.376 211.18(class  Page  :  public  Glyph  {) 10 167.128 ws
36.376 197.74(public:) 7 69.712 as
47.044 184.3(Page\(Glyph*  background\);) 2 177.352 ws
47.044 170.86(Coord  left\(\)  const,  bottom\(\)  const,  right\(\)  const,  top\(\)  const;) 16 334.684 ws
47.044 157.42(Coord  x\(\)  const,  y\(\)  const;) 8 174.028 ws
47.044 143.98(void  move\(unsigned  int  index,  Coord  x,  Coord  y\);) 14 288.04 ws
47.044 130.54(void  location\(unsigned  int  index,  Coord&  x,  Coord&  y\);) 14 318.712 ws
47.044 117.1(void  show\(unsigned  int  index,  Coord&  x,  Coord&  y\);) 14 305.38 ws
47.044 103.66(boolean  showing\(unsigned  int  index\)  const;) 8 257.032 ws
36.376 90.2199(};  ) 2 48.472 ws
12 /Times-Roman sf
134.392 70.7799(Figure  2.11:) 2 193.06 ws
203.728 70.7799(Page  class  interface) 4 298.36 ws
newpath
15.04 60.6 moveto
15.04 61.6 lineto
411.04 61.6 lineto
411.04 60.6 lineto
closepath
gsave eofill grestore
showpage
%%Page: 13 13
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(allocates  the  component  specified  by  the  given  index  with  its  origin  at  the  given) 26 412 ws
16 657.62(position.   Page::location  returns  the  current  origin  of  the  specified  component.) 19 412 ws
16 643.88(Page::show  turns  on  or  off  the  allocation  and  drawing  of  the  specified  component.) 24 412 ws
16 630.14(Page::showing  returns  whether  the  specified  component  is  currently  showing.  ) 18 391.948 ws
18 /Times-Bold sf
16 588.86(2.5) 3 38.5 as
46 588.86(MonoGlyphs) 10 146.026 as
12 /Times-Roman sf
16 556.46(MonoGlyph  is  an  abstract  class  for  glyphs  that  contain  a  single  glyph,  called  its) 26 412 ws
12 /Times-Italic sf
16 542.72(body) 4 39.328 as
12 /Times-Roman sf
39.328 542.72(.   The  default  behavior  of  monoglyphs  is  to  pass  operations  on  to  the  body.) 27 412 ws
16 528.98(For  example,  the  implementation  of  MonoGlyph::draw  simply  calls  draw  on) 18 412 ws
16 515.24(the  body.   This  feature  is  very  useful  because  it  means  that  a  monoglyph  can) 27 412 ws
16 501.5(affect  one  aspect  of  the  body's  behavior  without  changing  other  aspects.   In) 23 412 ws
16 487.76(particular,  monoglyphs  usually  do  not  change  structure  management.   Therefore,  a) 19 412 ws
16 474.02(monoglyph  can  be  \252wrapped\272  around  a  composite  glyph  and  the  result  passed  to) 24 412 ws
16 460.28(an  object  that  modifies  the  structure  of  the  composite  without  knowing  about  the) 24 412 ws
16 446.54(presence  of  the  monoglyph.   For  example,  suppose   a  prototype  menu  is  built  and) 26 412 ws
16 432.8(returned  to  a  function  that  appends  the  items.   All  the  function  need  assume  is  that) 29 412 ws
16 419.06(the  prototype  is  some  glyph;  it  can  use  Glyph::append  to  put  in  the  items.   The) 29 412 ws
16 405.32(arrangement  of  the  items  will  be  defined  by  the  aggregate  and  any  additional) 24 412 ws
16 391.58(decoration,  such  as  a  3D  borderframe  or  shadow,  can  be  wrapped  around  the) 24 412 ws
16 377.84(aggregate  independently.) 2 136.636 ws
26.668 363.2(Figure  2.12  shows  the  MonoGlyph  base  class  interface.  The  constructor  is) 20 412 ws
16 349.46(protected  because  MonoGlyph  is  an  abstract  class.   A  non-nil  glyph  specifies  the) 23 412 ws
16 335.72(initial  body.   MonoGlyph::body  is  overloaded  to  set  and  return  the  body.  ) 23 366.484 ws
14 /Times-Bold sf
16 309.32(2.5.1) 5 44 as
51 309.32(Decoration) 10 117.094 as
12 /Times-Roman sf
16 288.88(A  common  use  of  monoglyphs  is  to  decorate  a  glyph.   Decoration  could  also  be) 27 412 ws
16 275.14(implemented  by  putting  the  body  and  a  glyph  that  draws  the  decoration  into  an) 26 412 ws
16 261.4(overlay.   However,  an  overlay  is  a  composite  glyph,  so  it  interprets  structure) 23 412 ws
16 247.66(operations  as  manipulating  the  components  of  the  overlay.   With  this  approach,) 21 412 ws
16 233.92(one  could  not  pass  a  decorated  glyph  to  another  object  that  wants  to  change  the) 28 412 ws
16 220.18(structure  of  the  body.   It  is  therefore  more  convenient  to  decorate  glyphs  using  a) 27 412 ws
16 206.44(monoglyph.) 10 73.672 as
388.24 36.96(2-13) 4 410.236 as
newpath
16 190.06 moveto
16 191.06 lineto
412 191.06 lineto
412 190.06 lineto
closepath
gsave eofill grestore
37.336 173.5(class  MonoGlyph  :  public  Glyph  {) 10 203.428 ws
37.336 160.06(protected:) 10 85.324 as
48.004 146.62(MonoGlyph\(\);) 12 118 as
37.336 133.18(public:) 7 70.672 as
48.004 119.74(virtual  void  body\(Glyph*\);) 4 178 ws
48.004 106.3(virtual  Glyph*  body\(\)  const;) 6 184.996 ws
37.336 92.86(};  ) 2 49.4319 ws
12 /Times-Roman sf
117.682 73.42(Figure  2.12:) 2 176.35 ws
187.018 73.42(MonoGlyph  class  interface) 4 316.99 ws
newpath
16 63.24 moveto
16 64.24 lineto
412 64.24 lineto
412 63.24 lineto
closepath
gsave eofill grestore
showpage
%%Page: 14 14
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 512.04(Figure  2.13  shows  the  interfaces  to  the  Background  and  Border  classes.   A) 23 412 ws
12 /Times-Bold sf
16 498.3(background) 10 78.016 as
12 /Times-Roman sf
78.016 498.3(  glyph  draws  a  solid  color  under  its  body.   Since  they  are  typically) 25 412 ws
16 484.56(used  near  the  top  of  an  instance  graph,  background  glyphs  are  more  efficient  than) 26 412 ws
16 470.82(having  each  object  draw  its  own  background.   A  ) 17 272.608 ws
12 /Times-Bold sf
272.608 470.82(border) 6 307.936 as
12 /Times-Roman sf
307.936 470.82(  draws  a  thick  solid) 8 412 ws
16 457.08(rectangle  around  the  edge  of  a  glyph.   Borders  do  not  request  additional  space;) 25 412 ws
16 443.34(they  simply  draw  underneath  the  body.   To  dedicate  space  to  a  border,  it  is) 27 412 ws
16 429.6(necessary  to  use  a  ) 8 115.266 ws
12 /Times-Bold sf
115.266 429.6(margin) 6 152.598 as
12 /Times-Roman sf
152.598 429.6(  glyph,  which  allocates  additional  space  around  its) 14 412 ws
16 415.86(body.   Figure  2.14  shows  the  Margin  class  interface.   Margin  glyphs  do  not  draw) 26 412 ws
16 402.12(in  the  space.   For  convenience,  HMargin,  VMargin,  LMargin,  RMargin,  TMargin,) 19 412 ws
16 388.38(and  BMargin  subclasses  are  provided  that  create  horizontal,  vertical,  left,  right,) 20 412 ws
16 374.64(top,  and  bottom  margins,  respectively.) 8 200.32 ws
26.668 360(A  ) 2 38.4404 ws
12 /Times-Bold sf
38.4404 360(shadow) 6 77.1164 as
12 /Times-Roman sf
77.1164 360(  draws  a  half-filled  area  under  its  body.   Because  it  does  not  cover  the) 27 412 ws
16 346.26(entire  window,  using  a  shadow  as  the  root  glyph  in  a  window  implies  that  the) 28 412 ws
16 332.52(window  should  not  be  double-buffered.   Figure  2.15  shows  the  Shadow  class) 21 412 ws
16 318.78(interface.) 10 60.976 as
26.668 304.14(An  ) 2 45.7441 ws
12 /Times-Bold sf
45.7441 304.14(lr-marker) 9 97.0561 as
12 /Times-Roman sf
97.0561 304.14(  is  a  glyph  that  can  mark  a  region  of  its  body.   The  marking  is) 29 412 ws
16 290.4(done  by  painting  a  color  under  the  area  or  a  color  on  top  of  the  area  \(or  both\).) 34 412 ws
16 276.66(The  region  is  a  shape  normally  associated  with  text  selections.   The  LRMarker) 23 412 ws
388.24 36.96(2-14) 4 410.236 as
newpath
15.0402 679.66 moveto
15.0402 680.66 lineto
411.04 680.66 lineto
411.04 679.66 lineto
closepath
gsave eofill grestore
36.3762 663.1(class  Background  :  public  MonoGlyph  {) 10 231.124 ws
36.3762 649.66(public:) 7 69.7122 as
47.0442 636.22(Background\(Glyph*,  const  Color*\);) 4 220.696 ws
36.3762 622.78(};) 2 45.4722 as
36.3762 603.34(class  Border  :  public  MonoGlyph  {) 10 205.792 ws
36.3762 589.9(public:) 7 69.7122 as
47.0442 576.46(Border\(Glyph*,  const  Color*,  Coord  thickness\);) 8 279.028 ws
36.3762 563.02(};  ) 2 48.4722 ws
12 /Times-Roman sf
86.0681 543.58(Figure  2.13:) 2 144.736 ws
155.404 543.58(Background  and  Border  class  interfaces) 8 346.684 ws
newpath
15.0402 533.4 moveto
15.0402 534.4 lineto
411.04 534.4 lineto
411.04 533.4 lineto
closepath
gsave eofill grestore
newpath
15.04 260.02 moveto
15.04 261.02 lineto
411.04 261.02 lineto
411.04 260.02 lineto
closepath
gsave eofill grestore
12 /Times-Roman sf
36.376 243.46(class  Margin  :  public  MonoGlyph  {) 10 207.796 ws
36.376 230.02(public:) 7 69.712 as
47.044 216.58(Margin\(Glyph*  body,  Coord  all\);) 6 207.7 ws
47.044 203.14(Margin\(Glyph*,  Coord  hmargin,  Coord  vmargin\);) 8 287.692 ws
47.044 189.7(Margin\(Glyph*,  Coord  left,  Coord  right,  Coord  bottom,  Coord  top\);) 16 373.708 ws
47.044 176.26(Margin\() 7 86.368 as
57.712 162.82(Glyph*,  Coord  left,  Coord  left_stretch,  Coord  left_shrink,) 12 335.692 ws
57.712 149.38(Coord  right,  Coord  right_stretch,  Coord  right_shrink,) 10 313.708 ws
57.712 135.94(Coord  bottom,  Coord  bottom_stretch,  Coord  bottom_shrink,) 10 347.728 ws
57.712 122.5(Coord  top,  Coord  top_stretch,  Coord  top_shrink) 10 288.712 ws
47.044 109.06(\);) 2 54.376 as
36.376 95.62(};) 2 45.472 as
12 /Times-Roman sf
128.392 76.18(Figure  2.14:) 2 187.06 ws
197.728 76.18(Margin  class  interface) 4 304.36 ws
newpath
15.04 66 moveto
15.04 67 lineto
411.04 67 lineto
411.04 66 lineto
closepath
gsave eofill grestore
showpage
%%Page: 15 15
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 569.88(constructor  takes  two  colors,  either  of  which  can  be  nil  if  the  associated  underlay) 26 412 ws
16 556.14(or  overlay  drawing  is  not  desired.   LRMarker::mark  paints  the  given  region.   If  y1) 26 412 ws
16 542.4(and  y2  are  the  same,  then  the  mark  region  is  a  single  rectangle.   Otherwise,  the) 29 412 ws
16 528.66(region  is  defined  as  starting  at  \(x1,y1\)  and  filling  a  height  of  h1  to  \(x1,right\(\)\),) 28 412 ws
16 514.92(then  filling  \(left\(\),y1+h1\)  to  \(right\(\),y2\)  and  filling  a  height  of  h2  from  \(left\(\),y2\)) 24 412 ws
16 501.18(to  \(x2,y2\).   LRMarker::unmark  restores  the  area  to  its  unmarked  appearance.   An) 22 412 ws
12 /Times-Bold sf
16 487.44(xy-marker) 9 70.648 as
12 /Times-Roman sf
70.648 487.44(  is  simliar  to  an  lr-marker,  but  it  only  paints  a  rectangular  area.   While) 27 412 ws
16 473.7(an  lr-marker  is  most  useful  for  selecting  text,  xy-markers  are  useful  for  selecting) 24 412 ws
16 459.96(an  item  in  a  list  or  table.   Figure  2.16  shows  the  LRMarker  and  XYMarker  class) 29 412 ws
16 446.22(interfaces.) 11 65.644 as
26.668 431.58(A  ) 2 38.6717 ws
12 /Times-Bold sf
38.6717 431.58(transform-setter) 16 123.296 as
12 /Times-Roman sf
123.296 431.58(  is  a  glyph  that  contains  a  transformer  that  it  uses  to  change) 24 412 ws
16 417.84(the  canvas  coordinate  transformation  matrix  during  allocation,  drawing,  and) 16 412 ws
16 404.1(picking.   The  new  matrix  is  the  old  matrix  multiplied  by  the  transform-setter's) 23 412 ws
16 390.36(matrix.   The  natural  size  of  a  transform-setter  is  the  transformed  natural  size  of  its) 27 412 ws
16 376.62(body.   A  transform-setter   does  not  decorate  its  body  in  the  same  sense  as  the  other) 30 412 ws
16 362.88(glyphs  described  here,  but  it  does  modify  the  appearance  of  its  body.   Figure  2.17) 27 412 ws
16 349.14(shows  the  TransformSetter  class  interface.) 8 219.616 ws
388.24 36.96(2-15) 4 410.236 as
newpath
17.9199 677.74 moveto
17.9199 678.74 lineto
413.92 678.74 lineto
413.92 677.74 lineto
closepath
gsave eofill grestore
39.2559 661.18(class  Shadow  :  public  MonoGlyph  {) 10 214.012 ws
39.2559 647.74(public:) 7 72.5919 as
49.9239 634.3(Shadow\(Glyph*,  Coord  x_offset,  Coord  y_offset,  const  Color*\);) 12 360.232 ws
39.2559 620.86(};  ) 2 51.3519 ws
12 /Times-Roman sf
129.604 601.42(Figure  2.15:) 2 188.272 ws
198.94 601.42(Shadow  class  interface) 4 308.908 ws
newpath
17.9199 591.24 moveto
17.9199 592.24 lineto
413.92 592.24 lineto
413.92 591.24 lineto
closepath
gsave eofill grestore
newpath
16.9599 328.3 moveto
16.9599 329.3 lineto
412.96 329.3 lineto
412.96 328.3 lineto
closepath
gsave eofill grestore
12 /Times-Roman sf
38.2959 311.74(class  LRMarker  :  public  MonoGlyph  {) 10 225.04 ws
38.2959 298.3(public:) 7 71.6319 as
48.9639 284.86(LRMarker\(Glyph*,  Color*  overlay,  Color*  underlay\);) 8 309.592 ws
48.9639 271.42(void  mark\() 2 101.956 ws
59.6319 257.98(Coord  left,  Coord  right,  Coord  x1,  Coord  y1,) 14 275.296 ws
59.6319 244.54(Coord  h1,  Coord  x2,  Coord  y2,  Coord  h2) 14 257.632 ws
48.9639 231.1(\);) 2 56.2959 as
48.9639 217.66(void  unmark\(\);) 2 121.288 ws
38.2959 204.22(};) 2 47.3919 as
38.2959 177.34(class  XYMarker  :  public  MonoGlyph  {) 10 227.032 ws
38.2959 163.9(public:) 7 71.6319 as
48.9639 150.46(XYMarker\(Glyph*,  Color*  overlay,  Color*  underlay\);) 8 311.584 ws
48.9639 137.02(void  mark\(Coord  left,  Coord  bottom,  Coord  right,  Coord  top\);) 16 347.296 ws
48.9639 123.58(void  unmark\(\);) 2 121.288 ws
38.2959 110.14(};  ) 2 50.3919 ws
12 /Times-Roman sf
82.3299 90.6999(Figure  2.16:) 2 140.998 ws
151.666 90.6999(LRMarker  and  XYMarker  class  interfaces) 8 354.262 ws
newpath
16.9599 80.52 moveto
16.9599 81.52 lineto
412.96 81.52 lineto
412.96 80.52 lineto
closepath
gsave eofill grestore
showpage
%%Page: 16 16
92 37.08 translate
0 0 0 setrgbcolor
14 /Times-Bold sf
16 568.92(2.5.2) 5 44 as
51 568.92(Adjusting  geometry) 2 169.594 ws
12 /Times-Roman sf
16 548.48(Figure  2.18  shows  the  MonoGlyph  subclasses  that  modify  the  geometry  of  the) 22 412 ws
16 534.74(body.   A  ) 5 64.3655 ws
12 /Times-Bold sf
64.3655 534.74(center) 6 96.3455 as
12 /Times-Roman sf
96.3455 534.74(  glyph  aligns  its  body  within  an  allocated  area.   An  alignment) 21 412 ws
16 521(in  a  dimension  is  specified  by  a  floating  point  value,  indicating  the  fraction) 24 412 ws
16 507.26(of  the  total  area  where  the  center  of  the  component  should  be  positioned.) 24 412 ws
16 493.52(Centering  can  be  performed  on  both  the  X  and  Y  dimensions  or  on  a  specific) 28 412 ws
16 479.78(dimension.   For  convenience,  HCenter  and  VCenter  subclasses  are  provided  that) 19 412 ws
16 466.04(center  horizontally  and  vertically,  respectively.   The  term  ``center''  is  actually) 19 412 ws
16 452.3(somewhat  misleading  because  only  an  alignment  of  0.5  actually  centers  the) 20 412 ws
16 438.56(body\261a  horizontal  alignment  of  1.0  will  right  adjust  it.   A  center  only  changes  the) 27 412 ws
16 424.82(alignment  of  its  body,  it  does  not  set  the  position  directly.   Therefore,  if  a  center) 29 412 ws
16 411.08(glyph  is  inside  a  glyph  that  does  not  pay  attention  to  alignments,  the  result  will) 28 412 ws
16 397.34(not  be  centered  as  expected.   In  particular,  a  top-level  center  glyph  will  not  have) 27 412 ws
16 383.6(any  effect  because  a  window  does  not  use  alignments  to  position  its  root  glyph.) 26 396.628 ws
26.668 368.96(A  ) 2 41.889 ws
12 /Times-Bold sf
41.889 368.96(fixed-span) 10 95.229 as
12 /Times-Roman sf
95.229 368.96(  glyph  controls  the  shape  and  allocation  of  its  body  in  one) 22 412 ws
16 355.22(dimension.   FixedSpan::request  simply  replies  with  its  specified  size  ignoring  its) 19 412 ws
16 341.48(body.   Similarly,  FixedSpan::allocate  ignores  its  allocation  and  passes  the  body  its) 21 412 ws
16 327.74(specified  size.   A  fixed-span  is  ideal  for  use  around  objects  that  need  a  default  size,) 29 412 ws
16 314(but  do  not  wish  to  specify  one  themselves.   For  example,  a  vertical  scrollbar  needs) 27 412 ws
16 300.26(a  reasonable  horizontal  size,  but  would  rather  not  define  one  itself.   By  using) 25 412 ws
16 286.52(fixed-spans,  other  classes  need  not  provide  optional  constructors  that  specify  sizes.) 20 412 ws
388.24 36.96(2-16) 4 410.236 as
newpath
16 677.74 moveto
16 678.74 lineto
412 678.74 lineto
412 677.74 lineto
closepath
gsave eofill grestore
37.336 661.18(class  TransformSetter  :  public  MonoGlyph  {) 10 252.076 ws
37.336 647.74(public:) 7 70.672 as
48.004 634.3(TransformSetter\(Glyph*,  const  Transformer&\);) 4 277.624 ws
37.336 620.86(};  ) 2 49.4319 ws
12 /Times-Roman sf
107.692 601.42(Figure  2.17:) 2 166.36 ws
177.028 601.42(TransformSetter  class  interface) 4 326.98 ws
newpath
16 591.24 moveto
16 592.24 lineto
412 592.24 lineto
412 591.24 lineto
closepath
gsave eofill grestore
newpath
16 246.7 moveto
16 247.7 lineto
412 247.7 lineto
412 246.7 lineto
closepath
gsave eofill grestore
12 /Times-Roman sf
37.336 230.14(class  Center  :  public  Monoglyph  {) 10 202.756 ws
37.336 216.7(public:) 7 70.672 as
48.004 203.26(Center\(Glyph*,  DimensionName,  float  align  =  0.5\);) 10 297.412 ws
48.004 189.82(Center\(Glyph*,  float  xalign  =  0.5,  float  yalign  =  0.5\);) 16 304.852 ws
37.336 176.38(};) 2 46.432 as
37.336 149.5(class  FixedSpan  :  public  MonoGlyph  {) 10 224.764 ws
37.336 136.06(public:) 7 70.672 as
48.004 122.62(FixedSpan\(Glyph*,  DimensionName,  Coord  span\);) 6 294.988 ws
37.336 109.18(};  ) 2 49.432 ws
12 /Times-Roman sf
91.354 89.7399(Figure  2.18:) 2 150.022 ws
160.69 89.7399(Center  and  FixedSpan  class  interfaces) 8 343.318 ws
newpath
16 79.56 moveto
16 80.56 lineto
412 80.56 lineto
412 79.56 lineto
closepath
gsave eofill grestore
showpage
%%Page: 17 17
92 37.08 translate
0 0 0 setrgbcolor
14 /Times-Bold sf
16 670.4(2.5.3) 5 44 as
51 670.4(Compositions) 12 132.676 as
12 /Times-Roman sf
16 649.96(A  composition  is  a  glyph  that  uses  a  ) 16 208.688 ws
12 /Times-Bold sf
208.688 649.96(compositor) 10 266.012 as
12 /Times-Roman sf
266.012 649.96(  to  determine  suitable  breaks) 8 412 ws
16 636.22(between  groups  of  its  components.   Figure  2.19  shows  the  class  interfaces  for  the) 25 412 ws
16 622.48(composition  and  its  subclasses.   The  list  of  components  is  broken  into  sublists) 23 412 ws
16 608.74(that  are  put  into  separate  composite  glyphs  and  then  inserted  into  the  body.) 24 412 ws
16 595(The  LRComposition  subclass  builds  an  LRBox  for  each  sublist,  while  the) 20 412 ws
16 581.26(TBComposition  subclass  builds  a  TBBox.) 8 218.356 ws
26.668 566.62(Compositions  can  be  used  to  break  paragraphs  into  lines,  lines  into  columns,) 22 412 ws
16 552.88(or  columns  into  pages.   A  document  editor  might  create  an  lr-composition  for) 23 412 ws
16 539.14(characters  that  puts  the  resulting  lr-boxes  for  lines  into  a  tb-composition,  which  in) 24 412 ws
16 525.4(turn  puts  the  tb-boxes  for  columns  into  an  lr-composition,  which  puts  the  resulting) 24 412 ws
16 511.66(lr-boxes  for  pages  into  a  deck.) 10 161.296 ws
26.668 497.02(Compositions  also  can  be  used  just  as  easily  for  arranging  buttons  in  a  box,) 26 412 ws
16 483.28(where  one  wants  the  buttons  to  ``wrap-around''  if  there  are  too  many  to  fit) 26 412 ws
16 469.54(horizontally.   The  code  to  do  this  could  look  as  follows:) 19 282.82 ws
10 /Helvetica sf
40.99 444.34(LRComposition*  c  =  new  LRComposition\() 8 225.21 ws
49.32 432.82(new  TBBox,  new  SimpleCompositor,  /*  no  separator  */  nil,  /*  width  */  4*72.0) 24 381.68 ws
40.99 421.3(\);) 2 47.1 as
40.99 409.78(Discretionary*  ok  =  new  Discretionary\(0,  nil,  nil,  nil,  nil\);) 16 284.66 ws
40.99 398.26(for  \(unsigned  int  i  =  0;  i  <  nbuttons;  i++\)  {) 20 221.1 ws
49.32 386.74(c->append\(button[i]\);) 21 141.87 as
49.32 375.22(c->append\(ok\);) 14 116.85 as
40.99 363.7(}) 1 44.33 as
40.99 352.18(c->repair\(\);) 12 90.16 as
16 339.7(  ) 2 18.78 ws
12 /Times-Roman sf
26.668 325.06(The  composition  constructor  takes  a  body  in  which  to  insert  sublists,  a) 22 412 ws
16 311.32(compositor  to  determine  where  to  break,  a  separator  to  be  inserted  at  each  break) 26 412 ws
16 297.58(\(unless  it  is  nil\),  the  dimension  to  use,  the  width  in  which  the  sublists  must  fit,) 30 412 ws
16 283.84(and  optionally  the  initial  size  of  the  list  of  components.   The  initial  size  is  not) 29 412 ws
16 270.1(a  maximum,  but  the  list  by  default  starts  at  a  small  size  and  is  dynamically) 28 412 ws
16 256.36(reallocated  as  needed.   For  large  lists,  it  can  be  more  efficient  to  specify  an) 27 412 ws
16 242.62(estimate  of  the  list  size.   Composition::repair  updates  the  composition  to  reflect) 21 412 ws
16 228.88(changes  to  its  structure.   Composition::item  returns  the  index  of  the  sublist  \(in) 23 412 ws
16 215.14(other  words,  the  component  of  the  body\)  containing  the  component  specified  by) 22 412 ws
16 201.4(the  given  index.   For  example,  this  function  could  be  used  to  return  the  line  that) 29 412 ws
16 187.66(contains  a  particular  character.   Composition::beginning_of  returns  the  index  of) 17 412 ws
16 173.92(the  component  that  starts  the  sublist  specified  by  the  given  item.   For  example,) 25 412 ws
16 160.18(this  function  could  be  used  to  return  the  character  that  starts  a  particular  line.) 26 412 ws
16 146.44(Composition::end_of  is  like  beginning_of  except  it  returns  the  end  of  the  sublist.) 22 412 ws
16 132.7(Composition::margin  causes  space  to  be  left  at  the  beginning  and  end  of  the) 24 412 ws
16 118.96(specified  item  in  the  body.   For  example,  this  function  could  be  used  to  put) 27 412 ws
16 105.22(margins  on  a  line  of  text.  Composition::view  guarantees  that  breaks  are  computed) 22 412 ws
16 91.4801(for  the  components  between  indices  ) 10 206.643 ws
12 /Times-Italic sf
206.643 91.4801(first) 5 225.987 as
12 /Times-Roman sf
225.987 91.4801(  and  ) 4 255.32 ws
12 /Times-Italic sf
255.32 91.4801(last) 4 272.66 as
12 /Times-Roman sf
272.66 91.4801(  inclusively.   By  restricting) 7 412 ws
16 77.7401(the  viewing  area,  this  operation  can  eliminate  the  computation  of  breaks  for) 22 412 ws
16 64.0001(components  that  are  not  visible.) 8 168.988 ws
388.24 36.96(2-17) 4 410.236 as
showpage
%%Page: 18 18
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 218.52(A  compositor  computes  the  breaks  based  on  assessing  the  penalty  for  a  possible) 24 412 ws
16 204.78(breaks.   Three  subclasses  are  provided  that  use  different  levels  of  sophistication  in) 23 412 ws
16 191.04(determining  breaks.   An  ) 7 140.852 ws
12 /Times-Bold sf
140.852 191.04(array-compositor) 16 230.828 as
12 /Times-Roman sf
230.828 191.04(  positions  breaks  every  N  elements,) 10 412 ws
16 177.3(where  N  is  specified  in  the  constructor.   A  ) 17 240.084 ws
12 /Times-Bold sf
240.084 177.3(simple-compositor) 17 334.74 as
12 /Times-Roman sf
334.74 177.3(  finds  a  simple) 6 412 ws
16 163.56(set  of  breaks  quickly.   It   is  analogous  to  a  line-at-a-time  text  formatter.   A) 27 412 ws
12 /Times-Bold sf
16 149.82(TeX-compositor) 14 99.316 as
12 /Times-Roman sf
99.316 149.82(  finds  breaks  using  Knuth's  TeX  algorithm.) 12 308.296 ws
26.668 135.18(Figure  2.20  shows  the  interfaces  to  the  compositor  classes.) 16 412 ws
16 121.44(Compositor::compose  uses  the  natural,  stretch,  shrink,  penalty,  and  span) 16 412 ws
16 107.7(information  for  each  component  as  input  parameters.   The  return  value  is  the) 23 412 ws
16 93.9598(number  of  breaks  found.   The  ) 11 168.444 ws
10 /Helvetica sf
168.444 93.9598(breaks) 6 198.454 as
12 /Times-Roman sf
198.454 93.9598(  array  contains  the  positions  of  the  breaks;) 14 412 ws
16 80.2198(that  is,  ) 4 51.004 ws
10 /Helvetica sf
51.004 80.2198(break[i]) 8 83.794 as
12 /Times-Roman sf
83.794 80.2198(  is  the  index  of  the  component  where  the  ) 18 282.094 ws
12 /Times-Italic sf
282.094 80.2198(i) 1 285.43 as
12 /Times-Roman sf
285.43 80.2198(th  break  occurs.) 4 361.738 ws
388.24 36.96(2-18) 4 410.236 as
newpath
15.9999 662.38 moveto
15.9999 663.38 lineto
412 663.38 lineto
412 662.38 lineto
closepath
gsave eofill grestore
37.3359 645.82(class  Composition  :  public  MonoGlyph  {) 10 235.444 ws
37.3359 632.38(public:) 7 70.6719 as
48.0039 618.94(virtual  void  repair\(\);) 4 145.984 ws
48.0039 605.5(virtual  GlyphIndex  item\(GlyphIndex\);) 4 232.648 ws
48.0039 592.06(virtual  GlyphIndex  beginning_of\(GlyphIndex\);) 4 275.308 ws
48.0039 578.62(virtual  GlyphIndex  end_of\(GlyphIndex\);) 4 244.636 ws
48.0039 565.18(virtual  void  margin\(GlyphIndex,  Coord  begin,  Coord  end\);) 12 331.312 ws
48.0039 551.74(virtual  void  view\(GlyphIndex  first,  GlyphIndex  last\);) 10 303.976 ws
37.3359 538.3(protected:) 10 85.3239 as
48.0039 524.86(Composition\() 12 114.016 as
58.6719 511.42(Glyph*,  Compositor*,  Glyph*  separator,  DimensionName,) 8 342.652 ws
58.6719 497.98(Coord  width,  GlyphIndex  size) 6 203.992 ws
48.0039 484.54(\);) 2 55.3359 as
37.3359 471.1(};) 2 46.4319 as
37.3359 444.22(class  LRComposition  :  public  Composition  {) 10 254.128 ws
37.3359 430.78(public:) 7 70.6719 as
48.0039 417.34(LRComposition\() 14 129.352 as
58.6719 403.9(Glyph*,  Compositor*,  Glyph*  sep,  Coord,  GlyphIndex  =  10) 14 348.436 ws
48.0039 390.46(\);) 2 55.3359 as
37.3359 377.02(};) 2 46.4319 as
37.3359 350.14(class  TBComposition  :  public  Composition  {) 10 254.128 ws
37.3359 336.7(public:) 7 70.6719 as
48.0039 323.26(TBComposition\() 14 129.352 as
58.6719 309.82(Glyph*,  Compositor*,  Glyph*  sep,  Coord,  GlyphIndex  =  10) 14 348.436 ws
48.0039 296.38(\);) 2 55.3359 as
37.3359 282.94(};  ) 2 49.4319 ws
12 /Times-Roman sf
133.498 263.5(Figure  2.19:) 2 192.166 ws
202.834 263.5(Composition  classes) 2 301.174 ws
12 /Times-Roman sf
394.336 244.06(  ) 2 397.336 ws
newpath
15.9999 239.88 moveto
15.9999 240.88 lineto
412 240.88 lineto
412 239.88 lineto
closepath
gsave eofill grestore
showpage
%%Page: 19 19
92 37.08 translate
0 0 0 setrgbcolor
14 /Times-Bold sf
16 254.04(2.5.4) 5 44 as
51 254.04(Patches) 7 96.878 as
12 /Times-Roman sf
16 233.6(A  patch  stores  its  canvas  and  allocation  for  subsequent  use  to  update  its  body.   A) 29 412 ws
16 219.86(patch  is  useful  for  objects  that  need  to  be  redrawn  independently,  such  as  those) 26 412 ws
16 206.12(that  depend  on  some  external  data.   Typically,  a  patch  appears  in  the  middle  of  a) 29 412 ws
16 192.38(glyph  instance  graph,  where  a  change  would  be  too  expensive  to  redraw  the  entire) 26 412 ws
16 178.64(graph.) 6 46.324 as
26.668 164(Figure  2.21  shows  the  Patch  class  interface.   Patch::canvas  and  Patch::allocation) 19 412 ws
16 150.26(return  the  canvas  and  allocation  most  recently  passed  to  Patch::draw.) 18 412 ws
16 136.52(Patch::reallocate  calls  allocate  on  the  body  using  the  current  allocation,  usually) 20 412 ws
16 122.78(because  the  body  has  changed  in  some  way  and  will  allocate  its  itself  differently.) 26 412 ws
16 109.04(Patch::redraw  calls  draw  on  the  body  using  the  current  allocation.   Patch::repick) 21 412 ws
16 95.2997(returns  the  result  of  calling  pick  on  the  body  with  the  current  canvas  and  allocation.) 28 412 ws
388.24 36.96(2-19) 4 410.236 as
newpath
16.96 631.66 moveto
16.96 632.66 lineto
412.96 632.66 lineto
412.96 631.66 lineto
closepath
gsave eofill grestore
38.296 615.1(class  Compositor  {) 4 130.06 ws
38.296 601.66(public:) 7 71.632 as
48.964 588.22(virtual  int  compose\() 4 145.624 ws
59.632 574.78(Coord*  natural,  Coord*  stretch,  Coord*  shrink,) 10 286.948 ws
59.632 561.34(int*  penalties,  int  component_count,) 6 234.628 ws
59.632 547.9(Coord*  spans,  int  span_count,) 6 204.628 ws
59.632 534.46(int*  breaks,  int  break_count) 6 193.612 ws
48.964 521.02(\);) 2 56.296 as
38.296 507.58(};) 2 47.392 as
38.296 480.7(class  ArrayCompositor  :  public  Compositor  {) 10 257.056 ws
38.296 467.26(public:) 7 71.632 as
48.964 453.82(ArrayCompositor\(int  N\);) 2 169.288 ws
38.296 440.38(};) 2 47.392 as
38.296 413.5(class  SimpleCompositor  :  public  Compositor  {) 10 263.08 ws
38.296 400.06(public:) 7 71.632 as
48.964 386.62(SimpleCompositor\(\);) 19 150.976 as
38.296 373.18(};) 2 47.392 as
38.296 346.3(class  TeXCompositor  :  public  Compositor  {) 10 250.396 ws
38.296 332.86(public:) 7 71.632 as
59.632 319.42(TeXCompositor\(int  penalty\);) 2 199.96 ws
38.296 305.98(};  ) 2 50.392 ws
12 /Times-Roman sf
137.128 286.54(Figure  2.20:) 2 195.796 ws
206.464 286.54(Compositor  classes) 2 299.464 ws
newpath
16.96 276.36 moveto
16.96 277.36 lineto
412.96 277.36 lineto
412.96 276.36 lineto
closepath
gsave eofill grestore
showpage
%%Page: 20 20
92 37.08 translate
0 0 0 setrgbcolor
18 /Times-Bold sf
16 483.48(2.6) 3 38.5 as
46 483.48(Example) 7 114.004 as
12 /Times-Roman sf
16 451.08(Below  is  a  simple  application  that  displays  a  raster  in  a  window.   The  application) 27 412 ws
16 437.34(defines  a  monoglyph  subclass,  called  ScaleToFit,  that  scales  the  image  to  make  it) 24 412 ws
16 423.6(fit  in  the  window.   Thus,  if  the  user  resizes  the  window  then  the  image  will) 29 412 ws
16 409.86(automatically  be  rescaled  to  fill  the  entire  window.   The  application  assumes  the) 23 412 ws
16 396.12(file  is  in  an  image  format  called  TIFF,  for  which  InterViews  provides  a   function) 27 412 ws
16 382.38(to  load  into  a  raster.) 8 111.652 ws
26.668 367.74(The  ScaleToFit  constructor  simply  passes  the  body  to  the  monoglyph) 18 412 ws
16 354(constructor.   ScaleToFit  reimplements  three  glyph  operations:   request,  allocate,) 16 412 ws
16 340.26(and  draw.   A  more  general  ScaleToFit  should  also  reimplement  pick,  but  in  this) 25 412 ws
16 326.52(application  we  are  simply  displaying  the  image  and  do  not  handle  input.) 22 361.972 ws
26.668 311.88(ScaleToFit::request  creates  an  allocation  for  the  body  that  matches  its) 18 412 ws
16 298.14(requisition.   ScaleToFit::allocate  computes  a  transformation  matrix  for  scaling) 15 412 ws
16 284.4(between  its  allocation  and  the  requisition  of  its  body  \(as  represented) 20 412 ws
16 270.66(by  the  allocation  that  ScaleToFit::request  computed\).   ScaleToFit::allocate) 13 412 ws
16 256.92(then  transforms  the  canvas  appropriately  and  calls  allocate  on  its  body.) 20 412 ws
16 243.18(ScaleToFit::draw  simply  transforms  the  canvas  and  calls  draw  on  the  body.) 20 377.62 ws
388.24 36.96(2-20) 4 410.236 as
newpath
16 662.38 moveto
16 663.38 lineto
412 663.38 lineto
412 662.38 lineto
closepath
gsave eofill grestore
37.336 645.82(class  Patch  :  public  MonoGlyph  {) 10 200.092 ws
37.336 632.38(public:) 7 70.672 as
48.004 618.94(Patch\(Glyph*\);) 14 121.996 as
48.004 605.5(virtual  Canvas*  canvas\(\);  const) 6 198.976 ws
48.004 592.06(virtual  const  Allocation&  allocation\(\);  const) 8 260.656 ws
48.004 578.62(virtual  void  reallocate\(\);) 4 164.644 ws
48.004 565.18(virtual  void  redraw\(\);  const) 6 179.644 ws
48.004 551.74(virtual  boolean  repick\(int  depth,  Hit&\);) 8 237.652 ws
37.336 538.3(};  ) 2 49.432 ws
12 /Times-Roman sf
133.684 518.86(Figure  2.21:) 2 192.352 ws
203.02 518.86(Patch  class  interface) 4 300.988 ws
newpath
16 508.68 moveto
16 509.68 lineto
412 509.68 lineto
412 508.68 lineto
closepath
gsave eofill grestore
showpage
%%Page: 21 21
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 645.92(#include  <InterViews/display.h>) 2 184.852 ws
26.668 632.48(#include  <InterViews/image.h>) 2 179.512 ws
26.668 619.04(#include  <InterViews/monoglyph.h>) 2 204.856 ws
26.668 605.6(#include  <InterViews/raster.h>) 2 176.836 ws
26.668 592.16(#include  <InterViews/tiff.h>) 2 164.848 ws
26.668 578.72(#include  <InterViews/session.h>) 2 184.852 ws
26.668 565.28(#include  <InterViews/style.h>) 2 172.852 ws
26.668 551.84(#include  <InterViews/transformer.h>) 2 206.164 ws
26.668 538.4(#include  <InterViews/window.h>) 2 188.848 ws
26.668 524.96(#include  <stdio.h>) 2 116.872 ws
26.668 511.52(#include  <stdlib.h>) 2 120.208 ws
26.668 492.08(class  ScaleToFit  :  public  MonoGlyph  {) 10 215.428 ws
26.668 478.64(public:) 7 60.004 as
37.336 465.2(ScaleToFit\(Glyph*\);) 19 137.332 as
37.336 451.76(virtual  void  request\(Requisition&\)  const;) 6 235 ws
37.336 438.32(virtual  void  allocate\(Canvas*,  const  Allocation&,  Extension&\);) 10 343.648 ws
37.336 424.88(virtual  void  draw\(Canvas*,  const  Allocation&\)  const;) 10 295.312 ws
26.668 411.44(private:) 8 63.328 as
37.336 398(Allocation  allocation_;) 2 147.664 ws
37.336 384.56(Transformer  matrix_;) 2 140.98 ws
26.668 371.12(};) 2 35.764 as
26.668 351.68(ScaleToFit::ScaleToFit\(Glyph*  g\)  :  MonoGlyph\(g\)  {  }) 10 291.184 ws
26.668 332.24(void  ScaleToFit::request\(Requisition&  r\)  const  {) 8 261.76 ws
37.336 318.8(MonoGlyph::request\(r\);) 22 152.656 as
37.336 305.36(ScaleToFit*  s  =  \(ScaleToFit*\)this;  ) 8 206.776 ws
37.336 291.92(Requirement&  rx  =  r.requirement\(Dimension_X\);) 6 278.068 ws
37.336 278.48(rx.stretch\(fil\);) 16 104.32 as
37.336 265.04(rx.shrink\(fil\);) 15 102.328 as
37.336 251.6(Coord  xsize  =  rx.natural\(\);) 6 165.412 ws
37.336 238.16(float  xalign  =  rx.alignment\(\);) 6 177.424 ws
37.336 224.72(Allotment  ax\(xalign  *  xsize,  xsize,  xalign\);) 10 244.984 ws
37.336 211.28(s->allocation_.allot\(Dimension_X,  ax\);) 2 226.42 ws
37.336 191.84(Requirement&  ry  =  r.requirement\(Dimension_Y\);) 6 278.068 ws
37.336 178.4(ry.stretch\(fil\);) 16 104.32 as
37.336 164.96(ry.shrink\(fil\);) 15 102.328 as
37.336 151.52(Coord  ysize  =  ry.natural\(\);) 6 165.412 ws
37.336 138.08(float  yalign  =  ry.alignment\(\);) 6 177.424 ws
37.336 124.64(Allotment  ay\(yalign  *  ysize,  ysize,  yalign\);) 10 244.984 ws
37.336 111.2(s->allocation_.allot\(Dimension_Y,  ay\);) 2 226.42 ws
26.668 97.7599(}) 1 32.428 as
388.24 36.96(2-21) 4 410.236 as
showpage
%%Page: 22 22
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 651.92(void  ScaleToFit::allocate\(Canvas*  c,  const  Allocation&  a,  Extension&  ext\)  {) 16 397.732 ws
37.336 638.48(matrix_  =  Transformer\(\);) 4 158.74 ws
37.336 625.04(matrix_.scale\() 14 105.652 as
48.004 611.6(a.allotment\(Dimension_X\).span\(\)  /) 2 216.316 ws
58.672 598.16(allocation_.allotment\(Dimension_X\).span\(\),) 42 271.648 as
48.004 584.72(a.allotment\(Dimension_Y\).span\(\)  /) 2 216.316 ws
58.672 571.28(allocation_.allotment\(Dimension_Y\).span\(\)) 41 268.648 as
37.336 557.84(\);) 2 44.668 as
37.336 544.4(c->push_transform\(\);) 20 140.08 as
37.336 530.96(c->transformation\(matrix_\);) 27 172.744 as
37.336 517.52(MonoGlyph::allocate\(c,  allocation_,  ext\);) 4 236.644 ws
37.336 504.08(c->pop_transform\(\);) 19 135.412 as
26.668 490.64(}) 1 32.428 as
26.668 471.2(void  ScaleToFit::draw\(Canvas*  c,  const  Allocation&\)  const  {) 12 323.404 ws
37.336 457.76(c->push_transform\(\);) 20 140.08 as
37.336 444.32(c->transform\(matrix_\);) 22 148.744 as
37.336 430.88(MonoGlyph::draw\(c,  allocation_\);) 2 202.648 ws
37.336 417.44(c->pop_transform\(\);) 19 135.412 as
26.668 404(}) 1 32.428 as
26.668 384.56(int  main\(int  argc,  char**  argv\)  {) 10 182.392 ws
37.336 371.12(Session*  session  =  new  Session\("Ipaste",  argc,  argv\);) 12 293.86 ws
37.336 357.68(if  \(argc  ==  1\)  {) 8 110.608 ws
48.004 344.24(fprintf\(stderr,  "Usage:  %s  <file>\\n",  argv[0]\);) 8 267.28 ws
48.004 330.8(exit\(1\);) 8 83.332 as
37.336 317.36(}) 1 43.096 as
37.336 297.92(Raster*  rast  =  TIFFRaster::load\(argv[1]\);) 6 236.404 ws
37.336 284.48(if  \(rast  ==  nil\)  {) 8 113.956 ws
48.004 271.04(fprintf\(stderr,  "%s:  open  tiff  image  %s  failed\\n",  argv[0],  argv[1]\);) 16 367.384 ws
48.004 257.6(exit\(1\);) 8 83.332 as
37.336 244.16(}) 1 43.096 as
37.336 224.72(Style*  style  =  session->default_display\(\)->style\(\);) 6 278.62 ws
37.336 211.28(session->run_window\() 20 147.424 as
48.004 197.84(new  ApplicationWindow\(new  ScaleToFit\(new  Image\(rast\)\)\)) 6 338.932 ws
37.336 184.4(\);) 2 44.668 as
26.668 170.96(}) 1 32.428 as
388.24 36.96(2-22) 4 410.236 as
showpage
%%Trailer
end restore
%%Pages: 22
%!PS-Adobe-2.0
%%Creator: ./ch3.doc
%%Pages: atend
%%EndComments
save 20 dict begin

/sf {   % scale /fontName => -  (set current font)
    {findfont} stopped {pop /Courier findfont} if
    exch scalefont setfont
} def

/ws {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 8#40 4 3 roll
    widthshow
} def

/as {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 3 2 roll
    ashow
} def

%%EndProlog
%%Page: 1 1
92 37.08 translate
0 0 0 setrgbcolor
24 /Times-Bold sf
16 662.72(Chapter  3) 2 119.32 ws
16 625.76(Rendering) 9 124 as
12 /Times-Roman sf
16 597.44(This  chapter  describes  the  InterViews  classes  for  drawing  on  the  screen  and  on  a) 26 412 ws
16 583.7(printer.   The  two  primary  classes  are  Canvas,  which  represents  an  area  on  the) 25 412 ws
16 569.96(screen,  and  Printer,  which  sends  output  suitable  for  printing  to  an  output  stream.) 24 412 ws
16 556.22(The  drawing  classes  are  intended  to  be  simple  and  resolution-independent.   The) 21 412 ws
16 542.48(programming  interface  resembles  the  PostScript  drawing  operations.) 12 345.616 ws
26.668 527.84(Printer  is  a  subclass  of  Canvas,  and  as  such  implements  the  same  drawing) 24 412 ws
16 514.1(operations  as  Canvas.   However,  it  is  possible  that  glyphs  may  use  other  rendering) 25 412 ws
16 500.36(operations  than  those  provided  by  Canvas,  such  as  for  3D.   In  this  case,  glyphs) 27 412 ws
16 486.62(should  provide  distinct  draw  and  print  operations.   If  a  glyph  does  not  need) 25 412 ws
16 472.88(operations  other  than  those  provided  by  Canvas  then  the  glyph  can  rely  on  default) 26 412 ws
16 459.14(implementation  of  drawing  on  a  printer,  which  just  calls  the  canvas-directed  draw) 22 412 ws
16 445.4(with  the  printer  as  the  target.  ) 12 156.976 ws
18 /Times-Bold sf
16 404.12(3.1) 3 38.5 as
46 404.12(Graphics  Attributes) 2 200.494 ws
12 /Times-Roman sf
16 371.72(InterViews  provides  classes  that  represent  graphics  attributes  such  as  colors) 18 412 ws
16 357.98(and  fonts.   The  instances  are  all  sharable,  meaning  the  classes  are  derived) 23 412 ws
16 344.24(from  Resource.   The  objects  are  also  display-independent,  meaning  they  will) 19 412 ws
16 330.5(correspond  to  several  underlying  objects  in  applications  that  run  on  multiple) 20 412 ws
16 316.76(displays.   For  example,  a  single  InterViews  color  object  might  have  different  pixel) 23 412 ws
16 303.02(values  on  different  displays.  ) 8 154.312 ws
14 /Times-Bold sf
16 276.62(3.1.1) 5 44 as
51 276.62(Brush) 5 87.568 as
12 /Times-Roman sf
16 256.18(A  brush  defines  the  line  thickness  and  line  style  for  drawing  operations.   The) 25 412 ws
16 242.44(effect  of  these  operations  is  as  if  a  line  segment  equal  in  length  to  the) 28 412 ws
16 228.7(brush's  width  were  dragged  along  an  infinitely  thin  path  between  the  specified) 22 412 ws
16 214.96(coordinates.   At  each  point  along  the  path  the  brush  is  angled  perpendicular  to  the) 27 412 ws
16 201.22(path.   As  a  special  case,  a  brush  width  of  zero  specifies  a  minimal-width  line.) 27 412 ws
16 187.48(Many  devices  can  render  minimal-width  lines  more  quickly  than  wide  lines,  but) 22 412 ws
16 173.74(the  resulting  display  may  vary  slightly  across  devices.   A  solid  brush  style  paints) 25 412 ws
16 160(all  pixels  along  the  path  with  a  single  color.   A  dashed  brush  defines  alternating) 27 412 ws
16 146.26(foreground  and  background  segments,  measured  along  the  length  of  the  path.) 20 412 ws
16 132.52(Foreground  segments  are  painted,  while  background  segments  are  not.) 16 354.604 ws
26.668 117.88(Figure  3.1  shows  the  Brush  class  interface.   The  first  constructor  creates  a  solid) 25 412 ws
16 104.14(brush  of  the  given  width.   The  second  constructor  creates  a  brush  with  the  given) 27 412 ws
16 90.4(width  and  line  style.   The  pattern  is  an  array  of  integers  that  specifies  the  length  of) 31 412 ws
16 76.66(successive  foreground  and  background  segments.   Even-numbered  array  indices) 15 412 ws
16 62.92(\(starting  from  0\)  specify  the  length  of  foreground  segments;  odd-numbered) 18 412 ws
388.72 38.96(3-) 2 398.716 as
401.716 38.96(1) 1 407.716 as
showpage
%%Page: 2 2
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 539.16(indices  specify  background  segments.   The  ) 11 231.65 ws
10 /Helvetica sf
231.65 539.16(count) 5 256.11 as
12 /Times-Roman sf
256.11 539.16(  is  the  number  of  entries  in  the) 14 412 ws
16 525.42(array.   The  count  can  be  zero,  which  specifies  a  solid  brush.   The  last  constructor) 28 412 ws
16 511.68(defines  a  brush  with  a  given  width  and  a  style  specified  by  a  bit  vector.   The) 31 412 ws
16 497.94(least  significant  16  bits  of  ) 10 151.537 ws
10 /Helvetica sf
151.537 497.94(pattern) 7 182.667 as
12 /Times-Roman sf
182.667 497.94(  are  interpreted  as  a  bit  pattern,  with  one  bits) 18 412 ws
16 484.2(specifying  foreground  segments  and  zero  bits  specifying  background  segments.  ) 18 400.6 ws
14 /Times-Bold sf
16 457.8(3.1.2) 5 44 as
51 457.8(Color) 5 85.216 as
12 /Times-Roman sf
16 437.36(A  color  object  defines  an  output  color,  which  is  specified  by  a  mix  of  RGB  \(red,) 30 412 ws
16 423.62(green,  and  blue\)  intensities,  and  an  alpha  value  for  blending.   Figure  3.2  shows  the) 27 412 ws
16 409.88(Color  class  interface.   RGB  and  alpha  values  are  represented  as  floating  point) 23 412 ws
16 396.14(numbers  between  0  and  1,  where  1  is  full  intensity  \(or  visibility  in  the  case  of) 30 412 ws
16 382.4(alpha\).   A  color  object  is  created  with  the  RGB  intensities,  an  alpha  value  \(default) 27 412 ws
16 368.66(is  1.0\),  and  a  drawing  operation.   A  color  drawing  operation  need  be  specified) 25 412 ws
16 354.92(only  on  rare  occasions.   The  default  operation,  Copy) 15 270.988 ws
12 /Helvetica sf
270.988 354.92(,) 1 274.324 as
12 /Times-Roman sf
274.324 354.92(  blends  the  color  in  directly.) 10 412 ws
16 341.18(The  Xor  operation  uses  a  pixel  value  computed  by  taking  the  exclusive-or  of  the) 26 412 ws
16 327.44(color  and  the  existing  pixel  value.   Xor  is  only  useful  on  a  monochrome  system.) 27 398.464 ws
26.668 312.8(Color::lookup  returns  the  color  with  the  given  name  as  defined  on  the  given) 24 412 ws
16 299.06(display  or  nil  if  the  name  is  not  defined.   Color::distinguished  determines  if  two) 25 412 ws
16 285.32(colors  are  distinct  on  a  particular  display.   A  common  use  of  Color::distinguished) 23 412 ws
16 271.58(is  to  check  if  a  highlighting  color  is  distinct  from  foreground  and  background) 24 412 ws
16 257.84(colors.   Color::intensities  returns  the  RGB  values  for  a  given  color  on  a  given) 25 412 ws
16 244.1(display.   Color::brightness  creates  a  new  color   that  is  brighter  or  darker  than) 24 412 ws
16 230.36(the  given  color  by  a  certain  adjustment.   If  the  adjust  parameter  is  positive,  it) 27 412 ws
16 216.62(indicates  the  new  intensity  should  be  the  given  fraction  of  the  distance  between) 24 412 ws
16 202.88(the  current  intensity  and  full  intensity.   If  the  parameter  is  negative,  its  absolute) 25 412 ws
16 189.14(value  specifies  a  distance  tozero  intensity.) 10 217.96 ws
26.668 174.5(InterViews  automatically  translates  an  RGB  specification  to  the  appropriate) 16 412 ws
16 160.76(pixel  value  for  a  display.   This  approach  hides  the  system-dependent  details  of) 23 412 ws
16 147.02(color  management  from  applications,  making  them  more  portable  and  giving) 18 412 ws
16 133.28(greater  flexibility  to  graphics  system  implementors.   Under  the  X  Window  System,) 21 412 ws
16 119.54(color-intensive  applications  might  not  find  the  default  color  implementation) 16 412 ws
16 105.8(acceptable.   To  assist  such  applications,  InterViews  provides  a  way  to  specify  an) 23 412 ws
16 92.0601(X  visual,  either  on  the  command-line  with  the  ``-visual''  flag,  or  with  a  ``visual'') 26 412 ws
16 78.32(X  resource  defined  to  the  desired  visual  type.   For  example,  on  displays  that) 25 412 ws
16 64.58(support  TrueColor  \(which  means  pixel  values  can  be  computed  directly  from) 20 412 ws
newpath
16 673.9 moveto
16 674.9 lineto
412 674.9 lineto
412 673.9 lineto
closepath
gsave eofill grestore
37.336 657.34(class  Brush  :  virtual  public  Resource  {) 12 222.412 ws
37.336 643.9(public:) 7 70.672 as
48.004 630.46(Brush\(Coord  width\);) 2 148.336 ws
48.004 617.02(Brush\(int*  pattern,  int  count,  Coord  width\);) 10 257.668 ws
48.004 603.58(Brush\(int  pattern,  Coord  width\);) 6 203.332 ws
37.336 590.14(};  ) 2 49.432 ws
12 /Times-Roman sf
135.682 570.7(Figure  3.1:) 2 188.35 ws
199.018 570.7(Brush  class  interface) 4 298.99 ws
newpath
16 560.52 moveto
16 561.52 lineto
412 561.52 lineto
412 560.52 lineto
closepath
gsave eofill grestore
12 /Times-Roman sf
389.04 39.12(3-) 2 399.036 as
402.036 39.12(2) 1 408.036 as
showpage
%%Page: 3 3
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 362.52(RGB  values\)  but  for  which  the  default  visual  is  not  TrueColor,  a  user  could  run  an) 30 412 ws
16 348.78(application  with  ``-visual  TrueColor''  or  define  ``*app*visual:TrueColor''  in  the) 16 412 ws
16 335.04(application  defaults  file.  ) 6 135.316 ws
14 /Times-Bold sf
16 308.64(3.1.3) 5 44 as
51 308.64(Font) 4 79 as
12 /Times-Roman sf
16 288.2(A  font  defines  a  mapping  between  character  codes  and  their  appearance  on  the) 24 412 ws
16 274.46(screen.   PSFont  is  a  subclass  of  Font  that  uses  PostScript  metrics  for  character) 25 412 ws
16 260.72(widths,  if  the  metrics  are  available  on  the  system.   Figure  3.3  shows  the  Font  and) 29 412 ws
16 246.98(PSFont  class  interfaces.   The  Font  constructor  is  given  the  full  name  of  the  font) 27 412 ws
16 233.24(and  a  scaling  factor.   If  the  font  is  used  on  a  display  that  does  not  recognize  the) 33 412 ws
16 219.5(name,  then  a  default  font  will  be  used.   Font::find  can  be  used  to  compute  a  valid) 31 412 ws
16 205.76(fullname  for  a  font  from  a  given  font  family  name,  desired  point  size,  and  font) 28 412 ws
16 192.02(style  \(such  as  italic  or  bold\).   If  a  font  is  available  that  matches  all  but  the  point) 33 412 ws
16 178.28(size,  Font::find  will  return  the  font  with  ) 14 214.938 ws
10 /Helvetica sf
214.938 178.28(scale) 5 238.278 as
12 /Times-Roman sf
238.278 178.28(  set  to  the  ratio  of  the  desired  point) 16 412 ws
16 164.54(size  to  the  actual  point  size.) 10 148.648 ws
26.668 149.9(Font::name  returns  the  full  name  of  the  font.   Font::encoding  returns  the) 21 412 ws
16 136.16(character  set  identification,  such  as  ``iso8859''  for  ISO  Latin.   Font::size  returns) 21 412 ws
16 122.42(the  point  size  of  the  font.) 10 135.988 ws
26.668 107.78(Font::ascent  returns  the  extent  above  the  font's  baseline;  Font::descent  returns) 18 412 ws
16 94.0399(the  extent  below  the  font's  baseline.   Both  functions  can  be  called  with  a  character) 27 412 ws
16 80.2999(code,  in  which  case  the  extent  is  for  the  specified  character  in  the  font;  with  no) 30 412 ws
16 66.5599(parameters,  in  which  case  the  extent  is  for  the  largest  character  in  the  font;  or  with) 30 412 ws
389.04 39.12(3-) 2 399.036 as
402.036 39.12(3) 1 408.036 as
newpath
16 671.98 moveto
16 672.98 lineto
412 672.98 lineto
412 671.98 lineto
closepath
gsave eofill grestore
37.336 655.42(typedef  float  ColorIntensity;) 4 173.992 ws
37.336 641.98(typedef  unsigned  int  ColorOp;) 6 183.664 ws
37.336 615.1(class  Color  :  virtual  public  Resource  {) 12 221.08 ws
37.336 601.66(public:) 7 70.672 as
48.004 588.22(enum  {  Copy,  Xor  };) 8 149.188 ws
48.004 574.78(Color\() 6 79.336 as
58.672 561.34(ColorIntensity  r,  ColorIntensity  g,  ColorIntensity  b,) 10 306.676 ws
58.672 547.9(float  alpha  =  1.0,  ColorOp  =  Copy) 12 224.2 ws
48.004 534.46(\);) 2 55.336 as
48.004 521.02(Color\(const  Color&,  float  alpha  =  1.0,  ColorOp  =  Copy\);) 16 323.2 ws
48.004 507.58(static  const  Color*  lookup\(Display*,  const  String&  name\);) 12 331 ws
48.004 494.14(static  const  Color*  lookup\(Display*,  const  char*\);) 10 289.984 ws
48.004 480.7(virtual  boolean  distinguished\(Display*,  Color*\);) 6 281.332 ws
48.004 467.26(virtual  void  intensities\() 4 159.34 ws
58.672 453.82(Display*,  ColorIntensity&  r,  ColorIntensity&  g,  ColorIntensity&  b) 12 381.016 ws
48.004 440.38(\)  const;) 2 83.668 ws
48.004 426.94(virtual  const  Color*  brightness\(float  adjust\)  const;) 10 289.66 ws
37.336 413.5(};  ) 2 49.432 ws
12 /Times-Roman sf
136.348 394.06(Figure  3.2:) 2 189.016 ws
199.684 394.06(Color  class  interface) 4 298.324 ws
newpath
16 383.88 moveto
16 384.88 lineto
412 384.88 lineto
412 383.88 lineto
closepath
gsave eofill grestore
showpage
%%Page: 4 4
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 132.84(a  string  of  a  given  length,  in  which  case  the  extent  is  the  maximum  of  the  extents) 32 412 ws
16 119.1(for  the  characters  in  the  string.) 10 162.628 ws
26.668 104.46(Font::left_bearing  returns  the  left  edge  of  the  bitmap  associated  with  a) 20 412 ws
16 90.7198(character;  Font::right_bearing  returns  the  right  edge.   Both  functions  can  be  called) 21 412 ws
16 76.9798(on  a  specific  character  or  a  string  of  a  given  length.   Font::width  on  a  single) 29 412 ws
16 63.2398(character  returns  the  width  of  a  character's  bitmap  and  on  a  string  it  returns  the) 28 412 ws
389.04 39.12(3-) 2 399.036 as
402.036 39.12(4) 1 408.036 as
newpath
16.96 676.78 moveto
16.96 677.78 lineto
412.96 677.78 lineto
412.96 676.78 lineto
closepath
gsave eofill grestore
38.296 660.22(class  Font  :  virtual  public  Resource  {) 12 216.712 ws
38.296 646.78(public:) 7 71.632 as
48.964 633.34(Font\(const  String&,  float  scale  =  1.0\);) 10 232.06 ws
48.964 619.9(Font\(const  char*  fullname,  float  scale  =  1.0\);) 12 265.696 ws
48.964 606.46(static  boolean  find\() 4 141.616 ws
59.632 593.02(const  char*  family,  int  size,  const  char*  style,) 14 278.932 ws
59.632 579.58(const  char*&  fullname,  float&  scale) 8 233.932 ws
48.964 566.14(\);) 2 56.296 as
48.964 552.7(static  const  Font*  lookup\(const  char*\);) 8 236.284 ws
48.964 539.26(static  const  Font*  lookup\(const  String&\);) 8 248.308 ws
48.964 519.82(virtual  const  char*  name\(\)  const;) 8 206.932 ws
48.964 506.38(virtual  const  char*  encoding\(\)  const;) 8 224.932 ws
48.964 492.94(virtual  Coord  size\(\);) 4 146.284 ws
48.964 466.06(typedef  int  CharCode;) 4 155.62 ws
48.964 452.62(virtual  Coord  left_bearing\(CharCode\);) 4 234.268 ws
48.964 439.18(virtual  Coord  left_bearing\(const  char*,  unsigned  int  len\);) 12 323.26 ws
48.964 425.74(virtual  Coord  right_bearing\(CharCode\);) 4 240.94 ws
48.964 412.3(virtual  Coord  right_bearing\(const  char*,  unsigned  int  len\);) 12 329.932 ws
48.964 398.86(virtual  Coord  ascent\(\);) 4 157.612 ws
48.964 385.42(virtual  Coord  ascent\(CharCode\);) 4 206.272 ws
48.964 371.98(virtual  Coord  ascent\(const  char*,  unsigned  int  len\);) 12 295.264 ws
48.964 358.54(virtual  Coord  descent\(\);) 4 163.612 ws
48.964 345.1(virtual  Coord  descent\(CharCode\);) 4 212.272 ws
48.964 331.66(virtual  Coord  descent\(const  char*,  unsigned  int  len\);) 12 301.264 ws
48.964 318.22(virtual  Coord  width\(CharCode\);) 4 203.62 ws
48.964 304.78(virtual  Coord  width\(const  char*,  int\);) 8 228.616 ws
48.964 291.34(virtual  int  index\(const  char*,  int,  float  offset,  boolean  between\);) 16 355.912 ws
38.296 277.9(};) 2 47.392 as
38.296 251.02(class  PSFont  :  public  Font  {) 10 173.08 ws
38.296 237.58(public:) 7 71.632 as
48.964 224.14(PSFont\() 7 88.312 as
59.632 210.7(const  char*  psname,  Coord  size,  const  char*  encoding,  float  scale) 18 374.896 ws
48.964 197.26(\);) 2 56.296 as
38.296 183.82(};  ) 2 50.392 ws
12 /Times-Roman sf
108.298 164.38(Figure  3.3:) 2 160.966 ws
171.634 164.38(Font  and  PSFont  class  interfaces) 8 328.294 ws
newpath
16.96 154.2 moveto
16.96 155.2 lineto
412.96 155.2 lineto
412.96 154.2 lineto
closepath
gsave eofill grestore
showpage
%%Page: 5 5
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(sum  of  the  widths  of  the  individual  characters.   Font::index  returns  the  index  of) 25 412 ws
16 657.62(the  character  in  a  string  that  would  be  ) 16 204.195 ws
10 /Helvetica sf
204.195 657.62(offset) 6 228.655 as
12 /Times-Roman sf
228.655 657.62(  coordinates  from  the  left  if  the  string) 14 412 ws
16 643.88(were  displayed.   If  ) 7 106.881 ws
10 /Helvetica sf
106.881 643.88(between) 7 144.681 as
12 /Times-Roman sf
144.681 643.88(  is  false,  the  index  of  the  character  that  contains  ) 20 376.514 ws
10 /Helvetica sf
376.514 643.88(offset) 6 400.974 as
12 /Times-Roman sf
400.974 643.88(  is) 2 412 ws
16 630.14(returned;  otherwise  the  index  of  the  character  following  the  between-character) 18 412 ws
16 616.4(space  that  is  nearest  ) 8 117.896 ws
10 /Helvetica sf
117.896 616.4(offset) 6 142.356 as
12 /Times-Roman sf
142.356 616.4(  is  returned.   In  either  case  a  negative  offset  will  return) 21 412 ws
16 602.66(an  index  of  zero  and  an  offset  beyond  the  end  of  the  string  will  return  an  index) 32 412 ws
16 588.92(equal  to  the  length  of  the  string.  ) 14 171.988 ws
14 /Times-Bold sf
16 562.52(3.1.4) 5 44 as
51 562.52(Transformer) 11 128.756 as
12 /Times-Roman sf
16 542.08(A  transformer  object  represents  a  3x2  matrix  for  use  in  translating  2D  coordinates.) 24 412 ws
16 528.34(Figure  3.4  shows  the  Transformer  class  interface.   The  transformer  constructor) 19 412 ws
16 514.6(with  no  parameters  creates  an  identity  matrix.   The  other  constructor  takes  the) 23 412 ws
16 500.86(explicit  matrix  values  as  parameters.   Transformer::identity  returns  whether  the) 17 412 ws
16 487.12(matrix  is  currently  the  identity  matrix.) 10 199.324 ws
26.668 472.48(Transformer::premultiply  and  Transformer::postmultiply   set  the  matrix  to  be) 15 412 ws
16 458.74(the  result  of  multiplying  the  matrix  and  the  given  matrix.   Two  operations  are) 25 412 ws
16 445(necessary  because  matrix  multiplication  is  not  commutative  for  2D  coordinates.) 18 412 ws
16 431.26(Premultiply  means  the  current  matrix  is  on  the  left-hand  side  of  the  multiplication,) 24 412 ws
16 417.52(postmultiply  means  the  current  matrix  is  on  the  right.   Transformer::invert  sets  the) 23 412 ws
16 403.78(matrix  to  its  inverse.) 6 114.664 ws
26.668 389.14(Transformer::translate  modifies  the  matrix  to  add  ) 12 270.766 ws
10 /Helvetica sf
270.766 389.14(dx) 2 281.326 as
12 /Times-Roman sf
281.326 389.14(  to  the  x  coordinate  and  ) 12 401.44 ws
10 /Helvetica sf
401.44 389.14(dy) 2 412 as
12 /Times-Roman sf
389.04 39.12(3-) 2 399.036 as
402.036 39.12(5) 1 408.036 as
newpath
16 373.42 moveto
16 374.42 lineto
412 374.42 lineto
412 373.42 lineto
closepath
gsave eofill grestore
37.336 356.86(class  Transformer  {) 4 132.4 ws
37.336 343.42(public:) 7 70.672 as
48.004 329.98(Transformer\(\);) 14 119.308 as
48.004 316.54(Transformer\() 12 111.976 as
58.672 303.1(float  a00,  float  a01,  float  a10,  float  a11,  float  a20,  float  a21) 22 342.616 ws
48.004 289.66(\);) 2 55.336 as
48.004 276.22(boolean  identity\(\)  const;) 4 165.328 ws
48.004 262.78(void  premultiply\(const  Transformer&\);) 4 237.316 ws
48.004 249.34(void  postmultiply\(const  Transformer&\);) 4 241.996 ws
48.004 235.9(void  invert\(\);) 2 111.664 ws
48.004 222.46(void  translate\(float  dx,  float  dy\);) 8 204.316 ws
48.004 209.02(void  scale\(float  sx,  float  sy\);) 8 184.984 ws
48.004 195.58(void  rotate\(float  angle\);) 4 161.98 ws
48.004 182.14(void  skew\(float  sx,  float  sy\);) 8 185.656 ws
48.004 168.7(void  transform\(floatx,  floaty\);) 4 192.316 ws
48.004 155.26(void  transform\(float  x,  float  y,  floattx,  floatty\);) 12 272.98 ws
48.004 141.82(void  inverse_transform\(floatx,  floaty\);) 4 232.972 ws
48.004 128.38(void  inverse_transform\(float  tx,  float  ty,  floatx,  floaty\);) 12 313.636 ws
48.004 114.94(void  matrix\(floata00,  floata01,  floata10,  floata11,  floata20,  floata21\);) 12 380.944 ws
37.336 101.5(};  ) 2 49.432 ws
12 /Times-Roman sf
120.028 82.0599(Figure  3.4:) 2 172.696 ws
183.364 82.0599(Transformer  class  interface) 4 314.644 ws
newpath
16 71.8799 moveto
16 72.8799 lineto
412 72.8799 lineto
412 71.8799 lineto
closepath
gsave eofill grestore
showpage
%%Page: 6 6
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(to  the  y  coordinate.   Transformer::scale  modifies  the  matrix  to  multiply  the  x  and) 25 412 ws
16 657.62(y  coordinates  by  ) 6 100.481 ws
10 /Helvetica sf
100.481 657.62(sx) 2 110.481 as
12 /Times-Roman sf
110.481 657.62(  and  ) 4 135.25 ws
10 /Helvetica sf
135.25 657.62(sy) 2 145.25 as
12 /Helvetica sf
145.25 657.62(,) 1 148.586 as
12 /Times-Roman sf
148.586 657.62(  respectively.   Transformer::rotate  modifies  the  matrix) 11 412 ws
16 643.88(to  rotate  x  and  y  coordinates  by  a  given  angle  in  degrees.   Transformer::skew) 25 412 ws
16 630.14(modifies  the  matrix  to  skew  coordinates  by  ) 14 226.312 ws
10 /Helvetica sf
226.312 630.14(sx) 2 236.312 as
12 /Times-Roman sf
236.312 630.14(  and  ) 4 259.64 ws
10 /Helvetica sf
259.64 630.14(sy) 2 269.64 as
12 /Times-Roman sf
269.64 630.14(.) 1 272.64 as
26.668 615.5(Transformer::transform  multiplies  the  given  coordinates  by  the  matrix  to) 16 412 ws
16 601.76(compute  transformed  coordinates.   The  coordinates  can  either  transformed  in) 17 412 ws
16 588.02(place  stored  in  specific  out  parameters  \(tx,  ty\).   Transformer::inverse_transform) 17 412 ws
16 574.28(performs  the  inverse  mapping;  taking  transformed  coordinates  and  returning  the) 18 412 ws
16 560.54(original  coordinates.) 2 114.652 ws
26.668 545.9(The  following  example  shows  how  to  use  transformers:) 14 293.632 ws
10 /Helvetica sf
40.99 527.42(Transformer  t;) 2 103.78 ws
120.44 527.42(//  start  with  identity) 6 203.25 ws
40.99 515.9(t.rotate\(90.0\);) 15 101.02 as
40.99 503.38(t.translate\(20.0,  10.0\);) 2 138.82 ws
40.99 491.86(t.scale\(0.5,  0.5\);) 2 112.69 ws
40.99 480.34(float  x  =  1.0,  y  =  0.0;) 12 131.61 ws
40.99 468.82(float  tx,  ty;) 4 86.57 ws
40.99 457.3(t.transform\(x,  y,  tx,  ty\);) 6 140.46 ws
40.99 444.82(//  now  tx  =  10.0,  ty  =  5.5) 14 147.73 ws
12 /Times-Roman sf
16 430.18(Although  the  transformation  is  a  single  step,  one  can  think  of  it  as  individual  steps) 28 412 ws
16 416.44(for  each  of  the  rotate,  translate,  and  scale  steps.   First  the  given  point  \(1.0,0.0\)  is) 29 412 ws
16 402.7(rotated  to  \(0.0,1.0\),  then  it  is  translated  to  \(20.0,11.0\),  finally  it  is  scaled  to) 26 412 ws
16 388.96(\(10.0,5.5\).  ) 2 68.992 ws
14 /Times-Bold sf
16 362.56(3.1.5) 5 44 as
51 362.56(Bitmap) 6 95.338 as
12 /Times-Roman sf
16 342.12(A  bitmap  is  a  two-dimensional  array  of  boolean  values.   A  bitmap  is  useful  for) 27 412 ws
16 328.38(stenciling;  that  is,  drawing  through  a  mask  that  allows  some  pixels  to  be  drawn) 26 412 ws
16 314.64(but  prevents  others  from  being  changed.   The  Stencil  class  can  be  used  to  put  a) 29 412 ws
16 300.9(bitmap  in  a  glyph  graph.) 8 133.66 ws
26.668 286.26(Figure  3.5  shows  the  Bitmap  class  interface.   There  are  two  constructors) 21 412 ws
16 272.52(for  bitmaps.   One  takes  the  bitmap  data,  width,  height,  and  origin.   The  other) 26 412 ws
16 258.78(constructor  creates  a  bitmap  for  a  given  character  in  a  font,  optionally  scaling  by  a) 28 412 ws
16 245.04(given  factor.   In  this  case,  the  bitmap  width  and  height  will  reflect  the  actual  size) 29 412 ws
16 231.3(of  the  character  glyph  and  the  bitmap  origin  will  be  the  same  as  the  character) 28 412 ws
16 217.56(origin.) 7 47.668 as
26.668 202.92(Bitmap::open  operation  tries  to  open  a  file  containing  a  bitmap  definition  in  the) 24 412 ws
16 189.18(format  produced  by  the  X  bitmap  program.   If  the  file  is  found  and  is  a  valid) 31 412 ws
16 175.44(format,  open  returns  true  and  sets  the  bitmap  information.) 16 293.296 ws
26.668 160.8(Bitmap::peek  and  Bitmap::poke  are  used  to  read  and  write  at  specified  positions) 22 412 ws
16 147.06(in  the  bitmap.   Bitmap::width  and  Bitmap::height  return  the  width  and  height  of) 23 412 ws
16 133.32(the  bitmap  in  coordinates,  while  Bitmap::pwidth  and  Bitmap::pheight  return  the) 18 412 ws
16 119.58(number  of  bits  defined  in  each  dimension.) 12 218.308 ws
26.668 104.94(Treating  the  bitmap  origin  as  \(0,0\),  Bitmap::left_bearing,  Bitmap::right_bearing,) 14 412 ws
16 91.2(Bitmap::ascent,  and  Bitmap::descent  return  the  left,  right,  top,  and  bottom) 18 412 ws
16 77.46(coordinates  of  the  bitmap,  respectively.   For  example,  a  16x16  bitmap  with  its) 23 412 ws
16 63.72(origin  at  \(7,5\)  would  have  a  left_bearing  of  -7,  a  right_bearing  of  9,  an  ascent  of) 30 412 ws
389.04 39.12(3-) 2 399.036 as
402.036 39.12(6) 1 408.036 as
showpage
%%Page: 7 7
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 367.32(12,  and  a  descent  of  -5.  ) 12 130.636 ws
14 /Times-Bold sf
16 340.92(3.1.6) 5 44 as
51 340.92(Raster) 6 90.648 as
12 /Times-Roman sf
16 320.48(A  raster  is  a  color  image  specified  by  a  two-dimensional  array  of  colors.   The) 27 412 ws
16 306.74(Image  class  can  be  used  to  put  a  raster  in  a  glyph  graph.   The  TIFFRaster  class) 31 412 ws
16 293(provides  a  single  operation,  load,  for  reading  a  TIFF  image  file  and  creating  a) 26 412 ws
16 279.26(raster  for  it.   If  the  file  is  not  readable  or  not  a  valid  TIFF  file,  TIFFRaster::load) 31 412 ws
16 265.52(will  return  nil.) 4 85 ws
26.668 250.88(Figure  3.6  shows  the  Raster  and  TIFFRaster  class  interfaces.  The  raster) 20 412 ws
16 237.14(constructor  is  given  the  size  of  the  array  of  colors.   Raster::width  and) 23 412 ws
16 223.4(Raster::height  return  the  dimensions  of  the  raster  in  coordinates,  while) 18 412 ws
16 209.66(Raster::pwidth  and  Raster::pheight  return  the  dimensions  of  the  array.   A  raster's) 21 412 ws
16 195.92(origin  is  always  the  lower  left  corner.) 12 195.628 ws
26.668 181.28(Raster::peek  and  Raster::poke  read  and  write  the  color  array,  accessing  colors) 20 412 ws
16 167.54(in  terms  of  the  RGB  intensities  and  an  alpha  value.   Peek  and  poke  operations  are) 29 412 ws
16 153.8(guaranteed  to  be  cheap;  that   is,  any  processing  \(especially  interaction  with  the) 23 412 ws
16 140.06(window  system\)  will  be  deferred  until  the  raster  is   next  displayed.) 21 334.456 ws
18 /Times-Bold sf
16 98.78(3.2) 3 38.5 as
46 98.78(Canvas) 6 103.006 as
12 /Times-Roman sf
16 66.38(A  canvas  is  a  2-dimensional  area  on  which  to  draw.   The  base  implementation) 25 412 ws
389.04 39.12(3-) 2 399.036 as
402.036 39.12(7) 1 408.036 as
newpath
16.0001 676.78 moveto
16.0001 677.78 lineto
412 677.78 lineto
412 676.78 lineto
closepath
gsave eofill grestore
37.3361 660.22(class  Bitmap  :  virtual  public  Resource  {) 12 229.084 ws
37.3361 646.78(public:) 7 70.6721 as
48.0041 633.34(Bitmap\() 7 87.3401 as
58.6721 619.9(char*,  unsigned  int  width,  unsigned  int  height,  int  x0  =  -1,  int  y0  =  -1) 28 391.54 ws
48.0041 606.46(\);) 2 55.3361 as
48.0041 593.02(Bitmap\(Font*,  int  code,  float  scale  =  1.0\);) 12 249.76 ws
48.0041 579.58(static  Bitmap*  open\(const  char*  filename\);) 8 255.304 ws
48.0041 566.14(virtual  void  poke\(boolean  set,  unsigned  int  x,  unsigned  int  y\);) 18 343.66 ws
48.0041 552.7(virtual  void  peek\(unsigned  int  x,  unsigned  int  y\);) 14 282.664 ws
48.0041 539.26(virtual  Coord  width\(\);) 4 154 ws
48.0041 525.82(virtual  Coord  height\(\);) 4 156.664 ws
48.0041 512.38(virtual  unsigned  int  pwidth\(\);) 6 189.004 ws
48.0041 498.94(virtual  unsigned  int  pheight\(\);) 6 191.668 ws
48.0041 485.5(virtual  Coord  left_bearing\(\);) 4 184.648 ws
48.0041 472.06(virtual  Coord  right_bearing\(\);) 4 191.32 ws
48.0041 458.62(virtual  Coord  ascent\(\);) 4 156.652 ws
48.0041 445.18(virtual  Coord  descent\(\);) 4 162.652 ws
48.0041 431.74(virtual  void  transform\(const  Transformer&\);) 6 262.3 ws
37.3361 418.3(};  ) 2 49.4321 ws
12 /Times-Roman sf
132.346 398.86(Figure  3.5:) 2 185.014 ws
195.682 398.86(Bitmap  class  interface) 4 302.326 ws
newpath
16.0001 388.68 moveto
16.0001 389.68 lineto
412 389.68 lineto
412 388.68 lineto
closepath
gsave eofill grestore
showpage
%%Page: 8 8
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 348.84(draws  on  a  portion  of  the  screen,  normally  created  by  a  window  object  rather) 26 412 ws
16 335.1(than  directly  by  an  application.   The  Printer  subclass  uses  the  same  rendering) 23 412 ws
16 321.36(operations  to  generate  PostScript  to  a  file.   Thus,  it  is  possible  to  write  a  single) 29 412 ws
16 307.62(drawing  routine  that  can  be  used  to  generate   screen   or  printer  output.) 24 349.588 ws
26.668 292.98(Figure  3.7  shows  the  canvas  operations.   For  screen  canvases,  Canvas::window) 19 412 ws
16 279.24(returns  the  window  containing  the  canvas;  otherwise  it  returns  nil.   Canvas::width) 21 412 ws
16 265.5(and  Canvas::height  return  the  dimensions  of  the  canvas  in  coordinates.) 18 355.288 ws
26.668 250.86(The  canvas  rendering  operations  are  similar  to  the  PostScript) 16 412 ws
16 237.12(drawing  operations.   Canvas::new_path,  Canvas::move_to,  Canvas::line_to,) 9 412 ws
16 223.38(Canvas::curve_to,  and  Canvas::close_path  are  used  to  define  a  list  of  coordinates) 20 412 ws
16 209.64(on  which  to  perform  a  drawing  operation.   Canvas::move_to  sets  the  position  in) 23 412 ws
16 195.9(the  path,  and  Canvas::line_to  extends  the  path  to  a  new  position.   Canvas::curve_to) 23 412 ws
16 182.16(also  extends  the  path,  but  with  a  Bezier  curve  between  the  old  and  new  positions.) 28 412 ws
16 168.42(Canvas::close_path  closes  the  path.   Canvas::stroke  draws  along  the  current  path) 19 412 ws
16 154.68(with  a  given  brush  and  color.   Canvas::fill  draws  inside  the  path  with  a  given) 27 412 ws
16 140.94(color.   Canvas::clip  restricts  subsequent  drawing  to  be  inside  the  path.   Clipping  is) 24 412 ws
16 127.2(cumulative;  that  is,  two  consecutive  clip  operations  will  result  in  a  clipping  region) 24 412 ws
16 113.46(that  is  the  intersection  of  the  paths  specified  by  the  two  requests.) 22 325.96 ws
26.668 98.8201(Canvas::line,  Canvas::rect,  Canvas::fill_rect,  and  Canvas::clip_rect  are  provided) 12 412 ws
16 85.0801(for  convenience.   Canvas::line  is  equivalent  to  stroking  a  path  with  two  points,) 23 412 ws
16 71.3401(Canvas::rect  strokes  a  rectangular  path,  Canvas::fill_rect  fills  a  rectangular  path,) 18 412 ws
389.04 39.12(3-) 2 399.036 as
402.036 39.12(8) 1 408.036 as
newpath
15.04 677.74 moveto
15.04 678.74 lineto
411.04 678.74 lineto
411.04 677.74 lineto
closepath
gsave eofill grestore
36.376 661.18(class  Raster  :  virtual  public  Resource  {) 12 223.444 ws
36.376 647.74(public:) 7 69.712 as
47.044 634.3(Raster\(unsigned  int  pwidth,  unsigned  int  pheight\);) 10 288.376 ws
47.044 620.86(virtual  Coord  width\(\)  const;) 6 181.372 ws
47.044 607.42(virtual  Coord  height\(\)  const;) 6 184.036 ws
47.044 593.98(virtual  unsigned  int  pwidth\(\)  const;) 8 216.376 ws
47.044 580.54(virtual  unsigned  int  pheight\(\)  const;) 8 219.04 ws
47.044 567.1(virtual  void  peek\() 4 132.364 ws
57.712 553.66(unsigned  int  x,  unsigned  int  y,) 10 202.72 ws
57.712 540.22(ColorIntensity&  r,  ColorIntensity&  g,  ColorIntensity&  b,  float&  alpha) 14 396.376 ws
47.044 526.78(\)  const;) 2 82.708 ws
47.044 513.34(virtual  void  poke\() 4 133.036 ws
57.712 499.9(unsigned  int  x,  unsigned  int  y,) 10 202.72 ws
57.712 486.46(ColorIntensity  r,  ColorIntensity  g,  ColorIntensity  b,  float  alpha) 14 359.704 ws
47.044 473.02(\);) 2 54.376 as
36.376 459.58(};) 2 45.472 as
36.376 440.14(class  TIFFRaster  {) 4 126.796 ws
36.376 426.7(public:) 7 69.712 as
47.044 413.26(static  Raster*  load\(const  char*  filename\);) 8 247 ws
36.376 399.82(};  ) 2 48.472 ws
12 /Times-Roman sf
92.062 380.38(Figure  3.6:) 2 144.73 ws
155.398 380.38(Raster  and  TIFFRaster  class  interfaces) 8 340.69 ws
newpath
15.04 370.2 moveto
15.04 371.2 lineto
411.04 371.2 lineto
411.04 370.2 lineto
closepath
gsave eofill grestore
showpage
%%Page: 9 9
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 109.8(and  Canvas::clip_rect  restricts  subsequent  output  to  be  within  a  rectangular  path.) 20 403.612 ws
26.668 95.1601(Drawing  operations  are  typically  batched  to  improve  performance.   For) 17 412 ws
16 81.4201(example,  a  series  of  Canvas::character  operations  might  be  combined  into  a  single) 22 412 ws
16 67.6801(request  on  many  graphics  systems.   An  application  cannot  determine  if  or  when  a) 25 412 ws
389.04 39.12(3-) 2 399.036 as
402.036 39.12(9) 1 408.036 as
newpath
15.76 679.18 moveto
15.76 680.18 lineto
411.76 680.18 lineto
411.76 679.18 lineto
closepath
gsave eofill grestore
37.096 662.62(class  Canvas  {) 4 107.512 ws
37.096 649.18(public:) 7 70.432 as
47.764 635.74(Canvas\(\);) 9 94.42 as
47.764 622.3(virtual  Window*  window\(\)  const;) 6 210.748 ws
47.764 608.86(virtual  Coord  width\(\)  const;) 6 182.092 ws
47.764 595.42(virtual  Coord  height\(\)  const;) 6 184.756 ws
47.764 575.98(virtual  void  new_path\(\);) 4 164.416 ws
47.764 562.54(virtual  void  move_to\(Coord  x,  Coord  y\);) 10 243.76 ws
47.764 549.1(virtual  void  line_to\(Coord  x,  Coord  y\);) 10 235.096 ws
47.764 535.66(virtual  void  curve_to\() 4 152.416 ws
58.432 522.22(Coord  x,  Coord  y,  Coord  x1,  Coord  y1,  Coord  x2,  Coord  y2) 22 346.432 ws
47.764 508.78(\);) 2 55.096 as
47.764 495.34(virtual  void  close_path\(\);) 4 169.084 ws
47.764 481.9(virtual  void  stroke\(const  Color*,  const  Brush*\);) 10 277.756 ws
47.764 468.46(virtual  void  rect\() 4 128.416 ws
58.432 455.02(Coord  l,  Coord  b,  Coord  r,  Coord  t,  const  Color*,  const  Brush*) 22 361.768 ws
47.764 441.58(\);) 2 55.096 as
47.764 428.14(virtual  void  fill\(const  Color*\);) 6 193.432 ws
47.764 414.7(virtual  void  fill_rect\(Coord  l,  Coord  b,  Coord  r,  Coord  t,  const  Color*\);) 22 390.088 ws
47.764 401.26(virtual  void  character\() 4 154.396 ws
58.432 387.82(const  Font*,  int  ch,  Coord  width,  const  Color*,  Coord  x,  Coord  y) 22 371.776 ws
47.764 374.38(\);) 2 55.096 as
47.764 360.94(virtual  void  stencil\(const  Bitmap*,  const  Color*,  Coord  x,  Coord  y\);) 18 376.432 ws
47.764 347.5(virtual  void  image\(const  Raster*,  Coord  x,  Coord  y\);) 14 302.08 ws
47.764 328.06(virtual  void  push_transform\(\);) 4 193.084 ws
47.764 314.62(virtual  void  transform\(const  Transformer&\);) 6 262.06 ws
47.764 301.18(virtual  void  pop_transform\(\);) 4 188.416 ws
47.764 287.74(virtual  void  push_clipping\(\);) 4 185.764 ws
47.764 274.3(virtual  void  clip\(\);) 4 135.76 ws
47.764 260.86(virtual  void  clip_rect\(Coord  l,  Coord  b,  Coord  r,  Coord  t\);) 18 326.416 ws
47.764 247.42(virtual  void  pop_clipping\(\);) 4 181.096 ws
47.764 227.98(virtual  void  damage\(Coord  left,  Coord  bottom,  Coord  right,  Coord  top\);) 18 393.088 ws
47.764 214.54(virtual  boolean  damaged\() 4 170.404 ws
58.432 201.1(Coord  left,  Coord  bottom,  Coord  right,  Coord  top) 14 296.44 ws
47.764 187.66(\)  const;) 2 83.428 ws
47.764 174.22(virtual  void  repair\(\);) 4 145.744 ws
37.096 160.78(};  ) 2 49.192 ws
12 /Times-Roman sf
132.112 141.34(Figure  3.7:) 2 184.78 ws
195.448 141.34(Canvas  class  interface) 4 302.08 ws
newpath
15.76 131.16 moveto
15.76 132.16 lineto
411.76 132.16 lineto
411.76 131.16 lineto
closepath
gsave eofill grestore
showpage
%%Page: 10 10
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(particular  operation  has  completed.   No  synchronization  operations  are  defined  on) 19 412 ws
16 657.62(a  canvas,  as  several  canvases  may  be  active  at  the  same  time.   Display::flush  or) 27 412 ws
16 643.88(Display::sync  can  be  used  to  wait  until  the  display  starts  or  finishes  drawing,) 24 412 ws
16 630.14(respectively.) 13 76.984 as
26.668 615.5(As  an  example  of  the  drawing  operations,  the  following  code  draws  a  filled) 24 412 ws
16 601.76(triangle  with  corners  \(x1,y1\),  \(x2,y2\),  and  \(x3,y3\):) 12 258.952 ws
10 /Helvetica sf
40.99 583.28(canvas->new_path\(\);) 19 134.64 as
40.99 571.76(canvas->move_to\(x1,  y1\);) 2 156.31 ws
40.99 560.24(canvas->line_to\(x2,  y2\);) 2 147.42 ws
40.99 548.72(canvas->line_to\(x3,  y3\);) 2 147.42 ws
40.99 537.2(canvas->close_path\(\);) 21 139.64 as
40.99 524.72(canvas->fill\(color\);  ) 2 125.17 ws
18 /Times-Bold sf
16 483.44(3.3) 3 38.5 as
46 483.44(Printer) 7 101.98 as
12 /Times-Roman sf
16 451.04(A  printer  is  a  2-D  drawing  surface  like  a  canvas,  but  that  generates  output  for) 28 412 ws
16 437.3(hardcopy  or  previewing.   The  printer  class  normally  generates  PostScript  text  to  a) 23 412 ws
16 423.56(file;  other  printer  formats  may  be  available  at  a  particular  site.) 20 313.6 ws
26.668 408.92(Printer  is  a  subclass  of  Canvas  with  different  implementations  for  the  drawing) 22 412 ws
16 395.18(operations.   Thus,  a  printer  can  be  passed  to  an  operation  expecting  a  canvas.   The) 28 412 ws
16 381.44(printer  class  also  provides  a  few  additional  operations,  shown  in  Figure  3.8.) 22 379.288 ws
26.668 366.8(The  printer  constructor  takes  a  pointer  to  an  output  stream  where  the  print) 24 412 ws
16 353.06(representation  will  be  written.   Printer::resize  specifies  the  boundaries  of  the) 19 412 ws
16 339.32(printed  page.   Printer::comment  generates  text  that  will  appear  in  the  output) 21 412 ws
16 325.58(stream,  but  will  not  show  on  the  printed  page.   Printer::page  generates  information) 23 412 ws
16 311.84(about  the  current  page.   This  operation  will  not  result  in  any  printed  output,) 25 412 ws
16 298.1(but  is  used  by  previewers.   Printer::flush  is  available  to  subclasses  to  force  any) 25 412 ws
16 284.36(locally-buffered  data  to  be  written.   ) 11 187.456 ws
389.04 39.12(3-10) 4 411.036 as
newpath
16 261.1 moveto
16 262.1 lineto
412 262.1 lineto
412 261.1 lineto
closepath
gsave eofill grestore
37.336 244.54(class  Printer  :  public  Canvas  {) 10 182.752 ws
37.336 231.1(public:) 7 70.672 as
48.004 217.66(Printer\(ostream*\);) 18 135.988 as
48.004 204.22(virtual  void  resize\(Coord  left,  Coord   bottom,  Coord  right,  Coord  top\);) 19 385.492 ws
48.004 190.78(virtual  void  comment\(const  char*\);) 6 217.648 ws
48.004 177.34(virtual  void  page\(const  char*\);) 6 195.64 ws
37.336 163.9(protected:) 10 85.324 as
48.004 150.46(virtual  void  flush\(\);) 4 142 ws
37.336 137.02(};  ) 2 49.432 ws
12 /Times-Roman sf
133.684 117.58(Figure  3.8:) 2 186.352 ws
197.02 117.58(Printer  class  interface) 4 300.988 ws
newpath
16 107.4 moveto
16 108.4 lineto
412 108.4 lineto
412 107.4 lineto
closepath
gsave eofill grestore
showpage
%%Trailer
end restore
%%Pages: 10
%!PS-Adobe-2.0
%%Creator: ./ch4.doc
%%Pages: atend
%%EndComments
save 20 dict begin

/sf {   % scale /fontName => -  (set current font)
    {findfont} stopped {pop /Courier findfont} if
    exch scalefont setfont
} def

/ws {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 8#40 4 3 roll
    widthshow
} def

/as {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 3 2 roll
    ashow
} def

%%EndProlog
%%Page: 1 1
92 37.08 translate
0 0 0 setrgbcolor
24 /Times-Bold sf
16 662.72(Chapter  4) 2 119.32 ws
16 625.76(Display  Management) 2 233.992 ws
12 /Times-Roman sf
16 597.44(The  previous  chapters  covered  glyphs  and  graphics  operations.   This  chapter) 19 412 ws
16 583.7(discusses  the  other  objects  necessary  to  manage  the  workstation  display  where) 20 412 ws
16 569.96(glyphs  are  drawn.   A  ) 9 121.846 ws
12 /Times-Bold sf
121.846 569.96(window) 6 161.854 as
12 /Times-Roman sf
161.854 569.96(  is  an  object  that  can  be  mapped  onto  a  screen  and) 22 412 ws
16 556.22(receive  input.   Associated  with  a  window  is  the  root  of  a  directed  acyclic  graph  of) 29 412 ws
16 542.48(glyphs.   The  window  creates  a  ) 11 173.414 ws
12 /Times-Bold sf
173.414 542.48(canvas) 6 208.082 as
12 /Times-Roman sf
208.082 542.48(  that  is  bound  to  a  portion  of  the  screen) 18 412 ws
16 528.74(when  the  window  is  mapped.   The  window  calls  ) 17 251.605 ws
12 /Times-Italic sf
251.605 528.74(draw) 4 276.277 as
12 /Times-Roman sf
276.277 528.74(  on  the  root  glyph  to  refresh) 12 412 ws
16 515(the  canvas  and  ) 6 89.644 ws
12 /Times-Italic sf
89.644 515(pick) 4 109.636 as
12 /Times-Roman sf
109.636 515(  to  determine  what  to  do  with  input  events.) 16 315.292 ws
26.668 500.36(A  ) 2 41.2794 ws
12 /Times-Bold sf
41.2794 500.36(display) 7 77.9634 as
12 /Times-Roman sf
77.9634 500.36(  is  the  unit  of  window  system  control;  typically  it  consists  of  a) 24 412 ws
16 486.62(single  screen,  keyboard,  and  a  mouse  or  other  pointing  devices.   A  ) 23 349.172 ws
12 /Times-Bold sf
349.172 486.62(session) 7 384.512 as
12 /Times-Roman sf
384.512 486.62(  is  an) 4 412 ws
16 472.88(object  provided  for  convenience  to  manage  the  flow  of  control  associated  with  an) 24 412 ws
16 459.14(application.   A  session  can  interact  with  more  than  one  display  and  can  access  all) 27 412 ws
16 445.4(the  screens  associated  with  a  single  display.) 12 226.3 ws
18 /Times-Bold sf
16 404.12(4.1) 3 38.5 as
46 404.12(Session) 7 102.016 as
12 /Times-Roman sf
16 371.72(Figure  4.1  shows  the  session  class  interface.   A  session  must  be  constructed  before) 25 412 ws
16 357.98(any  other  InterViews  objects  are  created.   The  constructor  takes  a  string  that) 23 412 ws
16 344.24(specifies  the  session's  class  name,  command-line  arguments,  optional  argument) 16 412 ws
16 330.5(description,  and  optional  initial  style  settings.   The  session's  instance  name  comes) 21 412 ws
16 316.76(from  the  ``-name''  command-line  option  if  one  is  given,  or  the  environment) 22 412 ws
16 303.02(variable  RESOURCE_NAME  if  it  is  defined,  or  the  value  of  argv[0]  with  all) 24 412 ws
16 289.28(leading  directories  stripped.   The  session  class  and  instance  names  are  used  as  the) 25 412 ws
16 275.54(name  and  prefix  for  the  root  style.) 12 179.632 ws
26.668 260.9(The  option  description  is  an  array  of  structures  that  describe  command-line) 20 412 ws
16 247.16(arguments.   The  structure  contains  four  fields:  a  ) 15 258.256 ws
12 /Times-Italic sf
258.256 247.16(name) 4 284.248 as
12 /Times-Roman sf
284.248 247.16(  that  is  the  command-line) 8 412 ws
16 233.42(string,  a  ) 4 57.896 ws
12 /Times-Italic sf
57.896 233.42(path) 4 79.232 as
12 /Times-Roman sf
79.232 233.42(  specifying  a  style  attribute,  a  ) 12 224.24 ws
12 /Times-Italic sf
224.24 233.42(format) 6 256.244 as
12 /Times-Roman sf
256.244 233.42(  specifying  where  the  associated) 8 412 ws
16 219.68(value  is,  and  a  default  ) 10 126.074 ws
12 /Times-Italic sf
126.074 219.68(value) 5 152.066 as
12 /Times-Roman sf
152.066 219.68(.   Valid  formats  are  OptionPropertyNext  \(use  the  next) 15 412 ws
16 205.94(argument  as  an  attribute:value  pair\),  OptionValueNext  \(use  the  next  argument  as) 20 412 ws
16 192.2(the  value\),  OptionValueImplicit  \(use  the  default  value\),  OptionValueIsArg  \(use) 16 412 ws
16 178.46(argument  as  value\),  and  OptionValueAfter  \(use  remainder  of  argument  as  value\).) 20 412 ws
16 164.72(If  a  command-line  argument  is  found  that  matches  an  option  description,  it  will  be) 26 412 ws
16 150.98(interpreted  and  removed  from  ) 8 164.971 ws
12 /Times-Italic sf
164.971 150.98(argv) 4 186.967 as
12 /Times-Roman sf
186.967 150.98(.   The  argument  count  \() 9 300.747 ws
12 /Times-Italic sf
300.747 150.98(argc) 4 322.743 as
12 /Times-Roman sf
322.743 150.98(\)  will  be  set  to  the) 10 412 ws
16 137.24(number  of  uninterpreted  command-line  arguments.) 8 260.956 ws
26.668 122.6(In  addition  to  the  program-specified  options,  the  session  constructor) 16 412 ws
16 108.86(automatically  matches  the  options  listed  in  Table  4.1.   The  optional  initial  style) 23 412 ws
16 95.12(settings  are  specified  by  a  nil-terminated  array  of  pairs  ) 18 290.664 ws
12 /Helvetica sf
290.664 95.12(<s1,s2>) 7 333.36 as
12 /Times-Roman sf
333.36 95.12(,  where  s1  is  an) 8 412 ws
16 81.38(attribute  name  and  s2  is  the  value.   User  defaults  will  override  any  initial  settings,) 27 412 ws
16 67.64(and  command-line  arguments  will  override  user  defaults.) 12 290.284 ws
390.64 37.04(4-) 2 400.636 as
403.636 37.04(1) 1 409.636 as
showpage
%%Page: 2 2
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 88.6799(Session::instance  returns  the  session  object,  allowing  any  routine  to  access) 18 412 ws
16 74.9399(session  operations.   Session::name,  Session::classname,  Session::argc,  and) 11 412 ws
16 61.1999(Session::argv  return  information  about  the  session.) 10 259.984 ws
390.96 37.2(4-) 2 400.956 as
403.956 37.2(2) 1 409.956 as
newpath
15.28 678.94 moveto
15.28 679.94 lineto
411.28 679.94 lineto
411.28 678.94 lineto
closepath
gsave eofill grestore
36.616 662.38(class  PropertyData  {) 4 135.688 ws
36.616 648.94(public:) 7 69.952 as
47.284 635.5(const  char*  path;) 4 129.268 ws
47.284 622.06(const  char*  value;) 4 134.596 ws
36.616 608.62(};) 2 45.712 as
36.616 589.18(class  OptionDesc  {) 4 129.028 ws
36.616 575.74(public:) 7 69.952 as
47.284 562.3(const  char*  name;) 4 134.596 ws
47.284 548.86(const  char*  path;) 4 129.268 ws
47.284 535.42(OptionStyle  format;) 2 143.62 ws
47.284 521.98(const  char*  value;) 4 134.596 ws
36.616 508.54(};) 2 45.712 as
36.616 489.1(class  Session  {) 4 108.376 ws
36.616 475.66(public:) 7 69.952 as
47.284 462.22(Session\() 8 87.952 as
57.952 448.78(const  char*,  int&  argc,  char**  argv,) 10 230.572 ws
57.952 435.34(const  OptionDesc*  =  nil,  const  PropertyData*  =  nil) 14 304.804 ws
47.284 421.9(\);) 2 54.616 as
47.284 408.46(static  Session*  instance\(\);) 4 171.94 ws
47.284 395.02(const  char*  name\(\)  const;) 6 170.92 ws
47.284 381.58(const  char*  classname\(\)  const;) 6 194.248 ws
47.284 368.14(int  argc\(\)  const;) 4 123.268 ws
47.284 354.7(char**  argv\(\)  const;) 4 143.92 ws
47.284 341.26(Style*  style\(\)  const;) 4 143.284 ws
47.284 327.82(void  default_display\(Display*\);) 2 200.272 ws
47.284 314.38(Display*  default_display\(\)  const;) 4 207.268 ws
47.284 300.94(virtual  Display*  connect\(const  String&\);) 6 243.604 ws
47.284 287.5(virtual  Display*  connect\(const  char*\);) 6 231.58 ws
47.284 274.06(virtual  void  disconnect\(Display*\);) 4 211.936 ws
47.284 260.62(virtual  int  run\(\);) 4 124.612 ws
47.284 247.18(virtual  int  run_window\(Window*\);) 4 216.604 ws
47.284 233.74(virtual  void  quit\(\);) 4 135.952 ws
47.284 220.3(virtual  boolean  done\(\)  const;) 6 185.596 ws
47.284 206.86(virtual  boolean  pending\(\)  const;) 6 200.932 ws
47.284 193.42(virtual  void  read\(Event&\);) 4 175.264 ws
47.284 179.98(virtual  boolean  read\(long  sec,  long  usec,  Event&\);) 12 289.24 ws
47.284 166.54(virtual  void  unread\(Event&\);) 4 187.264 ws
47.284 153.1(virtual  void  poll\(Event&\);) 4 173.284 ws
36.616 139.66(};) 2 45.712 as
12 /Times-Roman sf
129.46 120.22(Figure  4.1:) 2 182.128 ws
192.796 120.22(Session  class  interface.) 4 303.772 ws
newpath
15.28 110.04 moveto
15.28 111.04 lineto
411.28 111.04 lineto
411.28 110.04 lineto
closepath
gsave eofill grestore
showpage
%%Page: 3 3
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 279.44(Session::default_display  sets  and  gets  the  default  display  for  the  session.) 18 412 ws
16 265.7(Initially,  the  default  display  is  the  display  first  opened  when  the  session  is) 24 412 ws
16 251.96(created.   The  name  of  the  first  display  is  either  the  value  after  the  \252-display\272) 27 412 ws
16 238.22(command-line  argument,  if  present,  or  the  value  of  the  DISPLAY  environment) 20 412 ws
16 224.48(variable.   Session::style  returns  the  root  style  associated  with  the  default  display.) 21 401.464 ws
26.668 209.84(Session::connect  opens  a  new  connection  to  the  display  with  the  given  name.   If) 25 412 ws
16 196.1(successful,  the  session  will  begin  receiving  events  from  the  display  and  returns  a) 24 412 ws
16 182.36(pointer  to  it.   If  not  successful,  Session::connect  returns  nil.   Session::disconnect) 20 412 ws
16 168.62(stops  receiving  events  from  the  given  display.) 12 236.308 ws
26.668 153.98(Several  operations  are  provided  for  reading  events  from  one  of  the  connected) 22 412 ws
16 140.24(displays.   Generally,  applications  need  not  call  these  operations  directly\261they  can) 19 412 ws
16 126.5(simply  return  Session::run  at  the  end  of  their  main  function.   Session::run  reads) 23 412 ws
16 112.76(events  from  the  display,  handling  them  as  they  arrive,  and  stops  after  a  call  to) 28 412 ws
16 99.0199(Session::quit.   Session::run_window  is  short-hand  for  mapping  the  window  and) 17 412 ws
16 85.2799(then  calling  Session::run.   Session::done  returns  whether  Session::quit  has  been) 17 412 ws
16 71.5399(called.) 7 47.656 as
390.96 37.2(4-) 2 400.956 as
403.956 37.2(3) 1 409.956 as
newpath
37 332.12 moveto
37 665.24 lineto
38 665.24 lineto
38 332.12 lineto
closepath
0 0 0.0941176 setrgbcolor
gsave eofill grestore
newpath
113.32 332.12 moveto
113.32 665.24 lineto
114.32 665.24 lineto
114.32 332.12 lineto
closepath
gsave eofill grestore
newpath
386.296 332.12 moveto
386.296 665.24 lineto
387.296 665.24 lineto
387.296 332.12 lineto
closepath
gsave eofill grestore
newpath
37 664.24 moveto
37 665.24 lineto
387.296 665.24 lineto
387.296 664.24 lineto
closepath
gsave eofill grestore
newpath
37 649.8 moveto
37 650.8 lineto
387.296 650.8 lineto
387.296 649.8 lineto
closepath
gsave eofill grestore
newpath
37 635.36 moveto
37 636.36 lineto
387.296 636.36 lineto
387.296 635.36 lineto
closepath
gsave eofill grestore
newpath
37 620.92 moveto
37 621.92 lineto
387.296 621.92 lineto
387.296 620.92 lineto
closepath
gsave eofill grestore
newpath
37 606.48 moveto
37 607.48 lineto
387.296 607.48 lineto
387.296 606.48 lineto
closepath
gsave eofill grestore
newpath
37 592.04 moveto
37 593.04 lineto
387.296 593.04 lineto
387.296 592.04 lineto
closepath
gsave eofill grestore
newpath
37 577.6 moveto
37 578.6 lineto
387.296 578.6 lineto
387.296 577.6 lineto
closepath
gsave eofill grestore
newpath
37 563.16 moveto
37 564.16 lineto
387.296 564.16 lineto
387.296 563.16 lineto
closepath
gsave eofill grestore
newpath
37 548.72 moveto
37 549.72 lineto
387.296 549.72 lineto
387.296 548.72 lineto
closepath
gsave eofill grestore
newpath
37 534.28 moveto
37 535.28 lineto
387.296 535.28 lineto
387.296 534.28 lineto
closepath
gsave eofill grestore
newpath
37 519.84 moveto
37 520.84 lineto
387.296 520.84 lineto
387.296 519.84 lineto
closepath
gsave eofill grestore
newpath
37 505.4 moveto
37 506.4 lineto
387.296 506.4 lineto
387.296 505.4 lineto
closepath
gsave eofill grestore
newpath
37 490.96 moveto
37 491.96 lineto
387.296 491.96 lineto
387.296 490.96 lineto
closepath
gsave eofill grestore
newpath
37 476.52 moveto
37 477.52 lineto
387.296 477.52 lineto
387.296 476.52 lineto
closepath
gsave eofill grestore
newpath
37 462.08 moveto
37 463.08 lineto
387.296 463.08 lineto
387.296 462.08 lineto
closepath
gsave eofill grestore
newpath
37 447.64 moveto
37 448.64 lineto
387.296 448.64 lineto
387.296 447.64 lineto
closepath
gsave eofill grestore
newpath
37 433.2 moveto
37 434.2 lineto
387.296 434.2 lineto
387.296 433.2 lineto
closepath
gsave eofill grestore
newpath
37 418.76 moveto
37 419.76 lineto
387.296 419.76 lineto
387.296 418.76 lineto
closepath
gsave eofill grestore
newpath
37 404.32 moveto
37 405.32 lineto
387.296 405.32 lineto
387.296 404.32 lineto
closepath
gsave eofill grestore
newpath
37 389.88 moveto
37 390.88 lineto
387.296 390.88 lineto
387.296 389.88 lineto
closepath
gsave eofill grestore
newpath
37 375.44 moveto
37 376.44 lineto
387.296 376.44 lineto
387.296 375.44 lineto
closepath
gsave eofill grestore
newpath
37 361 moveto
37 362 lineto
387.296 362 lineto
387.296 361 lineto
closepath
gsave eofill grestore
newpath
37 346.56 moveto
37 347.56 lineto
387.296 347.56 lineto
387.296 346.56 lineto
closepath
gsave eofill grestore
newpath
37 332.12 moveto
37 333.12 lineto
387.296 333.12 lineto
387.296 332.12 lineto
closepath
gsave eofill grestore
0 0 0 setrgbcolor
42 653.68(-background) 11 102.648 as
118.32 653.68(next  argument  sets  the  background  color) 10 313.284 ws
42 639.24(-bg) 3 57.996 as
118.32 639.24(same  as  -background) 4 219.624 ws
42 624.8(-dbu) 4 63.996 as
10 /Times-Roman sf
63.996 624.8(f) 1 67.326 as
12 /Times-Roman sf
118.32 624.8(double-buffer  windows  by  default) 6 281.952 ws
42 610.36(-display) 8 80.664 as
118.32 610.36(next  argument  specifies  the  target  workstation  display) 12 377.616 ws
42 595.92(-dpi) 4 61.332 as
118.32 595.92(next  argument  is  coordinates-to-pixels  ratio) 8 327.624 ws
42 581.48(-fg) 3 55.992 as
118.32 581.48(same  as  -foreground) 4 216.288 ws
42 567.04(-flat) 5 61.992 as
118.32 567.04(next  argument  sets  the  base  color  for  bevels) 14 328.608 ws
42 552.6(-fn) 3 55.992 as
118.32 552.6(same  as  -font) 4 182.304 ws
42 538.16(-font) 5 65.328 as
118.32 538.16(next  argument  sets  the  default  text  font) 12 305.628 ws
42 523.72(-foreground) 11 99.312 as
118.32 523.72(next  argument  sets  the  foreground  color) 10 309.948 ws
42 509.28(-geometry) 9 91.32 as
118.32 509.28(next  argument  sets  the  first  window's  position  and  size) 16 382.296 ws
42 494.84(-iconic) 7 75.324 as
118.32 494.84(starts  up  first  window  in  iconic  form) 12 293.64 ws
42 480.4(-malloc) 7 78.66 as
118.32 480.4(run  with  memory-management  debugging  on) 8 335.628 ws
42 465.96(-monochrome) 11 109.32 as
118.32 465.96(use  monochrome  style) 4 226.308 ws
42 451.52(-motif) 6 72 as
118.32 451.52(use  Motif  style) 4 190.32 ws
42 437.08(-name) 5 71.988 as
118.32 437.08(next  argument  sets  the  instance  name  of  the  session) 16 365.616 ws
42 422.64(-nodbuf) 7 79.992 as
118.32 422.64(do  not  double-buffer  windows) 6 263.964 ws
42 408.2(-openlook) 9 90.66 as
118.32 408.2(use  OpenLook  style) 4 214.308 ws
42 393.76(-synchronous) 12 106.656 as
118.32 393.76(force  synchronous  operation  with  the  window  system) 12 374.952 ws
42 379.32(-title) 6 64.668 as
118.32 379.32(next  argument  sets  the  session's  default  title  bar  name) 16 377.616 ws
42 364.88(-visual) 7 74.664 as
118.32 364.88(next  argument  is  visual  class  to  use  for  windows) 16 350.964 ws
42 350.44(-visual_id) 10 90 as
118.32 350.44(next  argument  is  visual  id  number  to  use  for  windows) 18 376.632 ws
42 336(-xrm) 4 65.328 as
12 /Times-Roman sf
118.32 336(next  argument  is  \252name:value\272;  sets  named  attribute) 12 369.612 ws
101.16 309.68(Table  4.1:) 2 149.82 ws
160.488 309.68(Predefined  command-line  options) 4 323.136 ws
showpage
%%Page: 4 4
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 375.72(Session::pending  returns  whether  any  events  are  waiting  to  be  read.) 18 412 ws
16 361.98(Session::read  gets  the  next  event  from  the  display.   Session::read  returns  with  any) 23 412 ws
16 348.24(event,  not  necessarily  an  event  understood  directly  by  the  toolkit.   For  example,  an) 25 412 ws
16 334.5(application  running  on  the  X  Window  System  will  get  a  DestroyNotify  event) 22 412 ws
16 320.76(when  a  window  is  destroyed.   The  Event  class  defines  no  specific  type  for  this) 27 412 ws
16 307.02(event  \(it  will  be  \252other\272\)  and  takes  no  default  action.   However,  it  will  be  returned) 29 412 ws
16 293.28(by  Session::read.) 2 97.996 ws
26.668 278.64(Session::read  optionally  can  be  called  with  a  timeout.   It  returns  true  if  an  event) 27 412 ws
16 264.9(is  read  before  the  timeout  occurs,  or  false  if  no  event  occurred  before  the  specified) 28 412 ws
16 251.16(time  expires.   Note  that  a  timeout  is  not  the  same  as  a  timer.   To  interleave  timing) 32 412 ws
16 237.42(information  with  normal  events,  use  the  Dispatcher  class.) 14 291.628 ws
26.668 222.78(Session::unread  puts  an  event  back  at  the  front  of  the  input  queue  associated) 24 412 ws
16 209.04(with  the  display.   Putting  an  event  back  is  not  necessarily  the  same  as  not  reading) 29 412 ws
16 195.3(it  because  the  target  window  could  be  modified  \(even  destroyed\)  between  the) 22 412 ws
16 181.56(time  the  event  is  first  read  and  when  it  is  re-read.   Session::poll  returns  the  current) 29 412 ws
16 167.82(event  information  for  the  default  display.) 10 213.304 ws
26.668 153.18(Figure  4.2  shows  an  example  use  of  a  session  in  the  main  function  for  the  alert) 30 412 ws
16 139.44(application.   The  application  defines  two  attributes,  \252quitbutton\272  and  \252transient\272,) 17 412 ws
16 125.7(with  initial  values  \252OK,  OK  .  .  .\272  and  \252on\272,  respectively.   Two  command-line) 25 412 ws
16 111.96(options  are  provided  to  set  these  attributes.   The  option  \252-button\272  is  followed  on) 25 412 ws
16 98.22(the  command-line  by  the  quitbutton  string,  and  the  option  \252-top\272  sets  the  value  of) 26 412 ws
16 84.48(the  transient  attribute  to  \252off\272.) 8 160.972 ws
390.96 37.2(4-) 2 400.956 as
403.956 37.2(4) 1 409.956 as
newpath
17.2 643.42 moveto
17.2 644.42 lineto
413.2 644.42 lineto
413.2 643.42 lineto
closepath
gsave eofill grestore
38.536 626.86(static  PropertyData  props[]  =  {) 8 187.036 ws
49.204 613.42({  "*quitbutton",  "OK,  OK  .  .  ."  },) 14 209.308 ws
49.204 599.98({  "*transient",  "on"  },) 6 154.636 ws
49.204 586.54({  nil  }) 4 79.396 ws
38.536 573.1(};) 2 47.632 as
38.536 553.66(static  OptionDesc  options[]  =  {) 8 189.052 ws
49.204 540.22({  "-button",  "*quitbutton",  OptionValueNext  },) 8 276.64 ws
49.204 526.78({  "-top",  "*transient",  OptionValueImplicit,  "off"  },) 10 297.748 ws
49.204 513.34({  nil  }) 4 79.396 ws
38.536 499.9(};) 2 47.632 as
38.536 480.46(int  main\(int  argc,  char**  argv\)  {) 10 194.26 ws
49.204 467.02(Session*  session  =  new  Session\("Alert",  argc,  argv,  options,  props\);) 16 375.736 ws
59.872 453.58(.  .  .  create  window  .  .  .) 14 166.18 ws
49.204 440.14(return  session->run_window\(window\);) 2 236.944 ws
38.536 426.7(};) 2 47.632 as
12 /Times-Roman sf
145.204 407.26(Figure  4.2:) 2 197.872 ws
208.54 407.26(Session  example.) 2 291.868 ws
newpath
17.2 397.08 moveto
17.2 398.08 lineto
413.2 398.08 lineto
413.2 397.08 lineto
closepath
gsave eofill grestore
showpage
%%Page: 5 5
92 37.08 translate
0 0 0 setrgbcolor
18 /Times-Bold sf
16 667.52(4.2) 3 38.5 as
46 667.52(Display) 7 104.014 as
12 /Times-Roman sf
16 635.12(Figure  4.3  shows  the  display  class  interface.   Display::open  is  a  static  member) 23 412 ws
16 621.38(function  that  opens  a  connection  to  the  display  with  the  given  name.   The) 25 412 ws
16 607.64(interpretation  of  a  display  name  is  system-dependent.   On  X,  the  name  is) 23 412 ws
12 /Times-Italic sf
16 593.9(host:number) 11 76.66 as
12 /Times-Roman sf
76.66 593.9(  where  ) 4 112.96 ws
12 /Times-Italic sf
112.96 593.9(host) 4 132.964 as
12 /Times-Roman sf
132.964 593.9(  is  a  machine's  hostname  and  ) 12 279.892 ws
12 /Times-Italic sf
279.892 593.9(number) 6 316.552 as
12 /Times-Roman sf
316.552 593.9(  is  the  index  for  the) 10 412 ws
16 580.16(display  connected  to  that  host  \(typically  0\).   If  successful,  Display::open  returns) 21 412 ws
16 566.42(a  pointer  to  a  display  object.   If  not  successful,  it  returns  nil.   Display::close) 26 412 ws
16 552.68(terminates  the  connection.) 4 142.312 ws
26.668 538.04(Display::width  and  Display::height  return  the  dimensions  in  coordinates  of) 16 412 ws
16 524.3(the  display's  current  screen.   Display::a_width  and  Display::a_height  return  the) 17 412 ws
16 510.56(dimensions  in  points  \(72  points  =  one  inch\).) 14 227.44 ws
390.96 37.2(4-) 2 400.956 as
403.956 37.2(5) 1 409.956 as
newpath
16.24 481.18 moveto
16.24 482.18 lineto
412.24 482.18 lineto
412.24 481.18 lineto
closepath
gsave eofill grestore
37.576 464.62(class  Display  {) 4 109.996 ws
37.576 451.18(protected:) 10 85.564 as
48.244 437.74(Display\(DisplayRep*\);) 21 159.568 as
37.576 424.3(public:) 7 70.912 as
48.244 410.86(static  Display*  open\(const  String&\);) 6 224.572 ws
48.244 397.42(static  Display*  open\(const  char*\);) 6 212.548 ws
48.244 383.98(static  Display*  open\(\);) 4 157.564 ws
48.244 370.54(virtual  void  close\(\);) 4 142.9 ws
48.244 351.1(virtual  Coord  width\(\)  const;) 6 182.572 ws
48.244 337.66(virtual  Coord  height\(\)  const;) 6 185.236 ws
48.244 324.22(virtual  Coord  a_width\(\)  const;) 6 193.9 ws
48.244 310.78(virtual  Coord  a_height\(\)  const;) 6 196.564 ws
48.244 297.34(int  to_pixels\(Coord\)  const;) 4 177.58 ws
48.244 283.9(Coord  to_coord\(int\)  const;) 4 176.236 ws
48.244 264.46(virtual  void  set_screen\(int\);) 4 180.892 ws
48.244 245.02(virtual  void  style\(Style*\);) 4 171.58 ws
48.244 231.58(virtual  Style*  style\(\)  const;) 6 178.576 ws
48.244 212.14(virtual  void  repair\(\);) 4 146.224 ws
48.244 198.7(virtual  void  flush\(\);) 4 142.24 ws
48.244 185.26(virtual  void  sync\(\)) 4 136.9 ws
48.244 165.82(virtual  void  ring_bell\(int\);) 4 174.244 ws
48.244 152.38(virtual  void  set_key_click\(int\);) 4 196.9 ws
48.244 138.94(virtual  void  set_auto_repeat\(boolean\);) 4 231.544 ws
48.244 125.5(virtual  void  set_pointer_feedback\(int  thresh,  int  scale\);) 10 311.536 ws
48.244 112.06(virtual  void  move_pointer\(Coord  x,  Coord  y\);) 10 268.9 ws
37.576 98.62(};) 2 46.672 as
12 /Times-Roman sf
130.09 79.18(Figure  4.3:) 2 182.758 ws
193.426 79.18(Display  class  interface.) 4 305.062 ws
newpath
16.24 69 moveto
16.24 70 lineto
412.24 70 lineto
412.24 69 lineto
closepath
gsave eofill grestore
showpage
%%Page: 6 6
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 671.36(Display::to_pixels  and  Display::to_coord  convert  between  coordinates  and) 12 412 ws
16 657.62(pixels.   The  conversion  is  a  function  of  the  ) 17 231.582 ws
12 /Times-Italic sf
231.582 657.62(dpi) 3 246.918 as
12 /Times-Roman sf
246.918 657.62(  attribute,  which  is  75  by  default.) 12 412 ws
16 643.88(One  coordinate  unit  length  is  a  printer's  point,  defined  as  72/) 20 308.296 ws
12 /Times-Italic sf
308.296 643.88(dpi) 3 323.632 as
12 /Times-Roman sf
323.632 643.88(  pixels.) 2 358.3 ws
26.668 629.24(Display::set_screen  sets  the  current  screen  to  use  for  display  operations.) 18 412 ws
16 615.5(Initially,  current  screen  is  set  to  0.) 12 179.308 ws
26.668 600.86(Display::repair  calls  Window::repair  for  each  window  on  the  display  that  has) 20 412 ws
16 587.12(a  canvas  with  damage.   It  is  not  necessary  to  call  Display::repair  directly,  as) 25 412 ws
16 573.38(windows  will  automatically  be  repaired  before  blocking  for  input  events.) 18 365.944 ws
26.668 558.74(Display::flush  and  Display::sync  are  used  to  synchronize  with  the  window) 18 412 ws
16 545(system.   Display::flush  repairs  all  damaged  windows  on  the  display  and  ensures) 21 412 ws
16 531.26(that  any  pending  requests  have  been  sent  to  the  window  system.   Display::sync  is) 25 412 ws
16 517.52(the  same  as  Display::flush,  but  additionally  waits  for  an  acknowledgement  from) 20 412 ws
16 503.78(the  window  system.) 4 111.664 ws
26.668 489.14(Display::ring_bell  sounds  the  workstation's  bell  at  a  specified  volume.   The) 19 412 ws
16 475.4(parameter  should  be  between  0  and  100,  where  0  is  silent  and  100  is  the  loudest) 30 412 ws
16 461.66(possible  bell.) 2 79.336 ws
26.668 447.02(The  operations  set_key_click,  set_auto_repeat,  and  set_pointer_feedback) 10 412 ws
16 433.28(modify  the  key  click  volume,  the  flag  determining  whether  keys  should  repeat,) 22 412 ws
16 419.54(and  the  pointer  interpretation  parameters,  respectively.   Display::move_pointer) 13 412 ws
16 405.8(changes  the  position  of  the  input  pointer.   This  operation  can  have  surprising) 23 412 ws
16 392.06(effects  to  the  user  and  should  generally  be  avoided.) 16 262.276 ws
18 /Times-Bold sf
16 350.78(4.3) 3 38.5 as
46 350.78(Window) 6 111.016 as
12 /Times-Roman sf
16 318.38(The  base  class  window  is  abstract;  applications  do  not  instantiate  it  directly.) 22 412 ws
16 304.64(Two  subclasses   are  provided:   ManagedWindow,  for  defining  information  for  a) 20 412 ws
16 290.9(window  manager,  and  PopupWindow  for  windows  not  controlled  by  the  window) 20 412 ws
16 277.16(manager.   Popups  should  only  be  used  for  immediate  feedback,  such  as  for  popup) 25 412 ws
16 263.42(or  pulldown  menus.   ManagedWindow  is  also  an  abstract  class,  with  concrete) 21 412 ws
16 249.68(subclasses  provided  for  application,  icon,  top-level,  and  transient  windows.) 16 377.284 ws
26.668 235.04(Figure  4.4  shows  the  Window  base  class  interface.   Window::display  sets  or) 21 412 ws
16 221.3(gets  the  display  that  a  window  is  mapped  on  \(or  nil  if  the  window  is  not  currently) 32 412 ws
16 207.56(mapped\).   Window::canvas  returns  the  canvas  that  the  window  passes  to  its  glyph) 23 412 ws
16 193.82(for  drawing.   Window::double_buffered  sets  or  gets  the  flag  requesting  that) 19 412 ws
16 180.08(all  drawing  be  performed  into  an  off-screen  area  and  switched  to  the  screen) 24 412 ws
16 166.34(in  one  operation  instead  of  drawing  directly  onto  the  screen.   Windows  are) 23 412 ws
16 152.6(double-buffered  by  default.) 4 147.628 ws
26.668 137.96(Window::cursor  sets  or  gets  the  image  that  tracks  a  pointing  device's  position) 22 412 ws
16 124.22(when  the  it  is  inside  the  window.   Cursors  are  defined  by  two  bitmaps  and  a) 29 412 ws
16 110.48(``hot  spot''.   The  mask  bitmap  specifies  which  pixels  are  to  be  drawn,  and  the) 27 412 ws
16 96.7401(pattern  bitmap  specifies  which  pixels  are  in  foreground  color  and  which  are  in) 24 412 ws
16 83.0001(background  color.   The  hot  spot  specifies  the  location  of  the  pointing  device) 23 412 ws
16 69.26(relative  to  the  cursor's  lower-left  corner.   Figure  4.5  shows  the  Cursor  class) 23 412 ws
390.96 37.2(4-) 2 400.956 as
403.956 37.2(6) 1 409.956 as
showpage
%%Page: 7 7
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 192.6(interface.  A  cursor  can  be  created  from  specific  data,  pattern  and  mask  bitmaps,  a) 26 412 ws
16 178.86(character  in  a  font,  or  an  index  into  the  standard  cursor  information  for  the) 26 412 ws
16 165.12(target  window  system.   If  the  cursor  is  specified  with  bitmaps,  the  hot  spot  is  the) 29 412 ws
16 151.38(origin  of  the  pattern  bitmap;  if  specified  with  a  character,  it  is  the  origin  of  the) 30 412 ws
16 137.64(character's  bitmap  in  the  font.   An  index  implies  both  bitmaps  as  well  as  the  hot) 29 412 ws
16 123.9(spot.   Specific  values  for  the  index  are  usually  defined  in  an  include  file.   For) 28 412 ws
16 110.16(example,  standard  X11  cursors  are  defined  in  the  file  <X11/cursorfont.h>.) 18 372.124 ws
26.668 95.5199(Window::place  specifies  the  desired  screen  coordinates  for  a  window.) 16 412 ws
16 81.7799(Window::align  specifies  a  desired  alignment.   The  alignment  values  are  fractions) 19 412 ws
16 68.0399(that  indicate  where  the  window  should  appear  relative  to  its  coordinates  as) 22 412 ws
390.96 37.2(4-) 2 400.956 as
403.956 37.2(7) 1 409.956 as
newpath
16 676.78 moveto
16 677.78 lineto
412 677.78 lineto
412 676.78 lineto
closepath
gsave eofill grestore
37.336 660.22(class  Window  {) 4 113.752 ws
37.336 646.78(protected:) 10 85.324 as
48.004 633.34(Window\(Glyph*  =  nil\);) 4 162.1 ws
37.336 619.9(public:) 7 70.672 as
48.004 606.46(virtual  void  display\(Display*\);) 4 196 ws
48.004 593.02(virtual  Display*  display\(\)  const;) 6 202.996 ws
48.004 579.58(virtual  Canvas*  canvas\(\)  const;) 6 198.976 ws
48.004 566.14(virtual  void  double_buffered\(boolean\);) 4 235.3 ws
48.004 552.7(virtual  boolean  double_buffered\(\)  const;) 6 242.296 ws
48.004 539.26(virtual  void  cursor\(Cursor*\);) 4 186.652 ws
48.004 525.82(virtual  Cursor*  cursor\(\)  const;) 6 193.648 ws
48.004 498.94(virtual  void  place\(Coord  left,  Coord  bottom\);) 10 265.324 ws
48.004 485.5(virtual  void  align\(float  x,  float  y\);) 10 209.992 ws
48.004 472.06(virtual  Coord  left\(\)  const;) 6 170.992 ws
48.004 458.62(virtual  Coord  bottom\(\)  const;) 6 189.004 ws
48.004 445.18(virtual  Coord  width\(\)  const;) 6 182.332 ws
48.004 431.74(virtual  Coord  height\(\)  const;) 6 184.996 ws
48.004 404.86(virtual  void  map\(\);) 4 138.664 ws
48.004 391.42(virtual  void  unmap\(\);) 4 150.664 ws
48.004 377.98(virtual  void  raise\(\);) 4 140.656 ws
48.004 364.54(virtual  void  lower\(\);) 4 145.324 ws
48.004 351.1(virtual  void  move\(Coord  left,  Coord  bottom\);) 10 266.668 ws
48.004 337.66(virtual  void  resize\(\);) 4 145.984 ws
48.004 310.78(virtual  void  receive\(const  Event&\);) 6 218.308 ws
48.004 297.34(virtual  Handler*  target\(const  Event&\)  const;) 8 262.636 ws
48.004 283.9(virtual  void  grab_pointer\(Cursor*  =  nil\)  const;) 10 271.756 ws
48.004 270.46(virtual  void  ungrab_pointer\(\)  const;) 6 219.652 ws
48.004 257.02(virtual  void  repair\(\);) 4 145.984 ws
37.336 243.58(};  ) 2 49.432 ws
12 /Times-Roman sf
117.19 224.14(Figure  4.4:) 2 169.858 ws
180.526 224.14(Window  base  class  interface) 6 317.482 ws
newpath
16 213.96 moveto
16 214.96 lineto
412 214.96 lineto
412 213.96 lineto
closepath
gsave eofill grestore
showpage
%%Page: 8 8
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 405.72(specified  by  a  call  to  Window::place.   For  example,  an  alignment  of  0.0,1.0  means) 25 412 ws
16 391.98(the  placement  specifies  the  upper-left  corner  of  the  window.   An  alignment  of) 23 412 ws
16 378.24(0.5,0.5  means  the  placement  specifies  the  center  of  the  window.   Unless  specified,) 23 412 ws
16 364.5(the  alignment  will  be  0.0,0.0,  meaning  the  placement  coordinates  specify  the) 20 412 ws
16 350.76(lower-left  corner  of  the  window.) 8 172.288 ws
26.668 336.12(Window::map  requests  the  window  to  be  mapped  onto  the  screen.   If  no  display) 25 412 ws
16 322.38(has  been  set,  then  the  session  default  display  is  used.   Window::map  need  ) 25 381.481 ws
12 /Times-Italic sf
381.481 322.38(not) 3 396.817 as
12 /Times-Roman sf
396.817 322.38(  be) 2 412 ws
16 308.64(synchronous\261one  cannot  assume  the  window  is  usable  immediately  after  calling) 18 412 ws
16 294.9(map.   Window::unmap  requests  that  the  window  be  removed  from  the  screen.) 21 387.436 ws
26.668 280.26(Window::raise  and  Window::lower  control  the  stacking  order  of  a  window  on) 20 412 ws
16 266.52(the  screen.   Window::raise  makes  the  window  above  all  the  other  windows  on  the) 25 412 ws
16 252.78(screen;  Window::lower  make  the  window  below  all  the  others.   These  operations) 21 412 ws
16 239.04(usually  are  neither  necessary  nor  appropriate,  as  stacking  order  should  normally) 20 412 ws
16 225.3(be  under  control  of  the  user  through  a  window  manager.) 18 285.94 ws
26.668 210.66(The  window  systems  delivers  input  events  to  a  particular  window,  which  in  turn) 24 412 ws
16 196.92(tries  to  find  a  handler  to  process  each  event.   Window::receive  examines  an) 23 412 ws
16 183.18(event,  handling  window  maintenance  events  internally.   For  example,  X  expose) 19 412 ws
16 169.44(and  configure  events  are  handled  directly  by  Window::receive.   Window::target) 17 412 ws
16 155.7(determines  if  there  is  a  suitable  handler  for  an  event.) 18 267.94 ws
26.668 141.06(Window::grab_pointer  takes  control  of  pointer  input  events  for  the  display.) 18 412 ws
16 127.32(Other  applications  will  not  receive  pointer  events  until  Window::ungrab_pointer) 16 412 ws
16 113.58(is  called  to  release  control.   If  a  cursor  is  passed  to  Window::grab_pointer,  it  will) 27 412 ws
16 99.84(be  used  when  the  pointer  is  outside  the  window  during  the  grab.) 22 323.296 ws
26.668 85.2(If  any  part  of  a  window's  canvas  has  been  damaged,  Window::repair  will) 22 412 ws
16 71.46(call  draw  on  the  root  glyph  and  perform  the  necessary  screen  update  when) 24 412 ws
390.96 37.2(4-) 2 400.956 as
403.956 37.2(8) 1 409.956 as
newpath
16 674.86 moveto
16 675.86 lineto
412 675.86 lineto
412 674.86 lineto
closepath
gsave eofill grestore
37.336 658.3(class  Cursor  :  virtual  public  Resource  {) 12 226.408 ws
37.336 644.86(public:) 7 70.672 as
48.004 631.42(Cursor\() 7 84.664 as
58.672 617.98(short  x,  short  y,  const  int*  pattern,  const  int*  mask,) 18 304.336 ws
58.672 604.54(const  Color*  fg  =  nil,  const  Color*  bg  =  nil) 18 266.884 ws
48.004 591.1(\);) 2 55.336 as
48.004 577.66(Cursor\() 7 84.664 as
58.672 564.22(const  Bitmap*  pat,  const  Bitmap*  mask,) 10 253.012 ws
58.672 550.78(const  Color*  fg  =  nil,  const  Color*  bg  =  nil) 18 266.884 ws
48.004 537.34(\);) 2 55.336 as
48.004 523.9(Cursor\() 7 84.664 as
58.672 510.46(const  Font*,  int  pattern,  int  mask,) 10 220.012 ws
58.672 497.02(const  Color*  fg  =  nil,  const  Color*  bg  =  nil) 18 266.884 ws
48.004 483.58(\);) 2 55.336 as
48.004 470.14(Cursor\(int  index,  const  Color*  fg  =  nil,  const  Color*  bg  =  nil\);) 22 348.544 ws
37.336 456.7(};  ) 2 49.432 ws
12 /Times-Roman sf
133.684 437.26(Figure  4.5:) 2 186.352 ws
197.02 437.26(Cursor  class  interface) 4 300.988 ws
newpath
16 427.08 moveto
16 428.08 lineto
412 428.08 lineto
412 427.08 lineto
closepath
gsave eofill grestore
showpage
%%Page: 9 9
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(double-buffering.   All  windows  on  a  display  will  be  repaired  automatically) 19 412 ws
16 657.62(before  blocking  for  input  from  the  display,  so  applications  usually  need  not  call) 24 412 ws
16 643.88(Window::repair  directly.  ) 4 137.644 ws
14 /Times-Bold sf
16 617.48(4.3.1) 5 44 as
51 617.48(ManagedWindow) 13 157.568 as
12 /Times-Roman sf
16 597.04(A  managed  window  provides  operations  to  specify  information  for  a  window) 20 412 ws
16 583.3(manager  to  use.   ManagedWindow  is  an  abstract  base  class  with  four  predefined) 23 412 ws
16 569.56(descendants:  ApplicationWindow,  TopLevelWindow,  TransientWindow,  and) 8 412 ws
16 555.82(IconWindow.   An  application  should  create  one  application  window,  which  makes) 19 412 ws
16 542.08(information  about  command-line  arguments  available  to  a  session  manager,  if) 18 412 ws
16 528.34(present  on  the  system.   After  the  application  window,  normal  windows  are) 21 412 ws
16 514.6(top-level.   A  top-level  window  can  have  a  ``group  leader'',  which  is  typically  the) 25 412 ws
16 500.86(application  window.   A  window  manager  may  allow  quick  control  of  all  windows) 23 412 ws
16 487.12(with  the  same  group  leader,  such  as  when  iconifying  or  deiconifying.) 20 347.944 ws
26.668 472.48(A  transient  window  is  often  treated  specially  by  window  managers.   It  may  be) 25 412 ws
16 458.74(decorated  differently  \(or  not  at  all\),  or  automatically  unmapped  when  the  main) 22 412 ws
16 445(window  is  iconified.   Transient  windows  are  used  for  temporary  controls,  such  as) 23 412 ws
16 431.26(dialog  boxes,  but  not  for  unmanaged  windows  such  as  popups  or  pulldowns.   A) 25 412 ws
16 417.52(transient  is  usually  associated  with  another  managed  window.) 14 312.628 ws
26.668 402.88(An  icon  window  is  a  window  that  is  mapped  when  its  associated  window) 24 412 ws
16 389.14(is  iconified  and  unmapped  when  its  associated  window  is  deiconified.   Calling) 21 412 ws
16 375.4(Window::map  on  an  icon  window  will  therefore  bind  it  to  the  window  system,  but) 26 412 ws
16 361.66(will  not  map  it  on  the  screen.) 12 155.656 ws
26.668 347.02(Figure  4.6  shows  the  ManagedWindow  class  interface.  Most  of  the  operations) 20 412 ws
16 333.28(on  a  managed  window  set  or  return  information  associated  with  the  window.) 22 412 ws
16 319.54(ManagedWindow::geometry  sets  or  returns  the  desired  geometry  for  a  window.) 18 412 ws
16 305.8(Geometry  specifications  are  strings  of  the  form  ``WxH+X+Y''  where  W  is) 20 412 ws
16 292.06(the  width,  H  the  height,  X  the  left  corner,  and  Y  the  top  corner  of  the) 30 412 ws
16 278.32(window.   Either  the  position  or  the  size  may  be  omitted,  and  the  position  can) 27 412 ws
16 264.58(use  ``\261''  instead  of  ``+''  to  denote  distance  from  the  opposite  of  the  display) 26 412 ws
16 250.84(to  the  opposite  side  of  the  window.   For  example,  a  \261X  value  specifies  that) 27 412 ws
16 237.1(the  right  side  of  the  window  should  be  a  distance  of  X  from  the  right  edge) 30 412 ws
16 223.36(of  the  screen.   The  ManagedWindow::geometry  get  function   returns  nil  if) 20 412 ws
16 209.62(no  geometry  has  been  specified.   ManagedWindow::name  specifies  a  string) 17 412 ws
16 195.88(the  window  manager  is  expected  to  display  with  the  window,  typically  in  a) 24 412 ws
16 182.14(headline  bar.   ManagedWindow::icon_name  specifies  a  string  to  display  with) 17 412 ws
16 168.4(the  window  when  it  is  iconified.   ManagedWindow::icon_geometry  specifies  the) 17 412 ws
16 154.66(size  of  a  window's  icon,  using  the  same  format  as  ManagedWindow::geometry.) 20 412 ws
16 140.92(ManagedWindow::icon_bitmap  and  ManagedWindow::icon_mask  specify  two) 8 412 ws
16 127.18(bitmaps  to  use  to  draw  an  icon.   The  mask  defines  the  area  to  be  drawn  and  the) 33 412 ws
16 113.44(bitmap  defines  the  foreground  and  background  areas.   Pixels  that  correspond  to  a) 23 412 ws
16 99.7001(one  in  the  bitmap  and  a  one  in  the  mask  are  drawn  with  the  foreground  color.) 30 412 ws
16 85.9601(Pixels  that  correspond  to  a  zero  in  the  bitmap  and  a  one  in  the  mask  are  draw  with) 34 412 ws
16 72.2201(the  background  color.   Pixels  that  correspond  to  a  zero  in  the  mask  are  not  drawn.) 29 406.756 ws
390.96 37.2(4-) 2 400.956 as
403.956 37.2(9) 1 409.956 as
showpage
%%Page: 10 10
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 183(ManagedWindow::icon  specifies  a  second  window  to  map  when  the  first) 18 412 ws
16 169.26(window  is  iconified.   Using  a  window  as  an  icon  overrides  the  other  icon) 25 412 ws
16 155.52(information.   Therefore,  it  does  not  make  sense  to  use  ManagedWindow::icon  in) 21 412 ws
16 141.78(conjunction  with  icon_name,  icon_geometry,  icon_bitmap,  or  icon_mask.   An) 15 412 ws
16 128.04(icon  window  cannot  have  an  icon  window  or  icon  information.) 18 317.956 ws
26.668 113.4(ManagedWindow::iconic  specifies  the  initial  state  of  a  window.   If  iconic  is  true,) 23 412 ws
16 99.6599(mapping  a  window  will  actually  map  its  icon  instead.   ManagedWindow::iconic) 19 412 ws
16 85.9199(need  not  be  called  directly  by  an  application;  it  is  called  automatically  if  specified) 26 412 ws
16 72.1799(by  user  customization  information.) 6 183.988 ws
390.96 37.2(4-10) 4 412.956 as
newpath
16.96 667.18 moveto
16.96 668.18 lineto
412.96 668.18 lineto
412.96 667.18 lineto
closepath
gsave eofill grestore
38.296 650.62(class  ManagedWindow  :  public  Window  {) 10 243.028 ws
38.296 637.18(protected:) 10 86.284 as
48.964 623.74(ManagedWindow\(Glyph*\);) 22 182.272 as
38.296 610.3(public:) 7 71.632 as
48.964 596.86(virtual  void  geometry\(const  String&\);) 6 231.292 ws
48.964 583.42(virtual  void  geometry\(const  char*\);) 6 219.268 ws
48.964 569.98(virtual  const  String*  geometry\(\)  const;) 8 234.952 ws
48.964 556.54(virtual  void  name\(const  String&\);) 6 211.96 ws
48.964 543.1(virtual  void  name\(const  char*\);) 6 199.936 ws
48.964 529.66(virtual  const  String*  name\(\)  const;) 8 215.62 ws
48.964 516.22(virtual  void  icon_name\(const  String&\);) 6 238.624 ws
48.964 502.78(virtual  void  icon_name\(const  char*\);) 6 226.6 ws
48.964 489.34(virtual  const  String*  icon_name\(\)  const;) 8 242.284 ws
48.964 475.9(virtual  void  icon_geometry\(const  String&\);) 6 257.956 ws
48.964 462.46(virtual  void  icon_geometry\(const  char*\);) 6 245.932 ws
48.964 449.02(virtual  const  String*  icon_geometry\(\)  const;) 8 261.616 ws
48.964 435.58(virtual  void  icon_bitmap\(Bitmap*\);) 4 220.3 ws
48.964 422.14(virtual  Bitmap*  icon_bitmap\(\)  const;) 6 227.296 ws
48.964 408.7(virtual  void  icon_mask\(Bitmap*\);) 4 212.296 ws
48.964 395.26(virtual  Bitmap*  icon_mask\(\)  const;) 6 219.292 ws
48.964 368.38(virtual  void  icon\(Window*\);) 4 186.952 ws
48.964 354.94(virtual  Window*  icon\(\)  const;) 6 193.948 ws
48.964 328.06(virtual  void  iconic\(boolean\);) 4 186.28 ws
48.964 314.62(virtual  boolean  iconic\(\)  const;) 6 193.276 ws
48.964 301.18(virtual  void  iconify\(\);) 4 152.956 ws
48.964 287.74(virtual  void  deiconify\(\);) 4 164.284 ws
48.964 260.86(virtual  void  focus_event\(Handler*  in,  Handler*  out\);) 10 302.92 ws
48.964 247.42(virtual  void  wm_delete\(Handler*\);) 4 216.268 ws
38.296 233.98(};  ) 2 50.392 ws
12 /Times-Roman sf
107.986 214.54(Figure  4.6:) 2 160.654 ws
171.322 214.54(ManagedWindow  class  interface) 4 328.606 ws
newpath
16.96 204.36 moveto
16.96 205.36 lineto
412.96 205.36 lineto
412.96 204.36 lineto
closepath
gsave eofill grestore
showpage
%%Page: 11 11
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 315.48(ManagedWindow::iconify  requests  the  window  be  unmapped  and  the  window's) 16 412 ws
16 301.74(icon  be  mapped  to  the  screen.   ManagedWindow::deiconify  reverse  s  the) 19 412 ws
16 288(operation,  unmapping  the  icon  and  mapping  the  original  window.   It  does  not) 23 412 ws
16 274.26(make  sense  to  iconify  or  deiconify  an  icon  window.) 16 264.292 ws
26.668 259.62(ManagedWindow::focus_event  specifies  handlers  for  the  window  receiving  and) 14 412 ws
16 245.88(losing  keyboard  focus  from  the  window  manager.   ManagedWindow::wm_delete) 15 412 ws
16 232.14(specifies  a  handler  for  a  request  from  the  window  manager  to  delete  the  window.) 26 412 ws
16 218.4(If  the  handler  is  nil  \(which  is  the  initial  value\),  then  the  response  to  this  event  will) 32 412 ws
16 204.66(be  to  call  Session::quit.) 6 128.008 ws
26.668 190.02(Figure  4.7  shows  the  operations  on  the  ManagedWindow  subclasses.) 16 412 ws
16 176.28(ApplicationWindow  and  IconWindow  provide  no  additional  operations  beyond  a) 16 412 ws
16 162.54(constructor.   TopLevelWindow  provides  an  operation  to  set  or  return  its  group) 21 412 ws
16 148.8(leader.   TransientWindow  is  a  subclass  to  TopLevelWindow  that  can  additionally) 19 412 ws
16 135.06(be  associated  with  a  primary  window  with  TransientWindow::transient_for.  ) 16 382.948 ws
14 /Times-Bold sf
16 108.66(4.3.2) 5 44 as
51 108.66(PopupWindow) 11 140.474 as
12 /Times-Roman sf
16 88.2199(A  popup  window  is  mapped  directly  to  a  screen  without  window  manager) 22 412 ws
16 74.4799(interaction  \(or  knowledge\).   In  the  X   Window  System,  a  popup  window  will) 24 412 ws
16 60.7399(override  the  normal  redirection  of  map  requests  to  window  managers.   Popups  on) 23 412 ws
390.96 37.2(4-11) 4 412.956 as
newpath
16 678.7 moveto
16 679.7 lineto
412 679.7 lineto
412 678.7 lineto
closepath
gsave eofill grestore
37.336 662.14(class  ApplicationWindow  :  public  ManagedWindow  {) 10 298.732 ws
37.336 648.7(public:) 7 70.672 as
48.004 635.26(ApplicationWindow\(Glyph*\);) 26 193.324 as
37.336 621.82(};) 2 46.432 as
37.336 594.94(class  TopLevelWindow  :  public  ManagedWindow  {) 10 288.724 ws
37.336 581.5(public:) 7 70.672 as
48.004 568.06(TopLevelWindow\(Glyph*\);) 23 183.316 as
48.004 554.62(virtual  void  group_leader\(ManagedWindow*\);) 4 273.292 ws
48.004 541.18(virtual  ManagedWindow*  group_leader\(\)  const;) 6 280.288 ws
37.336 527.74(};) 2 46.432 as
37.336 500.86(class  TransientWindow  :  public  TopLevelWindow  {) 10 289.396 ws
37.336 487.42(public:) 7 70.672 as
48.004 473.98(TransientWindow\(Glyph*\);) 24 181.984 as
48.004 460.54(virtual  void  transient_for\(ManagedWindow*\);) 4 271.3 ws
48.004 447.1(virtual  void  ManagedWindow*  transient_for\(\)  const;) 8 302.632 ws
37.336 433.66(};) 2 46.432 as
37.336 406.78(class  IconWindow  :  public  ManagedWindow  {) 10 263.392 ws
37.336 393.34(public:) 7 70.672 as
48.004 379.9(IconWindow\(Glyph*\);) 19 157.984 as
37.336 366.46(};  ) 2 49.432 ws
12 /Times-Roman sf
116.182 347.02(Figure  4.7:) 2 168.85 ws
179.518 347.02(ManagedWindow  subclasses) 2 318.49 ws
newpath
16 336.84 moveto
16 337.84 lineto
412 337.84 lineto
412 336.84 lineto
closepath
gsave eofill grestore
showpage
%%Page: 12 12
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(X  also  will  request  that  the  pixels  under  the  popup  be  saved  to  avoid  a  subsequent) 30 412 ws
16 657.62(exposure  when  the  popup  is  unmapped.) 10 205.972 ws
26.668 642.98(Popups  should  only  be  used  for  temporary  windows,  such  as  popup  or  pulldown) 24 412 ws
16 629.24(menus.   Because  they  do  not  go  through  the  window  manager,  popups  should  be) 25 412 ws
16 615.5(placed  explicitly.   Here  is  an  example  of  using  a  popup  that  appears  below  a) 27 412 ws
16 601.76(menubar,  aligning  the  top  of  the  popup  to  the  lower  left  corner  of  the  menubar:) 28 394.936 ws
10 /Helvetica sf
32.66 583.28(void  pulldown\(Window*  menubar,  Glyph*  g\)  {) 10 231.62 ws
40.99 571.76(PopupWindow*  popup  =  new  PopupWindow\(g\);) 8 251.92 ws
49.32 560.24(popup->place\(menubar->left\(\),  menubar\(\)->bottom\(\)\);) 2 286.34 ws
49.32 548.72(popup->align\(0.0,  1.0\);) 2 150.21 ws
49.32 537.2(popup->map\(\);  ) 2 117.96 ws
32.66 525.68(}) 1 36 as
12 /Times-Roman sf
390.96 37.2(4-12) 4 412.956 as
showpage
%%Trailer
end restore
%%Pages: 12
%!PS-Adobe-2.0
%%Creator: ./ch5.doc
%%Pages: atend
%%EndComments
save 20 dict begin

/sf {   % scale /fontName => -  (set current font)
    {findfont} stopped {pop /Courier findfont} if
    exch scalefont setfont
} def

/ws {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 8#40 4 3 roll
    widthshow
} def

/as {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 3 2 roll
    ashow
} def

%%EndProlog
%%Page: 1 1
92 37.08 translate
0 0 0 setrgbcolor
24 /Times-Bold sf
16 662.72(Chapter  5) 2 119.32 ws
16 625.76(Input  Handling) 2 175.408 ws
12 /Times-Roman sf
16 597.44(This  chapter  describes  the  InterViews  mechanisms  for  processing  user  input.   An) 21 412 ws
12 /Times-Bold sf
16 583.7(event) 5 43.324 as
12 /Times-Roman sf
43.324 583.7(  is  an  object  that  represents  a  user  input  action,  such  as  pressing  a  mouse) 28 412 ws
16 569.96(button  or  a  keystroke.   Events  are  low-level  objects  that  application  code  should) 23 412 ws
16 556.22(rarely  need  to  access  directly.   A  ) 13 191.733 ws
12 /Times-Bold sf
191.733 556.22(handler) 7 231.741 as
12 /Times-Roman sf
231.741 556.22(  is  an  object  that  processes  events.) 12 412 ws
16 542.48(A  ) 2 30.3218 ws
12 /Times-Bold sf
30.3218 542.48(listener) 8 68.3138 as
12 /Times-Roman sf
68.3138 542.48(  is  a  glyph  that  defines  a  mapping  from  events  to  handlers.   Input) 25 412 ws
16 528.74(events  can  also  be  ) 8 109.329 ws
12 /Times-Italic sf
109.329 528.74(grabbed) 7 149.325 as
12 /Times-Roman sf
149.325 528.74(  by  a  handler,  meaning  the  handler  will  get  all  events) 20 412 ws
16 515(regardless  of  the  input  pointer  position.) 10 204.652 ws
18 /Times-Bold sf
16 473.72(5.1) 3 38.5 as
46 473.72(Events) 6 98.002 as
12 /Times-Roman sf
16 441.32(The  event  class  interface  is  shown  in  Figure  5.1.   Input  events  arrive  in  a  single) 29 412 ws
16 427.58(stream  \(per  display\)  to  an  application.   EventType  is  the  kind  of  event  \(mouse) 25 412 ws
16 413.84(motion,  button  down,  etc.\).   InterViews  receives  all  window  system  events,  but) 21 412 ws
16 400.1(only  defines  specific  event  types  for  device  input.   Other  events  have  the  type) 25 412 ws
16 386.36(Event::other_event) 18 107.32 as
10 /Helvetica sf
107.32 386.36(.) 1 110.1 as
12 /Times-Roman sf
110.1 386.36(   EventButton  is  the  number  of  a  button  on  a  pointing  device,) 23 412 ws
16 372.62(where  Event::any  refers  to  any  one  of  the  buttons.) 16 255.616 ws
26.668 357.98(Event::display  returns  the  display  that  sent  the  event.   Event::pending  tests  if) 21 412 ws
16 344.24(more  events  are  waiting  to  be  read  from  the  display.   Event::read  gets  the  next) 27 412 ws
16 330.5(event  from  the  display,  blocking  if  none  are  pending.   Event::read  can  also  be) 25 412 ws
16 316.76(passed  a  timeout,  specified  in  seconds  and  microseconds.   If  no  event  arrives) 23 412 ws
16 303.02(before  the  timeout,  then  Event::read  returns  false.   Event::unread  puts  the  event  at) 23 412 ws
16 289.28(the  front  of   the  input  queue  for  the  display.   Event::poll  does  not  read  an  event,  but) 32 412 ws
16 275.54(fills  the  event  with  the  current  state  of  the  pointer  and  modifier  keys.   Applications) 27 412 ws
16 261.8(do  not  need  to  use  these  event  reading  operations  if  they  use  a  session.) 26 353.944 ws
26.668 247.16(Event::handler  returns  a  handler  for  the  event.   If  the  target  window  for  the  event) 27 412 ws
16 233.42(is  known,  then  Event::handler  calls  Window::target  to  determine  the  handler.) 18 412 ws
16 219.68(Otherwise,  Event::handler  returns  nil.   A  handler  may  also  \252grab\272  input  events  by) 23 412 ws
16 205.94(calling  Event::grab.   More  than  one  handler  may  grab  at  a  time,  making  a  list) 27 412 ws
16 192.2(of  grabbers  ordered  from  most  recent  to  oldest  grab.   Event::ungrab  removes) 21 412 ws
16 178.46(a  handler  from  the  list.   Event::grabber  returns  the  first  grabber  in  the  list.) 25 412 ws
16 164.72(Event::is_grabbing  tests  whether  the  given  handler  is  on  the  list.) 18 323.98 ws
26.668 150.08(Event::handle  processes  an  event  by  first  checking  if  any  the  grabbers  in  order) 24 412 ws
16 136.34(to  see  if  one  will  handle  the  event.   If  there  are  no  grabbers  or  none  handle  the) 33 412 ws
16 122.6(event,  then  Event::handle  calls  Event::handler  to  find  a  handler  and  passes  the) 22 412 ws
16 108.86(even  t  to  the  handler  if  one  is  found.) 16 189.64 ws
26.668 94.22(Event::time  returns  a  timestamp  in  milliseconds  for  the  event.   Event::pointer_x) 19 412 ws
16 80.48(and  Event::pointer_y  return  the  pointer  location  for  the  event  in  coordinates) 20 412 ws
16 66.74(relative  to  the  lower-left  corner  of  the  window.   Pointer  locations  are  defined) 23 412 ws
393.52 37.04(5-) 2 403.516 as
406.516 37.04(1) 1 412.516 as
showpage
%%Page: 2 2
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 152.28(for  motion,  button,  and  keyboard  events.   Event::pointer_button  returns  the) 17 412 ws
16 138.54(EventButton  for  a  down  or  up  event,  Event::none  for  all  other  events.) 22 412 ws
16 124.8(Event::) 7 50.668 as
12 /Times-Italic sf
50.668 124.8(modifier) 8 91.336 as
12 /Times-Roman sf
91.336 124.8(_is_down  returns  whether  the  ) 8 241.855 ws
12 /Times-Italic sf
241.855 124.8(modifier) 8 282.523 as
12 /Times-Roman sf
282.523 124.8(  key  was  down  before  the) 10 412 ws
16 111.06(event  occurred.) 2 89.968 ws
26.668 96.42(Event::keycode  returns  the  code  associated  with  a  keystroke.   Key  codes  are) 21 412 ws
16 82.68(potentially  platform-specific  and  should  be  avoided.   Event::mapkey  finds  the) 17 412 ws
16 68.94(string  binding  for  a  given  key.   Event::mapkey  is  passed  a  buffer  for  the  result  and) 29 412 ws
393.52 37.04(5-) 2 403.516 as
406.516 37.04(2) 1 412.516 as
newpath
17.68 675.34 moveto
17.68 676.34 lineto
413.68 676.34 lineto
413.68 675.34 lineto
closepath
gsave eofill grestore
39.016 658.78(typedef  unsigned  int  EventType;) 6 196 ws
39.016 645.34(typedef  unsigned  int  EventButton;) 6 204.016 ws
39.016 625.9(class  Event  {) 4 102.1 ws
39.016 612.46(public:) 7 72.352 as
49.684 599.02(enum  {  undefined,  motion,  down,  up,  key,  other_event  };) 16 324.844 ws
49.684 585.58(enum  {  none,  any,  left,  middle,  right,  other_button  };) 16 304.192 ws
49.684 566.14(virtual  Display*  display\(\)  const;) 6 204.676 ws
49.684 552.7(virtual  boolean  pending\(\);) 4 175 ws
49.684 539.26(virtual  void  read\(\);) 4 140.332 ws
49.684 525.82(virtual  boolean  read\(long  sec,  long  usec\);) 10 248.308 ws
49.684 512.38(virtual  void  unread\(\);) 4 152.332 ws
49.684 498.94(virtual  void  poll\(\);) 4 138.352 ws
49.684 472.06(virtual  Handler*  handler\(\);) 4 178.984 ws
49.684 458.62(virtual  void  grab\(Handler*\);) 4 185.656 ws
49.684 445.18(virtual  void  ungrab\(Handler*\);) 4 197.656 ws
49.684 431.74(virtual  boolean  is_grabbing\(Handler*\);) 4 237.652 ws
49.684 418.3(virtual  void  handler\(\);) 4 155.668 ws
49.684 391.42(virtual  EventType  type\(\);  const;) 6 203.332 ws
49.684 377.98(virtual  unsigned  long  time\(\)  const;) 8 215.68 ws
49.684 364.54(virtual  Coord  pointer_x\(\)  const;) 6 202.672 ws
49.684 351.1(virtual  Coord  pointer_y\(\)  const;) 6 202.672 ws
49.684 337.66(virtual  EventButton  pointer_button\(\)  const;) 6 258.016 ws
49.684 324.22(virtual  boolean  control_is_down\(\)  const;) 6 245.332 ws
49.684 310.78(virtual  boolean  meta_is_down\(\)  const;) 6 234.664 ws
49.684 297.34(virtual  boolean  shift_is_down\(\)  const;) 6 232.672 ws
49.684 283.9(virtual  boolean  capslock_is_down\(\)  const;) 6 253.324 ws
49.684 270.46(virtual  boolean  left_is_down\(\)  const;) 6 227.332 ws
49.684 257.02(virtual  boolean  middle_is_down\(\)  const;) 6 244.672 ws
49.684 243.58(virtual  boolean  right_is_down\(\)  const;) 6 234.004 ws
49.684 230.14(virtual  unsigned  char  keycode\(\)  const;) 8 233.644 ws
49.684 216.7(virtual  unsigned  int  mapkey\(char*,  unsigned  int  len\)  const;) 14 332.992 ws
39.016 203.26(};) 2 48.112 as
12 /Times-Roman sf
137.698 183.82(Figure  5.1:) 2 190.366 ws
201.034 183.82(Event  class  interface) 4 300.334 ws
newpath
17.68 173.64 moveto
17.68 174.64 lineto
413.68 174.64 lineto
413.68 173.64 lineto
closepath
gsave eofill grestore
showpage
%%Page: 3 3
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 406.2(the  size  of  the  buffer;  it  returns  the  number  of  characters  in  the  translated  string.   If) 31 412 ws
16 392.46(the  event  is  not  a  key  event,  Event::mapkey  returns  -1.) 18 277.624 ws
18 /Times-Bold sf
16 351.18(5.2) 3 38.5 as
46 351.18(Handlers) 8 117.01 as
12 /Times-Roman sf
16 318.78(A  handler  is  an  object  that  is  passed  an  event  to  process.   Handler::event  is  a  pure) 31 412 ws
16 305.04(virtual  function\261subclasses  must  define  an  implementation.   Handlers  typically) 15 412 ws
16 291.3(translate  raw  events  into  abstract  events.   A  ) 15 228.225 ws
12 /Times-Bold sf
228.225 291.3(pointer-handler) 15 309.561 as
12 /Times-Roman sf
309.561 291.3(  is  a  handler  subclass) 8 412 ws
16 277.56(that  translates  pointer  events  into  function  calls.   Figure  5.2  shows  the  class) 23 412 ws
16 263.82(interfaces  to  handler  and  pointer-handler.) 8 214.276 ws
26.668 249.18(PointerHandler::sense  is  called  when  the  handler  first  receives  a  motion  event.) 20 412 ws
16 235.44(PointerHandler::press  is  called  when  a  button  is  pressed.   A  pointer-handler  grabs) 21 412 ws
16 221.7(input  events  while  a  button  is  pressed.   PointerHandler::drag  is  called  when) 21 412 ws
16 207.96(the  pointer  moves  while  a  button  is  pressed.   PointerHandler::release   is  called) 22 412 ws
16 194.22(when  the  button  is  released.   Normally,  PointerHandler::commit  is  called  after) 19 412 ws
16 180.48(the  button  is  released.   However,  if  a  second  button  is  pressed  during  dragging,) 25 412 ws
16 166.74(PointerHandler::abort  will  be  called  instead  of  commit.) 12 280.972 ws
18 /Times-Bold sf
16 125.46(5.3) 3 38.5 as
46 125.46(Listeners) 9 116.992 as
12 /Times-Roman sf
16 93.0601(A  listener  is  a  glyph  that  is  sensitive  to  input.   A  listener  is  a  monoglyph  with  a) 33 412 ws
16 79.3201(handler  that  is  hit  when  the  listener's  body  is  hit  with  an  event  of  interest.) 28 412 ws
16 65.5801(Figure  5.3  shows  the  listener  class  interface.   Listener::motion,  Listener::key,) 17 412 ws
393.52 37.04(5-) 2 403.516 as
406.516 37.04(3) 1 412.516 as
newpath
16.7199 675.34 moveto
16.7199 676.34 lineto
412.72 676.34 lineto
412.72 675.34 lineto
closepath
gsave eofill grestore
38.0559 658.78(class  Handler  :  virtual  public  Resource  {) 12 233.116 ws
38.0559 645.34(public:) 7 71.3919 as
48.7239 631.9(virtual  void  event\(Event&\)  =  0;) 8 200.812 ws
38.0559 618.46(};) 2 47.1519 as
38.0559 591.58(class  PointerHandler:  public  Handler  {) 8 224.452 ws
38.0559 578.14(protected:) 10 86.0439 as
48.7239 564.7(PointerHandler\(\);) 17 133.372 as
38.0559 551.26(public:) 7 71.3919 as
48.7239 537.82(virtual  void  sense\(Event&\)) 4 178.708 ws
48.7239 524.38(virtual  void  press\(Event&\);) 4 180.712 ws
48.7239 510.94(virtual  void  drag\(Event&\);) 4 177.376 ws
48.7239 497.5(virtual  void  release\(Event&\);) 4 189.364 ws
48.7239 484.06(virtual  void  commit\(Event&\);) 4 192.724 ws
48.7239 470.62(virtual  void  abort\(Event&\);) 4 180.712 ws
38.0559 457.18(};) 2 47.1519 as
12 /Times-Roman sf
148.9 437.74(Figure  5.2:) 2 201.568 ws
212.236 437.74(Handler  classes) 2 287.212 ws
newpath
16.7199 427.56 moveto
16.7199 428.56 lineto
412.72 428.56 lineto
412.72 427.56 lineto
closepath
gsave eofill grestore
showpage
%%Page: 4 4
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 456.12(and  Listener::button  specify  or  return  which  types  of  events  should  be  handled.) 22 412 ws
16 442.38(Listener::caught  tests  whether  the  given  event  is  of  interest.   Listener::pick) 19 412 ws
16 428.64(associates  the  handler  with  the  hit  parameter  if  the  listener's  body  is  hit.) 24 360.952 ws
26.668 414(To  see  how  handlers  and  listeners  can  work,  we  consider  how  buttons  are) 24 412 ws
16 400.26(implemented.   The  button  class  is  derived  from  MonoGlyph  and  PointerHandler) 19 412 ws
16 386.52(because  it  is  both  a  glyph  and  an  event  handler  \(though  it  is  straightforward  to) 28 412 ws
16 372.78(achieve  the  same  functionality  with  using  single  inheritance\).   A  button  is  defined) 23 412 ws
16 359.04(by  an  action  to  perform  when  the  button  is  released  and  a  telltale,  which  is  a  glyph) 32 412 ws
16 345.3(with  several  drawing  states  \(highlighted,  chosen,  disbled,  etc.\).) 14 317.956 ws
26.668 330.66(Figure   5.4  shows  the  implementation  of  the  Button  operations.   The  constructor) 22 412 ws
16 316.92(creates  a  listener  around  the  telltale  and  makes  the  listener  be  the  body  of  the) 28 412 ws
16 303.18(button.   The  listener  will  catch  all  pointer  motion  and  button  events.   The  button) 26 412 ws
16 289.44(passes  itself  to  the  listener  as  the  handler  for  the  events.) 20 282.952 ws
26.668 274.8(Button::drag  overrides  PointerHandler::drag  and  highlights  the  telltale  if  the) 16 412 ws
16 261.06(pointer  location  is  inside  the  button's  extension  \(retained  by  the  button  when  it  is) 26 412 ws
16 247.32(drawn\).   Because  PointerHandler::press  calls  drag  to  begin  dragging,  there  is  no) 21 412 ws
16 233.58(need  to  define  a  Button::press.   Button::release  extends  PointerHandler::release) 15 412 ws
16 219.84(by  first  turning  off  highlighting  on  the  telltale.   Button::commit  executes  the) 21 412 ws
16 206.1(action  if  the  release  event  occurred  within  the  button's  extension.   Because) 21 412 ws
16 192.36(PointerHandler::release  will  call  commit  \(or  abort\),  the  effect  of  Button::release) 18 412 ws
16 178.62(calling  PointerHandler::release  last  is  that  the  telltale  will  change  appearance) 18 412 ws
16 164.88(before  the  action  is  executed.) 8 156.292 ws
26.668 150.24(Using  monoglyphs,  listeners,  and  handlers  allows  one  to  separate  input  and) 20 412 ws
16 136.5(output  objects  very  cleanly,  and  thus  simplifies  the  construction  of  new) 20 412 ws
16 122.76(components  from  existing  parts.   For  example,  a  button  that  displays  a  raster) 23 412 ws
16 109.02(image  does  not  require  a  new  button  subclass.   One  can  simply  pass  an  image) 27 412 ws
16 95.2799(glyph  to  the  existing  button  constructor.) 10 208 ws
393.52 37.04(5-) 2 403.516 as
406.516 37.04(4) 1 412.516 as
newpath
17.68 671.5 moveto
17.68 672.5 lineto
413.68 672.5 lineto
413.68 671.5 lineto
closepath
gsave eofill grestore
39.016 654.94(class  Listener  :  public  MonoGlyph  {) 10 214.432 ws
39.016 641.5(public:) 7 72.352 as
49.684 628.06(Listener\(Glyph*,  Handler*\);) 2 186.988 ws
49.684 614.62(virtual  void  motion\(boolean\);) 4 191.68 ws
49.684 601.18(virtual  boolean  motion\(\)  const;) 6 198.676 ws
49.684 587.74(virtual  void  key\(boolean\);) 4 175 ws
49.684 574.3(virtual  boolean  key\(\)  const;) 6 181.996 ws
49.684 560.86(virtual  void  button\(boolean,  EventButton  =  Event::any\);) 10 319.78 ws
49.684 547.42(virtual  boolean  button\(EventButton  =  Event::any\)  const;) 10 320.776 ws
49.684 533.98(virtual  boolean  caught\(Event&\)  const;) 6 233.992 ws
49.684 520.54(virtual  boolean  pick\(Canvas*,  const  Allocation&,  int  depth,  Hit&\);) 14 371.668 ws
39.016 507.1(};) 2 48.112 as
12 /Times-Roman sf
132.034 487.66(Figure  5.3:) 2 184.702 ws
195.37 487.66(Listener  class  interface) 4 305.998 ws
newpath
17.68 477.48 moveto
17.68 478.48 lineto
413.68 478.48 lineto
413.68 477.48 lineto
closepath
gsave eofill grestore
showpage
%%Page: 5 5
92 37.08 translate
0 0 0 setrgbcolor
18 /Times-Bold sf
16 275.64(5.4) 3 38.5 as
46 275.64(Targets) 7 104.986 as
12 /Times-Roman sf
16 243.24(A  ) 2 30.0243 ws
12 /Times-Bold sf
30.0243 243.24(target) 6 60.6723 as
12 /Times-Roman sf
60.6723 243.24(  controls  the  behavior  of  picking  on  its  body.   A  target  is  useful  for) 27 412 ws
16 229.5(defining  a  pick  area  that  is  not  identical  to  the  underlying  object.   For  example,  if) 29 412 ws
16 215.76(one  wanted  to  pick  in  a  line  of  characters  then  one  might  wish  to  interpret  the  pick) 32 412 ws
16 202.02(based  on  the  line  height  instead  of  the  heights  of  the  individual  characters.   So,  a) 29 412 ws
16 188.28(pick  lower  than  the  top  of  the  ``h''  in  ``the''  but  above  the  ``e''  will  not  miss.) 32 388.264 ws
26.668 173.64(Figure  5.5  shows  the  target  class  interface.   The  target  behavior  is  controlled  by) 25 412 ws
16 159.9(the  sensitivity  parameter  to  the  constructor.   Target::primitive_hit  means  the  body) 19 412 ws
16 146.16(is  hit  if  the  pick  region  intersects  the  target's  allocation.   Target::character_hit) 21 412 ws
16 132.42(means  the  body  is  hit  if  the  area  intersects  the  target's  allocation  in  the  X) 28 412 ws
16 118.68(dimension.) 10 69.004 as
393.52 37.04(5-) 2 403.516 as
406.516 37.04(5) 1 412.516 as
newpath
16.24 674.14 moveto
16.24 675.14 lineto
412.24 675.14 lineto
412.24 674.14 lineto
closepath
gsave eofill grestore
37.576 657.58(Button::Button\(Action*  a,  Telltale*  t\)  :) 8 225.916 ws
48.244 644.14(MonoGlyph\(nil\),  PointerHandler\(\)) 2 214.888 ws
37.576 630.7({) 1 43.336 as
48.244 617.26(action_  =  a;) 4 105.004 ws
48.244 603.82(Resource::ref\(action_\);) 23 159.544 as
48.244 590.38(telltale_  =  t;) 4 106.348 ws
48.244 576.94(Resource::ref\(telltale_\);) 25 162.88 as
48.244 563.5(listener_  =  new  Listener\(telltale_,  this\);) 8 237.988 ws
48.244 550.06(listener_->button\(true,  Event::any\);) 2 218.992 ws
48.244 536.62(listener_->motion\(true\);) 24 164.332 as
48.244 523.18(body\(listener_\);) 16 124.9 as
37.576 509.74(}) 1 43.336 as
37.576 490.3(void  Button::drag\(Event&  e\)  {) 6 184.996 ws
48.244 476.86(telltale_->highlight\(inside\(e.pointer_x\(\),  e.pointer_y\(\)\)\);) 2 319.636 ws
37.576 463.42(}) 1 43.336 as
37.576 443.98(void  Button::release\(Event&  e\)  {) 6 196.984 ws
48.244 430.54(telltale_->highlight\(false\);) 28 175 as
48.244 417.1(PointerHandler::release\(e\);) 27 178.204 as
37.576 403.66(}) 1 43.336 as
37.576 384.22(void  Button::commit\(Event&  e\)  {) 6 200.344 ws
48.244 370.78(if  \(action_  !=  nil  &&  inside\(e.pointer_x\(\),  e.pointer_y\(\)\)\)  {) 14 332.056 ws
58.912 357.34(action_->execute\(\);) 19 152.98 as
48.244 343.9(}) 1 54.004 as
37.576 330.46(}) 1 43.336 as
12 /Times-Roman sf
128.902 311.02(Figure  5.4:) 2 181.57 ws
192.238 311.02(Button  implementation.) 2 306.25 ws
newpath
16.24 300.84 moveto
16.24 301.84 lineto
412.24 301.84 lineto
412.24 300.84 lineto
closepath
gsave eofill grestore
showpage
%%Page: 6 6
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
393.52 37.04(5-) 2 403.516 as
406.516 37.04(6) 1 412.516 as
newpath
15.76 665.74 moveto
15.76 666.74 lineto
411.76 666.74 lineto
411.76 665.74 lineto
closepath
gsave eofill grestore
37.096 649.18(enum  TargetSensitivity  {) 4 158.188 ws
47.764 635.74(TargetPrimitiveHit,) 19 142.096 as
47.764 622.3(TargetCharacterHit) 18 141.064 as
37.096 608.86(};) 2 46.192 as
37.096 589.42(class  Target  :  public  MonoGlyph  {) 10 204.508 ws
37.096 575.98(public:) 7 70.432 as
47.764 562.54(Target\(Glyph*  body,  TargetSensitivity\);) 4 242.08 ws
37.096 549.1(};) 2 46.192 as
12 /Times-Roman sf
134.116 529.66(Figure  5.5:) 2 186.784 ws
197.452 529.66(Target  class  interface) 4 300.076 ws
newpath
15.76 519.48 moveto
15.76 520.48 lineto
411.76 520.48 lineto
411.76 519.48 lineto
closepath
gsave eofill grestore
showpage
%%Trailer
end restore
%%Pages: 6
%!PS-Adobe-2.0
%%Creator: ./ch6.doc
%%Pages: atend
%%EndComments
save 20 dict begin

/sf {   % scale /fontName => -  (set current font)
    {findfont} stopped {pop /Courier findfont} if
    exch scalefont setfont
} def

/ws {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 8#40 4 3 roll
    widthshow
} def

/as {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 3 2 roll
    ashow
} def

%%EndProlog
%%Page: 1 1
92 37.08 translate
0 0 0 setrgbcolor
24 /Times-Bold sf
16 662.72(Chapter  6) 2 119.32 ws
16 625.76(Styles) 6 76 as
12 /Times-Roman sf
16 597.44(User  interface  toolkits  traditionally  have  coupled  the  management  of  style) 18 412 ws
16 583.7(attributes  such  as  color  and  font  with  the  composition  of  objects  in  a  window.) 26 412 ws
16 569.96(This  coupling  is  too  rigid  and  inefficient  for  many  applications  because   attributes) 23 412 ws
16 556.22(are  ) 2 36.6217 ws
12 /Times-Italic sf
36.6217 556.22(logical) 7 69.9577 as
12 /Times-Roman sf
69.9577 556.22(  information,  whereas  composition  is  a  ) 12 277.424 ws
12 /Times-Italic sf
277.424 556.22(physical) 8 317.42 as
12 /Times-Roman sf
317.42 556.22(  organization.   For) 5 412 ws
16 542.48(example,  a  document  logically  contains  text  and  graphics  organized  into  chapters,) 20 412 ws
16 528.74(sections,  subsections,  and  paragraphs.   Physically,  the  document  contains  lines,) 17 412 ws
16 515(columns,  and  pages.   The  font  of  a  string  of  characters  in  the  document  is) 27 412 ws
16 501.26(independent  of  whether  there  is  a  line  break  within  the  string  or  not,  thus  the  style) 30 412 ws
16 487.52(information  is  orthogonal  to  the  layout.) 10 204.664 ws
26.668 472.88(InterViews  provides  a  ) 6 142.381 ws
12 /Times-Bold sf
142.381 472.88(style) 5 165.709 as
12 /Times-Roman sf
165.709 472.88(  class  for  organizing  user  interface  attributes.   A) 15 412 ws
16 459.14(style  is  similar  to  an  ) 10 127.22 ws
12 /Times-Italic sf
127.22 459.14(environment) 11 187.208 as
12 /Times-Roman sf
187.208 459.14(  in  a  text  formatting  system  such  as  Scribe.) 16 412 ws
16 445.4(Styles  may  be  nested  hierarchically,  and  attributes  defined  in  an  outer  style  are) 24 412 ws
16 431.66(visible  in  an  inner  style  if  not  otherwise  defined.   A  style  consists  of  an  optional) 29 412 ws
16 417.92(name,  an  optional  list  of  prefixes  for  wildcard-matching,  a  collection  of  attributes) 22 412 ws
16 404.18(\(name-value  pairs\),  a  collection  of  styles  nested  inside  the  style,  and  a  parent  style.) 26 412 ws
18 /Times-Bold sf
16 362.9(6.1) 3 38.5 as
46 362.9(Defining  a  style) 4 164.998 ws
12 /Times-Roman sf
16 330.5(Figure  6.1  shows  the  style  class  operations  for  creating  and  accessing  simple) 22 412 ws
16 316.76(style  information.   When  a  style  is  created,  its  name  and  parent  style  may  be) 27 412 ws
16 303.02(specified.   The  default  parent  style  is  nil.   Style::name  sets  or  gets  the  style's) 26 412 ws
16 289.28(name.   Style::parent  gets  the  style's  parent.   The  parent  cannot  be  set  directly,  but) 26 412 ws
16 275.54(can  be  changed  by  appending  the  style  to  its  \(new\)  parent.) 20 294.94 ws
26.668 260.9(Style::append  and  Style::remove  add  and  delete  a  style  from  the  list  of  styles) 24 412 ws
16 247.16(nested  inside  another  style.   Style::children  returns  the  number  of  nested  styles.) 21 412 ws
16 233.42(Style::child  returns  the  indexed  child  in  the  list.   Style::find_style  returns  the) 21 412 ws
16 219.68(nested  style  with  the  given  name  or  nil  if  there  is  none.) 22 279.304 ws
26.668 205.04(Style::attribute  adds  a  <) 6 142.876 ws
12 /Times-Italic sf
142.876 205.04(name,value) 10 197.86 as
12 /Times-Roman sf
197.86 205.04(>  pair  to  the  list  of  attributes  in  the  style.   If) 21 412 ws
16 191.3(an  attribute  is  already  defined  with  the  name,  the  value  will  be  updated  unless) 26 412 ws
16 177.56(the  specified  priority  is  lower  than  the  already-defined  priority  of  the  attribute) 22 412 ws
16 163.82(Style::remove_attribute  deletes  the  named  attribute  from  the  style's  attribute  list.) 18 412 ws
16 150.08(Style::attributes  and  the  get  form  of  Style::attribute  can  be  used  to  retrieve  all  the) 26 412 ws
16 136.34(attributes   defined  on  a  style.   The  order  of  the  list  is  arbitrary.) 24 311.284 ws
18 /Times-Bold sf
16 95.0601(6.2) 3 38.5 as
46 95.0601(Finding  an  attribute) 4 202.024 ws
12 /Times-Roman sf
16 62.6601(The  style  class  provides  two  overloaded  functions  for  finding  an  attribute  value) 22 412 ws
394.8 38.16(6-) 2 404.796 as
407.796 38.16(1) 1 413.796 as
showpage
%%Page: 2 2
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 290.76(given  the  name.   Style::find_attribute  takes  two  parameters  and  returns  a  boolean) 21 412 ws
16 277.02(value  that  is  true  if  the  attribute  is  found  and  false  otherwise.   The  first  parameter) 29 412 ws
16 263.28(is  the  desired  name,  which  can  either  be  passed  as  a  String  object  or  a  ) 30 386.668 ws
12 /Times-Italic sf
386.668 263.28(const) 5 412 as
16 249.54(char*) 5 43.996 as
12 /Times-Roman sf
43.996 249.54(.   The  second  parameter  is  a  reference  to  where  the  value  of  the  attribute) 27 412 ws
16 235.8(should  be  stored  if  found.   If  the  parameter  is  a  string,  then  the  value  is  simply) 31 412 ws
16 222.06(copied  directly.   If  it  is  a  long  or  double,  then  value  string  is  converted  to  a) 31 412 ws
16 208.32(number.   If  the  result  parameter  is  a  Coord,  then  the  value  string  is  converted  to  a) 31 412 ws
16 194.58(number  and  multiplied  by  the  units  specified  in  the  value  string  after  the  number.) 26 412 ws
16 180.84(The  unit  specification  can  be  \252in\272  for  inches,  \252em\272  for  the  width  in  points  of  the) 30 412 ws
16 167.1(character  \252m\272  in  the  style's  font,  and  \252pt\272  for  points.) 18 268.276 ws
26.668 152.46(The  other  function  for  finding  an  attribute  is  Style::value_is_on.   This  function) 21 412 ws
16 138.72(is  equivalent  to  calling  Style::find_attribute  and  testing  if  the  value  string  is  \252on\272) 24 412 ws
16 124.98(or  \252true\272.   The  test  is  case-insensitive.) 11 197.128 ws
26.668 110.34(The  style  class  also  provides  predefined  functions  for  retrieving  common) 18 412 ws
16 96.6(attributes  and  caches  the  converted  values.   Style::font  returns  the  font  object) 21 412 ws
16 82.86(for  the  \252font\272  attribute.   Style::foreground  returns  the  color  object  for  the) 21 412 ws
16 69.12(\252foreground\272  attribute.   Style::background  returns  the  color  object  for  the) 17 412 ws
394.8 38.16(6-) 2 404.796 as
407.796 38.16(2) 1 413.796 as
newpath
17.2 664.54 moveto
17.2 665.54 lineto
413.2 665.54 lineto
413.2 664.54 lineto
closepath
gsave eofill grestore
38.536 647.98(class  Style  :  virtual  public  Resource  {) 12 219.616 ws
38.536 634.54(public:) 7 71.872 as
49.204 621.1(Style\(\);) 8 85.204 as
49.204 607.66(Style\(const  String&  name\);) 4 181.204 ws
49.204 594.22(Style\(Style*  parent\);) 2 148.864 ws
49.204 580.78(Style\(const  String&  name,  Style*  parent\);) 8 250.864 ws
49.204 561.34(virtual  void  name\(const  String&\);) 6 212.2 ws
49.204 547.9(virtual  const  String&  name\(\)  const;) 8 219.196 ws
49.204 534.46(virtual  Style*  parent\(\)  const;) 6 186.856 ws
49.204 515.02(virtual  void  append\(Style*\);) 4 184.528 ws
49.204 501.58(virtual  void  remove\(Style*\);) 4 185.86 ws
49.204 488.14(virtual  long  children\(\)  const;) 6 186.856 ws
49.204 474.7(virtual  Style*  child\(long\)  const;) 6 202.204 ws
49.204 461.26(virtual  Style*  find_style\(const  String&\)  const;) 8 271.876 ws
49.204 441.82(virtual  void  attribute\() 4 151.864 ws
59.872 428.38(const  String&  name,  const  String&  value,  int  priority  =  0) 18 334.312 ws
49.204 414.94(\);) 2 56.536 as
49.204 401.5(virtual  void  remove_attribute\(const  String&  name\);) 8 297.184 ws
49.204 388.06(virtual  long  attributes\(\)  const;) 6 192.196 ws
49.204 374.62(virtual  boolean  attribute\(long,  String&  name,  String&  value\)  const;) 14 372.856 ws
49.204 355.18(/*  more  operations  are  defined  in  future  sections  */) 16 293.824 ws
38.536 341.74(};) 2 47.632 as
12 /Times-Roman sf
93.718 322.3(Figure  6.1:) 2 146.386 ws
157.054 322.3(Style  constructor  and  access  functions.) 8 343.354 ws
newpath
17.2 312.12 moveto
17.2 313.12 lineto
413.2 313.12 lineto
413.2 312.12 lineto
closepath
gsave eofill grestore
showpage
%%Page: 3 3
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(\252background\272  attribute.   Style::flat  returns  the  color  object  for  the  \252flat\272  attribute) 21 412 ws
16 657.62(and  precomputes  color  values  for  Style::light,  Style::dull,  and  Style::dark.   The) 19 412 ws
16 643.88(flat,  light,  dull,  and  dark  colors  can  be  used  to  control  the  look  of  beveled  objects.) 30 408.28 ws
18 /Times-Bold sf
16 602.6(6.3) 3 38.5 as
46 602.6(Wildcard  matching) 2 195.508 ws
12 /Times-Roman sf
16 570.2(Attribute  names  may  contain  \252*\272  characters  to  specify  wildcard  matching.   A) 21 412 ws
16 556.46(name  of  the  form  A*B  will  match  an  attribute  B  in  a  nested  style  named  A.) 30 412 ws
16 542.72(Wildcard  names  also  may  begin  with  a  \252*\272,  which  matches  in  any  descendant) 24 412 ws
16 528.98(style.   Thus,  *A*B  will  match  an  attribute  B  in  any  descendant  style  named  A.) 27 412 ws
16 515.24(Because  attributes  are  inherited,  specifying  the  wildcard  name  *B  is   identical  to) 23 412 ws
16 501.5(specifying  the  normal  attribute  B.) 8 177.652 ws
26.668 486.86(In  addition  to  a  name,  styles  may  have  a  list  of  associated  prefixes.   Style::prefix) 27 412 ws
16 473.12(prepends  a  string  to  the  list.   Wildcard  matches  search  using  a  style's  name  first,) 27 412 ws
16 459.38(then  search  using  the  style's  prefixes  in  the  reverse  order  in  which  they  are) 26 412 ws
16 445.64(defined.   Prefixes  are  typically  used  for  indicating  a  subclass  relationship  and) 21 412 ws
16 431.9(allowing  styles  to  inherit  attributes  specified  for  a  superclass.) 16 309.628 ws
26.668 417.26(For  example,  suppose  the  root  style  defines  the  following  attributes:) 18 353.308 ws
10 /Helvetica sf
48.004 402.62(*Mover*autorepeat:off) 21 145.274 as
48.004 388.18(*UpMover*autorepeat:on) 22 158.054 as
12 /Times-Roman sf
26.668 368.74(Consider  descendant  styles  S  and  T:   S's  prefixes  are  UpMover  and  Mover;  T's) 25 412 ws
16 355(prefixes  are  DownMover  and  Mover.   Style::find_attribute  for  \252autorepeat\272  will) 17 412 ws
16 341.26(return  \252on\272  for  S,  \252off\272  for  T.) 12 157.948 ws
26.668 326.62(The  wildcard  matching  algorithm  is  compatible  with  the  X  resource  manager  to) 22 412 ws
16 312.88(support  the  same  user  customization  functionality.   Wildcard  attributes  typically) 17 412 ws
16 299.14(are  defined  only  on  the  root  style,  as  loaded  from  the  window  system,  application) 26 412 ws
16 285.4(defaults  files,  or  command-line  arguments.) 8 221.968 ws
18 /Times-Bold sf
16 244.12(6.4) 3 38.5 as
46 244.12(Performance  notes) 2 190.45 ws
12 /Times-Roman sf
16 211.72(Many  objects  need  to  be  able  to  retrieve  attribute  values  quickly.   The  speed  of) 27 412 ws
16 197.98(retrieval  depends  on  two  factors:  the  cost  of  finding  the  attribute  value  and  the) 26 412 ws
16 184.24(cost  of  converting  the  value  string  into  a  program  object.   For  example,  a  character) 27 412 ws
16 170.5(needs  to  be  able  to  find  the  attribute  named  \252font\272  and  convert  the  string  into  a) 30 412 ws
16 156.76(font  object.) 2 70.66 ws
26.668 142.12(Data  conversion  is  typically  more  expensive  than  searching,  though  excessive) 18 412 ws
16 128.38(use  of  wildcard  attributes  and  prefixes  can  significantly  increase  the  cost  of) 22 412 ws
16 114.64(searching.   The  style  implementation  supports  fast  data  conversion  directly  by) 19 412 ws
16 100.9(defining  operations  for  specific  attributes  that  return  the  converted  attribute  value.) 20 412 ws
16 87.16(For  example,  Style::font  returns  a  pointer  to  a  font  object  or  nil  if  no  font  object  is) 32 412 ws
16 73.42(defined  for  the  style.   Applications  can  define  style  subclasses  that  provide  similar) 23 412 ws
16 59.68(functionality  for  domain-specific  attributes.) 6 225.304 ws
394.8 38.16(6-) 2 404.796 as
407.796 38.16(3) 1 413.796 as
showpage
%%Page: 4 4
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 671.36(Caching  attribute  information  with  style  objects  allows  the  converted  data  to  be) 22 412 ws
16 657.62(shared  in  the  same  way  that  styles  are  shared.   This  approach  is  simpler  and  more) 29 412 ws
16 643.88(efficient  than  the  strategy  used  in  most  toolkits,  where  user  interface  objects  make) 24 412 ws
16 630.14(a  local  copy  of  converted  attributes.   The  current  style  implementation  assumes) 21 412 ws
16 616.4(that  the  number  of  styles  is  small  relative  to  the  number  of  user  interface  objects,) 28 412 ws
16 602.66(and  therefore  the  appropriate  tradeoff  is  to  use  memory  to  reduce  the  attribute) 24 412 ws
16 588.92(lookup  time.) 2 76.672 ws
18 /Times-Bold sf
16 547.64(6.5) 3 38.5 as
46 547.64(Using  styles  with  glyphs) 6 229.528 ws
12 /Times-Roman sf
16 515.24(Glyphs  that  draw  typically  contain  the  specific  style  information  they  need  to) 22 412 ws
16 501.5(render.   For  example,  a  character  glyph  contains  the  font  and  color  it  uses  to  draw.) 29 412 ws
16 487.76(Higher  level  glyphs,  such  as  a  slider  for  scrolling,  contain  a  style  from  which) 26 412 ws
16 474.02(they  construct  their  components.   When  styles  support  trigger  routines  to  detect) 21 412 ws
16 460.28(attribute  value  changes,  these  higher-level  components  will  be  able  to  reconstruct) 20 412 ws
16 446.54(their  contents  automatically.) 4 152.32 ws
26.668 431.9(Figure  6.2  shows  a  function  that  builds  a  vertical  scrollbar  by  creating  a) 24 412 ws
16 418.16(box  containing  an  up-mover  \(button  with  up-arrow\),  a  scroller  \(slider\),  and  a) 22 412 ws
16 404.42(down-mover  \(button  with  down-arrow\).   The  function  creates  a  new  style  and) 21 412 ws
16 390.68(gives  it  the  prefixes  VScrollBar  and  ScrollBar  for  customization.   If  the  attribute) 23 412 ws
16 376.94(\252mover_size\272  is  defined  on  the  style,  then  its  value  will  override  the  default  \(15.0\).) 26 412 ws
18 /Times-Bold sf
16 335.66(6.6) 3 38.5 as
46 335.66(Summary) 7 121.996 as
12 /Times-Roman sf
16 303.26(User  interface  geometry  and  attribute  management  are  two  different  problems  that) 20 412 ws
16 289.52(are  best  solved  independently.   Whereas  glyphs  define  a  physical  organization) 19 412 ws
16 275.78(with  a  directed  acyclic  graph,  styles  define  a  logical  organization  with  a  strict) 24 412 ws
16 262.04(hierarchy.   Both  structures  are  simple  and  the  connection  between  them  is) 21 412 ws
16 248.3(straightforward.) 16 92.98 as
26.668 233.66(Styles  provide  a  unified  framework  for  managing  user-customizable  attributes,) 16 412 ws
16 219.92(document  formatting  information,  and  structured  graphics  state.   Style  prefixes) 17 412 ws
16 206.18(support  wildcarding  and  allow  the  decoupling  of  the  implementation  class) 18 412 ws
16 192.44(hierarchy  from  the  logical  class  hierarchy  offered  to  the  user  for  the  purposes) 24 412 ws
16 178.7(of  customization.   This  approach  makes  applications  simpler  to  develop,  more) 19 412 ws
16 164.96(consistent  to  use,  and  easier  to  integrate.) 12 209.968 ws
394.8 38.16(6-) 2 404.796 as
407.796 38.16(4) 1 413.796 as
showpage
%%Page: 5 5
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
394.8 38.16(6-) 2 404.796 as
407.796 38.16(5) 1 413.796 as
newpath
14.32 613.66 moveto
14.32 614.66 lineto
410.32 614.66 lineto
410.32 613.66 lineto
closepath
gsave eofill grestore
35.656 597.1(Glyph*  vscroll_bar\(Adjustable*  a,  Style*  style\)  {) 10 274.06 ws
46.324 583.66(Style*  s  =  new  Style\(style\);) 8 179.092 ws
46.324 570.22(s->prefix\("VScrollBar"\);) 24 166.192 as
46.324 556.78(s->prefix\("ScrollBar"\);) 23 157.528 as
46.324 543.34(Coord  mover_size  =  15.0;) 6 171.748 ws
46.324 529.9(s->find_attribute\("mover_size",  mover_size\);) 2 264.844 ws
46.324 516.46(Glyph*  sep  =  new  VGlue\(1.0,  0.0,  0.0\);) 12 237.4 ws
46.324 503.02(return  inset_frame\() 2 138.628 ws
56.992 489.58(new  TBBox\() 2 119.32 ws
67.66 476.14(new  VCenter\() 2 135.304 ws
78.328 462.7(new  FixedSpan\(up_mover\(a,  s\),  Dimension_Y,  mover_size\),) 8 370.948 ws
78.328 449.26(1.0) 3 93.328 as
67.66 435.82(\),) 2 74.656 as
67.66 422.38(sep,) 4 86.656 as
67.66 408.94(new  VScroller\(a,  s\),) 4 164.296 ws
67.66 395.5(sep,) 4 86.656 as
67.66 382.06(new  FixedSpan\(down_mover\(a,  s\),  Dimension_Y,  mover_size\)) 8 371.944 ws
56.992 368.62(\),) 2 63.988 as
56.992 355.18(s) 1 61.66 as
46.324 341.74(\);) 2 53.656 as
35.656 328.3(}) 1 41.416 as
12 /Times-Roman sf
115.48 308.86(Figure  6.2:) 2 168.148 ws
178.816 308.86(Using  styles  to  build  glyphs.) 8 315.832 ws
newpath
14.32 298.68 moveto
14.32 299.68 lineto
410.32 299.68 lineto
410.32 298.68 lineto
closepath
gsave eofill grestore
showpage
%%Trailer
end restore
%%Pages: 5
%!PS-Adobe-2.0
%%Creator: ./ch7.doc
%%Pages: atend
%%EndComments
save 20 dict begin

/sf {   % scale /fontName => -  (set current font)
    {findfont} stopped {pop /Courier findfont} if
    exch scalefont setfont
} def

/ws {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 8#40 4 3 roll
    widthshow
} def

/as {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 3 2 roll
    ashow
} def

%%EndProlog
%%Page: 1 1
92 37.08 translate
0 0 0 setrgbcolor
24 /Times-Bold sf
16 662.72(Chapter  7) 2 119.32 ws
16 625.76(Kits) 4 58.672 as
12 /Times-Roman sf
16 597.44(A  kit  is  an  object  that  creates  user  interface  objects  with  a  concrete  look-and-feel.) 26 412 ws
16 583.7(Typically,  an  application  uses  a  kit  to  create  specific  components,  such  as) 22 412 ws
16 569.96(pulldown  menus,  push  buttons,  and  scrollbars.   Kits  isolate  the  application  from) 21 412 ws
16 556.22(specific  look-and-feel  issues  and  the  details  of  how  a  concrete  component  is) 22 412 ws
16 542.48(implemented.   Using  glyphs,  many  components  are  simply  defined  using  instances) 19 412 ws
16 528.74(of  existing  classes.   For  example,  a  push  button  with  a  string  label  is  created  using) 29 412 ws
16 515(a  button,  label,  telltale,  and  two  bevel  objects.) 14 236.308 ws
26.668 500.36(InterViews  provides  a  base  kit  class  for  creating  common  user  interface  objects.) 22 412 ws
16 486.62(Subclasses  are  provided  for  implementing  concrete  objects  based  on  the  Motif) 20 412 ws
16 472.88(\(default\)  and  OpenLook  user  interfaces.   A  kit  subclass  is  also  provided  for) 23 412 ws
16 459.14(monochrome  screens.) 2 120.64 ws
26.668 444.5(Kit::instance  is  a  static  member  function  that  returns  a  default  kit.   If  a  kit) 27 412 ws
16 430.76(has  not  yet  been  created,  Kit::instance  creates  one  using  the  session's  style  to) 24 412 ws
16 417.02(determine  which  kit  subclass  to  construct.   If  the  \252openlook\272  or  \252monochrome\272) 21 412 ws
16 403.28(attributes  are  defined,  then  the  associated  kit  is  used.   Otherwise,  the  Motif-based) 23 412 ws
16 389.54(kit  is  used.   Currently,  neither  the  Motif  nor  OpenLook  kits  are  fully  compliant) 25 412 ws
16 375.8(with  their  respective  definitions.) 6 171.316 ws
26.668 361.16(Instead  of  listing  all  the  Kit  functions  together,  we  present  the  functions) 22 412 ws
16 347.42(in  groups  corresponding  to  the  different  kinds  of  objects.   In  the  context  of) 25 412 ws
16 333.68(the  Kit  functions,  we  also  describe  the  support  classes  for  basic  look-and-feel) 22 412 ws
16 319.94(functionality.) 14 80.332 as
18 /Times-Bold sf
16 278.66(7.1) 3 38.5 as
46 278.66(Bevels) 6 94.996 as
12 /Times-Roman sf
16 246.26(On  color  displays,  it  is  often  desirable  to  frame  objects  with  a  beveled  look  to  give) 30 412 ws
16 232.52(a  3D  appearance.   The  Kit  class  provides  the  following  three  functions  for  creating) 25 412 ws
16 218.78(beveled  frames:) 2 92.308 ws
26.668 199.34(virtual  Glyph*  inset_frame\(Glyph*,  Style*\)  const;) 8 268.984 ws
26.668 185.9(virtual  Glyph*  outset_frame\(Glyph*,  Style*\)  const;) 8 274.984 ws
26.668 172.46(virtual  Glyph*  flat_frame\(Glyph*,  Style*\)  const;) 8 262.312 ws
16 153.02(Kit:inset_frame  uses  dark  shading  in  the  upper  left  and  light  shading  in  the  lower) 26 412 ws
16 139.28(right  to  make  the  contents  of  the  frame  appear  to  be  recessed.   Kit::outset_frame) 25 412 ws
16 125.54(reverses  the  shading  to  make  the  contents  appear  to  project  out  of  the  frame.) 26 412 ws
16 111.8(Kit::flat_frame  uses  equal  shading  throughout  the  frame  to  look  \252in-between\272  the) 20 412 ws
16 98.06(inset  and  outset  frames.) 6 129.316 ws
26.668 83.42(Kits  use  the  bevel  class  to  implement  frames.   A  bevel  is  a  monoglyph  that) 27 412 ws
16 69.68(draws  a  border  around  its  body  using  multiple  colors  to  make  an  object  look) 26 412 ws
394.8 39.12(7-) 2 404.796 as
407.796 39.12(1) 1 413.796 as
showpage
%%Page: 2 2
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 186.6(raised  or  lowered  relative  to  other  objects.   Figure  7.1  shows  the  bevel  class) 25 412 ws
16 172.86(interface.   The  bevel  constructor  takes  the  glyph  body;  a  drawing  function  for  the) 25 412 ws
16 159.12(bevel;  colors  for  the  upper-left,  center,  and  lower-right  portions  of  the  frame;) 22 412 ws
16 145.38(and  a  thickness.   Bevel::rect  draws  a  rectangular  bevel,  shading  the  upper-left) 21 412 ws
16 131.64(and  lower-right  portions  of  the  rectangle.   Bevel::left_arrow,  Bevel::right_arrow,) 15 412 ws
16 117.9(Bevel::up_arrow,  and  Bevel::down_arrow  perform  similar  shading  for  arrows.) 14 412 ws
16 104.16(For  example,  the  following  code  can  be  used  to  create  an  inset  frame  for  a  glyph) 30 412 ws
12 /Times-Italic sf
16 90.42(g) 1 22 as
12 /Times-Roman sf
22 90.42(,  style  ) 4 53.668 ws
12 /Times-Italic sf
53.668 90.42(s) 1 58.336 as
12 /Times-Roman sf
58.336 90.42(,  and  width  ) 6 115 ws
12 /Times-Italic sf
115 90.42(w) 1 123.004 as
12 /Times-Roman sf
123.004 90.42(:) 1 126.34 as
26.668 70.98(new  Bevel\(g,  &Bevel::rect,  s->dark\(\),  s->dull\(\),  s->light\(\),  w\);) 12 327.916 ws
394.8 39.12(7-) 2 404.796 as
407.796 39.12(2) 1 413.796 as
newpath
17.2 682.78 moveto
17.2 683.78 lineto
413.2 683.78 lineto
413.2 682.78 lineto
closepath
gsave eofill grestore
38.536 666.22(typedef  void  \(*Beveler\)\() 4 157.168 ws
49.204 652.78(Canvas*,  const  Color*,  const  Color*,  const  Color*,) 12 296.536 ws
49.204 639.34(Coord  thickness,  Coord  left,  Coord  bottom,  Coord  right,  Coord  top) 18 370.876 ws
38.536 625.9(\);) 2 45.868 as
38.536 606.46(class  Bevel  :  public  MonoGlyph  {) 10 202.624 ws
38.536 593.02(public:) 7 71.872 as
49.204 579.58(Bevel\() 6 81.196 as
59.872 566.14(Glyph*,  Beveler,) 2 142.192 ws
59.872 552.7(const  Color*  upper-left,  const  Color*  center,  const  Color*  lower-right,) 16 398.536 ws
59.872 539.26(Coord  thickness) 2 137.536 ws
49.204 525.82(\);) 2 56.536 as
49.204 506.38(static  void  rect\() 4 123.856 ws
59.872 492.94(Canvas*,  const  Color*,  const  Color*,  const  Color*,  Coord,) 14 343.204 ws
59.872 479.5(Coord,  Coord,  Coord,  Coord) 6 197.872 ws
49.204 466.06(\);) 2 56.536 as
49.204 452.62(static  void  left_arrow\() 4 155.848 ws
59.872 439.18(Canvas*,  const  Color*,  const  Color*,  const  Color*,  Coord,) 14 343.204 ws
59.872 425.74(Coord,  Coord,  Coord,  Coord) 6 197.872 ws
49.204 412.3(\);) 2 56.536 as
49.204 398.86(static  void  right_arrow\() 4 162.52 ws
59.872 385.42(Canvas*,  const  Color*,  const  Color*,  const  Color*,  Coord,) 14 343.204 ws
59.872 371.98(Coord,  Coord,  Coord,  Coord) 6 197.872 ws
49.204 358.54(\);) 2 56.536 as
49.204 345.1(static  void  up_arrow\() 4 151.852 ws
59.872 331.66(Canvas*,  const  Color*,  const  Color*,  const  Color*,  Coord,) 14 343.204 ws
59.872 318.22(Coord,  Coord,  Coord,  Coord) 6 197.872 ws
49.204 304.78(\);) 2 56.536 as
49.204 291.34(static  void  down_arrow\() 4 166.516 ws
59.872 277.9(Canvas*,  const  Color*,  const  Color*,  const  Color*,  Coord,) 14 343.204 ws
59.872 264.46(Coord,  Coord,  Coord,  Coord) 6 197.872 ws
49.204 251.02(\);) 2 56.536 as
38.536 237.58(};) 2 47.632 as
12 /Times-Roman sf
91.222 218.14(Figure  7.1:) 2 143.89 ws
154.558 218.14(Bevel  class  interface  and  kit  operations.) 10 345.85 ws
newpath
17.2 207.96 moveto
17.2 208.96 lineto
413.2 208.96 lineto
413.2 207.96 lineto
closepath
gsave eofill grestore
showpage
%%Page: 3 3
92 37.08 translate
0 0 0 setrgbcolor
18 /Times-Bold sf
16 667.52(7.2) 3 38.5 as
46 667.52(Labels) 6 97.012 as
12 /Times-Roman sf
16 635.12(A  label  is  a  string  of  text  in  a  given  font  and  color.   The  kit  class  provides  two) 35 412 ws
16 621.38(operations  for  creating  labels:) 6 158.968 ws
37.336 601.94(virtual  Glyph*  label\(const  char*,  Style*\)  const;) 10 265.312 ws
37.336 588.5(virtual  Glyph*  label\(const  String&,  Style*\)  const;) 10 277.336 ws
16 569.06(These  operations  are  simply  short-hand  for  creating  a  label  glyph  with  the  style's) 24 412 ws
16 555.32(font  and  foreground  color.) 6 142.636 ws
18 /Times-Bold sf
16 514.04(7.3) 3 38.5 as
46 514.04(Buttons) 7 106.012 as
12 /Times-Roman sf
16 481.64(A  button  is  an  object  that  can  perform  an  action  when  pressed.   The  kit  class) 29 412 ws
16 467.9(provides  the  following  operations  for  creating  common  buttons:) 14 322.972 ws
26.668 448.46(Button*  simple_push_button\(const  char*,  Style*,  Action*\)  const;) 10 341.668 ws
26.668 435.02(Button*  simple_push_button\(const  String&,  Style*,  Action*\)  const;) 10 353.692 ws
26.668 421.58(virtual  Button*  push_button\(Glyph*,  Style*,  Action*\)  const;) 10 319.012 ws
26.668 402.14(Button*  simple_toggle_button\(const  char*,  Style*,  Action*\)  const;) 10 349 ws
26.668 388.7(Button*  simple_toggle_button\(const  String&,  Style*,  Action*\)  const;) 10 361.024 ws
26.668 375.26(virtual  Button*  toggle_button\(Glyph*,  Style*,  Action*\)  const;) 10 326.344 ws
26.668 361.82(virtual  Action*  quit\(\)  const;) 6 160.996 ws
16 342.38(The  Kit::simple_*  functions  are  short-hand  for  creating  a  label  from  a  string  and) 24 412 ws
16 328.64(using  the  label  as  the  glyph  for  the  button  body.   A  push  button  executes  its  action) 31 412 ws
16 314.9(when  a  pointer  button  is  pressed  and  released  inside  the  body  of  the  button.   The) 29 412 ws
16 301.16(push  button  appearance  changes  when  it  is  pressed.   A  toggle  button  is  similar  to) 27 412 ws
16 287.42(a  push  button,  but  shows  a  binary  state  as  to  whether  it  is  currently  chosen.) 28 412 ws
16 273.68(Initially,  a  toggle  button  is  not  chosen,  and  each  press  switches  its  state  between) 26 412 ws
16 259.94(chosen  and  not  chosen.   Kit::quit  returns  an  action  that  calls  Session::quit.) 21 369.484 ws
26.668 245.3(The  base  button  class  inherits  from  monoglyph  and  pointer-handler.   The  body) 21 412 ws
16 231.56(of  a  button  is  a  ) 10 104.705 ws
12 /Times-Bold sf
104.705 231.56(telltale) 8 139.361 as
12 /Times-Roman sf
139.361 231.56(,  which  is  a  monoglyph  that  modifies  its  appearance) 16 412 ws
16 217.82(depending  on  whether  it  is  enabled,  highlighted,  or  chosen.   A  ) 21 330.748 ws
12 /Times-Bold sf
330.748 217.82(choice) 6 362.74 as
12 /Times-Roman sf
362.74 217.82(  ) 2 367.164 ws
12 /Times-Bold sf
367.164 217.82(item) 4 389.82 as
12 /Times-Roman sf
389.82 217.82(  is  a) 4 412 ws
16 204.08(telltale  that  uses  a  deck  to  switch  between  appearances  defined  for  all  possible) 24 412 ws
16 190.34(combinations  of  the  state.) 6 139.324 ws
26.668 175.7(Figure  7.2  shows  the  button,  telltale,  and  choice  item  class  interfaces.) 20 412 ws
16 161.96(Button::drag  overrides  PointerHandler::drag  to  highlight  or  unhighlight  the) 14 412 ws
16 148.22(telltale.   Button::release  extends  PointerHandler::release  to  unhighlight  its  telltale.) 15 412 ws
16 134.48(Button::commit  overrides  PointerHandler::commit  to  execute  the  button's  action.) 14 406.648 ws
26.668 119.84(Telltale  provides  independent  operations  to  set  and  get  whether  the  telltale) 20 412 ws
16 106.1(should  be  enabled,  highlighted,  or  chosen.   Telltale::redraw  is  a  function  for) 21 412 ws
16 92.36(subclasses  to  note  that  the  state  of  the  telltale  has  changed  and  it  should  be) 28 412 ws
16 78.62(redrawn  \(it  does  not  actually  do  any  drawing\).   The  telltale  set  operations  call) 25 412 ws
16 64.88(Telltale::redraw.) 17 95.644 as
394.8 39.12(7-) 2 404.796 as
407.796 39.12(3) 1 413.796 as
showpage
%%Page: 4 4
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 135(The  choice  item  class  allows  one  to  define  separate  glyphs  for  each) 22 412 ws
16 121.26(possible  look  of  a  telltale.   The  possible  looks  are  all  combinations  of  the) 25 412 ws
16 107.52(flags  ChoiceItem::is_enabled,  ChoiceItem::is_inside,  ChoiceItem::is_pressed,  and) 8 412 ws
16 93.78(ChoiceItem::is_chosen.   ChoiceItem::numlooks  returns  the  number  of  possible) 13 412 ws
16 80.04(looks,  and  ChoiceItem::contains_look  determines  if  a  bitset  of  looks  contains  a) 20 412 ws
16 66.3(specified  subset.   ChoiceItem::look  sets  and  gets  the  glyph  for  a  particular  set  of) 25 412 ws
394.8 39.12(7-) 2 404.796 as
407.796 39.12(4) 1 413.796 as
newpath
17.2 662.62 moveto
17.2 663.62 lineto
413.2 663.62 lineto
413.2 662.62 lineto
closepath
gsave eofill grestore
38.536 646.06(class  Button  :  public  MonoGlyph,  public  PointerHandler  {) 14 319.624 ws
38.536 632.62(public:) 7 71.872 as
49.204 619.18(Button\(Action*,  Telltale*\);) 2 180.532 ws
49.204 605.74(Action*  action\(\)  const;) 4 159.856 ws
49.204 592.3(Telltale*  telltale\(\)  const;) 4 167.188 ws
49.204 572.86(virtual  void  drag\(Event&\);) 4 177.856 ws
49.204 559.42(virtual  void  release\(Event&\);) 4 189.844 ws
49.204 545.98(virtual  void  commit\(Event&\);) 4 193.204 ws
38.536 532.54(};) 2 47.632 as
38.536 513.1(class  Telltale  :  public  MonoGlyph  {) 10 211.288 ws
38.536 499.66(public:) 7 71.872 as
49.204 486.22(Telltale\(Glyph*\);) 17 133.192 as
49.204 466.78(virtual  void  highlight\(boolean\);) 4 200.536 ws
49.204 453.34(virtual  boolean  highlighted\(\)  const;) 6 218.86 ws
49.204 439.9(virtual  void  choose\(boolean\);) 4 190.516 ws
49.204 426.46(virtual  boolean  chosen\(\)  const;) 6 197.512 ws
49.204 413.02(virtual  void  enable\(boolean\);) 4 188.512 ws
49.204 399.58(virtual  boolean  enabled\(\)  const;) 6 201.508 ws
38.536 386.14(protected:) 10 86.524 as
49.204 372.7(virtual  void  redraw\(\)  const;) 6 180.844 ws
38.536 359.26(};) 2 47.632 as
38.536 339.82(class  ChoiceItem  :  public  Telltale  {) 10 208.612 ws
38.536 326.38(public:) 7 71.872 as
49.204 312.94(ChoiceItem\(\);) 13 116.524 as
49.204 299.5(ChoiceItem\(Glyph*  nomarl,  Glyph*  pressed\);) 6 270.508 ws
49.204 280.06(enum  {) 2 84.628 ws
59.872 266.62(is_enabled  =  0x1,  is_inside  =  0x2,  is_pressed  =  0x4,  is_chosen  =  0x8,) 22 395.26 ws
49.204 253.18(};) 2 58.3 as
49.204 239.74(unsigned  int  numlooks\(\)  const;) 6 198.208 ws
49.204 226.3(boolean  contains_looks\(unsigned  int  set,  unsigned  int  subset\)  const;) 14 375.196 ws
49.204 212.86(virtual  void  look\(unsigned  int  bitset,  Glyph*\);) 10 270.544 ws
49.204 199.42(virtual  Glyph*  look\(unsigned  int  bitset\)  const;) 10 271.54 ws
38.536 185.98(};) 2 47.632 as
12 /Times-Roman sf
70.72 166.54(Figure  7.2:) 2 123.388 ws
134.056 166.54(Button,  telltale,  and  choice  item  class  interfaces.) 12 366.352 ws
newpath
17.2 156.36 moveto
17.2 157.36 lineto
413.2 157.36 lineto
413.2 156.36 lineto
closepath
gsave eofill grestore
showpage
%%Page: 5 5
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(flags.   For  convenience,  a  ChoiceItem  constructor  is  provided  that  uses  two  looks,) 23 412 ws
16 657.62(one  for  all  sets  containing  ChoiceItem::is_pressed,  and  one  for  all  other  sets.) 22 382.948 ws
18 /Times-Bold sf
16 616.34(7.4) 3 38.5 as
46 616.34(Menus) 5 98.002 as
12 /Times-Roman sf
16 583.94(A  menu  is  similar  to  a  group  of  related  buttons,  called  the  menu  items.   Like  a) 31 412 ws
16 570.2(button,  the  look  of  a  menu  item  is  a  telltale.   Menus  can  associate  actions  with) 29 412 ws
16 556.46(items,  which  are  executed  when  the  item  is  chosen.   Menus  can  also  associate) 25 412 ws
16 542.72(nested  menus  with  items,  in  which  case  the  submenu  is  opened  when  the  item  is) 28 412 ws
16 528.98(highlighted.) 12 73.672 as
26.668 514.34(The  kit  class  provides  the  following  functions  for  creating  menus  and  items:) 22 392.296 ws
37.336 494.9(virtual  Menu*  menubar\(Style*\)  const;) 6 220.984 ws
37.336 481.46(virtual  Menu*  pulldown\(Style*\)  const;) 6 224.332 ws
37.336 468.02(virtual  Menu*  pullright\(Style*\)  const;) 6 220.336 ws
37.336 454.58(virtual  Telltale*  menubar_item\(Glyph*,  Style*\)  const;) 8 298.984 ws
37.336 441.14(virtual  Telltale*  menu_item\(Glyph*,  Style*\)  const;) 8 283.66 ws
37.336 427.7(virtual  Telltale*  menu_item_separator\(Style*\)  const;) 6 291.64 ws
26.668 408.26(Kit::menubar  creates  a  horizontal  menu  with  a  small  amount  of  white  space) 22 412 ws
16 394.52(between  items.   Kit::pulldown  and  Kit::pullright  create  vertical  menus.   The  top  of) 22 412 ws
16 380.78(a  pulldown  menu  will  be  aligned  to  the  bottom  of  the  menubar,  while  a  pullright's) 28 412 ws
16 367.04(top  will  be  aligned  to  the  top  right  of  its  containing  item.) 22 288.004 ws
394.8 39.12(7-) 2 404.796 as
407.796 39.12(5) 1 413.796 as
newpath
16.24 342.94 moveto
16.24 343.94 lineto
412.24 343.94 lineto
412.24 342.94 lineto
closepath
gsave eofill grestore
37.576 326.38(class  Menu  :  public  MonoGlyph,  public  Handler  {) 14 279.316 ws
37.576 312.94(public:) 7 70.912 as
48.244 299.5(Menu\(Glyph*,  float  x1,  float  y1,  float  x2,  float  y2\);) 16 295.552 ws
48.244 280.06(virtual  void  item\() 4 132.244 ws
58.912 266.62(GlyphIndex,  Telltale*,  Action*,  Menu*,  Window*  =  nil) 12 328.324 ws
48.244 253.18(\);) 2 55.576 as
48.244 239.74(virtual  void  add_item\(Telltale*,  Action*,  Menu*,  Window*  =  nil\);) 14 368.992 ws
48.244 226.3(virtual  void  add_item\(Telltale*,  Action*\);) 6 250.228 ws
48.244 212.86(virtual  void  add_item\(Telltale*,  Menu*,  Window*  =  nil\);) 12 324.328 ws
48.244 199.42(virtual  void  add_item\(Telltale*\);) 4 205.564 ws
48.244 179.98(virtual  Telltale*  telltale\(GlyphIndex\)  const;) 6 257.884 ws
48.244 166.54(virtual  Action*  action\(GlyphIndex\)  const;) 6 250.552 ws
48.244 153.1(virtual  Menu*  menu\(GlyphIndex\)  const;) 6 243.22 ws
48.244 139.66(virtual  Window*  window\(GlyphIndex\)  const;) 6 268.552 ws
48.244 120.22(void  select\(GlyphIndex\);) 2 168.556 ws
37.576 106.78(};) 2 46.672 as
12 /Times-Roman sf
134.758 87.34(Figure  7.3:) 2 187.426 ws
198.094 87.34(Menu  class  interface.) 4 300.394 ws
newpath
16.24 77.16 moveto
16.24 78.16 lineto
412.24 78.16 lineto
412.24 77.16 lineto
closepath
gsave eofill grestore
showpage
%%Page: 6 6
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 671.36(Kit::menubar_item  creates  an  item  centered  horizontally  with  a  small  amount  of) 20 412 ws
16 657.62(white  space  on  each  side.   Kit::menu_item  creates  a  left-adjusted  item,  possibly) 21 412 ws
16 643.88(with  room  on  the  left  for  a  checkmark  or  other  indication  that  the  item) 26 412 ws
16 630.14(is  currently  selected.   Kit::menu_item_separator  returns  a  telltale  for  visually) 17 412 ws
16 616.4(separating  other  items  \(such  as  a  horizontal  line\).   As  with  buttons,  there  are  also) 27 412 ws
16 602.66(Kit::simple_*_item  with  string  arguments  for  label  items.) 12 292.336 ws
26.668 588.02(The  menu  base  class  interface  is  shown  in  Figure  7.3.   The  menu  constructor  is) 27 412 ws
16 574.28(given  a  body  in  which  to  insert  items  and  two  alignments.   Each  alignment  is) 27 412 ws
16 560.54(specified  by  a  fraction  for  the  relative  position  in  the  X  and  Y  dimensions.   The) 29 412 ws
16 546.8(alignments  are  used  when  opening  submenus.   The  first  alignment  is  a  position  in) 25 412 ws
16 533.06(the  menu,  the  second  alignment  is  the  position  in  the  submenu.) 20 317.992 ws
26.668 518.42(Menu::item  sets  the  item  at  a  specific  index  within  the  body.   Menu::add_item) 23 412 ws
16 504.68(puts  a  new  item  at  the  end  of  the  menu.   Each  item  must  have  a  telltale  to  specify) 35 412 ws
16 490.94(the  item's  appearance.   Items  may  also  have  an  action  to  execute,  a  submenu  to) 27 412 ws
16 477.2(open,  and  a  window  to  use  for  the  submenu.   The  window  is  useful  when  the) 29 412 ws
16 463.46(menu  has  a  half-tone  shadow  and  double-buffering  is  inappropriate.   Menu::select) 19 412 ws
16 449.72(chooses  an  item,  executing  an  action  or  opening  a  submenu  as  defined  by  the  item.) 28 412 ws
18 /Times-Bold sf
16 408.44(7.5) 3 38.5 as
46 408.44(Adjusters) 9 120.988 as
12 /Times-Roman sf
16 376.04(Scrollbars  and  mover  buttons  are  examples  of  interactive  objects  that  \252adjust\272  the) 22 412 ws
16 362.3(view  shown  by  another  object.   An  ) 13 185.4 ws
12 /Times-Bold sf
185.4 362.3(adjustable) 10 238.74 as
12 /Times-Roman sf
238.74 362.3(  is  an  object  that  handles  requests  to) 14 412 ws
16 348.56(modify  its  view.   An  ) 9 116.258 ws
12 /Times-Bold sf
116.258 348.56(adjuster) 8 158.918 as
12 /Times-Roman sf
158.918 348.56(  is  an  object  that  can  make  requests  on  an  adjustable.) 20 412 ws
26.668 333.92(The  kit  class  provides  the  following  functions  for  creating  common  adjusters:) 20 399.292 ws
37.336 314.48(virtual  Glyph*  hscroll_bar\(Adjustable*,  Style*\)  const;) 8 298.984 ws
37.336 301.04(virtual  Glyph*  vscroll_bar\(Adjustable*,  Style*\)  const;) 8 298.984 ws
37.336 287.6(virtual  Glyph*  panner\(Adjustable*,  Adjustable*,  Style*\)  const;) 10 341.644 ws
37.336 274.16(virtual  Button*  enlarger\(Adjustable*,  Style*\)  const;) 8 286.984 ws
37.336 260.72(virtual  Button*  reducer\(Adjustable*,  Style*\)  const;) 8 283.648 ws
37.336 247.28(virtual  Button*  up_mover\(Adjustable*,  Style*\)  const;) 8 296.332 ws
37.336 233.84(virtual  Button*  down_mover\(Adjustable*,  Style*\)  const;) 8 310.996 ws
37.336 220.4(virtual  Button*  left_mover\(Adjustable*,  Style*\)  const;) 8 300.328 ws
37.336 206.96(virtual  Button*  right_mover\(Adjustable*,  Style*\)  const;) 8 307 ws
16 187.52(Kit::hscroll_bar  and  Kit::vscroll_bar  return  controls  for  scrolling  a  view  in  the) 20 412 ws
16 173.78(horizontal  and  vertical  dimensions,  respectively.   Kit::panner  returns  a  control  for) 19 412 ws
16 160.04(scrolling  two  adjustables  at  once.   One  adjustable  is  controlled  by  the  horizontal) 23 412 ws
16 146.3(position  of  the  panner,  one  by  the  vertical  position.   Typically,  the  same  adjustable) 25 412 ws
16 132.56(is  passed  to  both  parameters  when  creating  a  panner.) 16 268.936 ws
26.668 117.92(Kit::enlarger  and  Kit::reducer  return  buttons  that  zoom  the  adjustable  in  or  out,) 22 412 ws
16 104.18(respectively.   Kit::*_mover  returns  a  button  to  scroll  a  view  a  fixed  amount  in  a) 27 412 ws
16 90.44(specific  dimension.) 2 109.324 ws
26.668 75.8(Figure  7.4  shows  the  base  adjustable  and  adjuster  classes.   Adjustable::attach) 19 412 ws
16 62.06(and  Adjustable::detach  add  an  adjuster  to  the  list  of  objects  notified  when  an) 24 412 ws
394.8 39.12(7-) 2 404.796 as
407.796 39.12(6) 1 413.796 as
showpage
%%Page: 7 7
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 157.08(adjustable's  dimensions  change.   Adjustable::lower  and  Adjustable::upper  define) 13 412 ws
16 143.34(a  coordinate  range  for  adjustment  in  a  particular  dimension.   Adjustable::length  is) 21 412 ws
16 129.6(equivalent  to  Adjustable::upper  minus  Adjustable::lower.   Adjustable::cur_lower) 11 412 ws
16 115.86(and  Adjustable::cur_upper  define  the  region  within  a  coordinate  range  that  is) 20 412 ws
16 102.12(currently  in  view.   Adjustable::cur_length  is  equivalent  to  Adjustable::cur_upper) 15 412 ws
16 88.3799(minus  Adjustable::cur_lower.) 2 158.656 ws
26.668 73.7399(Adjustable::scroll_forward  and  Adjustable::scroll_backward  add  a  small  fixed) 12 412 ws
16 59.9999(amount  to  Adjustable::cur_lower  \(where  the  amount  is  determined  by  the) 18 412 ws
394.8 39.12(7-) 2 404.796 as
407.796 39.12(7) 1 413.796 as
newpath
17.2 674.14 moveto
17.2 675.14 lineto
413.2 675.14 lineto
413.2 674.14 lineto
closepath
gsave eofill grestore
38.536 657.58(class  Adjustable  {) 4 125.62 ws
38.536 644.14(protected:) 10 86.524 as
49.204 630.7(Adjustable\(\);) 13 112.528 as
38.536 617.26(public:) 7 71.872 as
49.204 603.82(virtual  void  attach\(Adjuster*\);) 4 195.184 ws
49.204 590.38(virtual  void  detach\(Adjuster*\);) 4 197.848 ws
49.204 576.94(virtual  Coord  lower\(DimensionName\)  const  =  0;) 10 283.612 ws
49.204 563.5(virtual  Coord  upper\(DimensionName\)  const  =  0;) 10 283.612 ws
49.204 550.06(virtual  Coord  length\(DimensionName\)  const  =  0;) 10 286.288 ws
49.204 536.62(virtual  Coord  cur_lower\(DimensionName\)  const  =  0;) 10 304.936 ws
49.204 523.18(virtual  Coord  cur_upper\(DimensionName\)  const  =  0;) 10 304.936 ws
49.204 509.74(virtual  Coord  cur_length\(DimensionName\)  const  =  0;) 10 307.612 ws
49.204 496.3(virtual  void  scroll_forward\(DimensionName\);) 4 271.168 ws
49.204 482.86(virtual  void  scroll_backward\(DimensionName\);) 4 279.832 ws
49.204 469.42(virtual  void  page_forward\(DimensionName\);) 4 267.16 ws
49.204 455.98(virtual  void  page_backward\(DimensionName\);) 4 275.824 ws
49.204 442.54(virtual  void  scroll_to\(DimensionName,  Coord  position\);) 8 320.2 ws
49.204 429.1(virtual  void  scale_to\(DimensionName,  float  fraction_visible\);) 8 346.168 ws
49.204 415.66(virtual  void  zoom_to\(float  magnification\);) 6 252.856 ws
38.536 402.22(protected:) 10 86.524 as
49.204 388.78(virtual  void  constrain\(DimensionName,  Coord&  position\)  const;) 10 359.86 ws
49.204 375.34(virtual  void  notify\(\)  const;) 6 176.2 ws
49.204 361.9(virtual  void  notify\(DimensionName\)  const;) 6 257.524 ws
38.536 348.46(};) 2 47.632 as
38.536 329.02(class  Adjuster  {) 4 114.952 ws
38.536 315.58(protected:) 10 86.524 as
49.204 302.14(Adjuster\(Adjustable*  =  nil\);) 4 185.296 ws
38.536 288.7(public:) 7 71.872 as
49.204 275.26(virtual  Adjustable*  subject\(\)  const;) 6 218.188 ws
49.204 261.82(virtual  void  update\(DimensionName\);) 4 232.516 ws
49.204 248.38(virtual  void  update_all\(\);) 4 169.192 ws
49.204 234.94(virtual  void  connect\(Adjustable*\);) 4 214.516 ws
49.204 221.5(virtual  void  disconnect\(Adjustable*\);) 4 228.52 ws
38.536 208.06(};) 2 47.632 as
12 /Times-Roman sf
90.724 188.62(Figure  7.4:) 2 143.392 ws
154.06 188.62(Adjustable  and  adjuster  class  interfaces.) 8 346.348 ws
newpath
17.2 178.44 moveto
17.2 179.44 lineto
413.2 179.44 lineto
413.2 178.44 lineto
closepath
gsave eofill grestore
showpage
%%Page: 8 8
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 304.68(adjustable.   Adjustable::page_forward  and  Adjustable::page_backward  add  a) 11 412 ws
16 290.94(larger  fixed  amount.   Adjustable::scroll_to  sets  Adjustable::cur_lower  to  a  specific) 17 412 ws
16 277.2(value.   Adjustable::scale_to  sets  Adjustable::cur_length  to  a  given  fraction  of) 17 412 ws
16 263.46(Adjustable::length.   Adjustable::zoom_to  sets  the  scale  in  all  dimensions.) 15 366.496 ws
26.668 248.82(Adjustable::constrain  is  a  protected  function  that  subclasses  use  to  restrict) 18 412 ws
16 235.08(a  value  to  be  within  lower  and  upper  bounds.   Adjustable::notify  updates  all) 23 412 ws
16 221.34(adjusters,  either  for  a  particular  dimension  or  for  all  dimensions.) 18 324.952 ws
26.668 206.7(The  adjuster  constructor  can  be  passed  the  target  adjustable,  which) 18 412 ws
16 192.96(can  be  retrieved  with  Adjustable::subject  and  set  with  Adjuster::connect.) 16 412 ws
16 179.22(Adjuster::disconnect  detaches  the  adjuster  from  its  subject.   Adjustable::notify) 15 412 ws
16 165.48(calls  Adjuster::update  or  Adjuster::update_all,  depending  on  whether  a  dimension) 16 412 ws
16 151.74(is  specified  or  not.) 6 104.656 ws
26.668 137.1(Figure  7.5  shows  an  example  of  an  adjustable  subclass.   A  valuator  contains  a) 25 412 ws
16 123.36(value  \(a  coordinate  in  this  case\)  that  is  constrained  to  a  certain  range.   The  value) 29 412 ws
16 109.62(does  not  have  a  length,  so  a  fixed  length  of  10.0  is  specified  to  ensure  that  a) 32 412 ws
16 95.88(scrolling  thumb  is  visible.) 6 140.68 ws
394.8 39.12(7-) 2 404.796 as
407.796 39.12(8) 1 413.796 as
newpath
17.2 679.9 moveto
17.2 680.9 lineto
413.2 680.9 lineto
413.2 679.9 lineto
closepath
gsave eofill grestore
38.536 663.34(Valuator::Valuator\(Coord  lower,  Coord  upper\)  {) 8 272.584 ws
49.204 649.9(lower_  =  lower;) 4 125.956 ws
49.204 636.46(span_  =  upper  -  lower;) 8 157.948 ws
49.204 623.02(curvalue_  =  \(lower  +  upper\)  /  2;) 12 203.368 ws
38.536 609.58(}) 1 44.296 as
38.536 590.14(Coord  Valuator::lower\(DimensionName\)  const  {  return  lower_;  }) 12 354.004 ws
38.536 576.7(Coord  Valuator::upper\(DimensionName\)  const  {  return  lower_  +  span_;  }) 16 394.768 ws
38.536 563.26(Coord  Valuator::length\(DimensionName\)  const  {  return  span_;  }) 12 351.352 ws
38.536 549.82(Coord  Valuator::cur_lower\(DimensionName\)  const  {) 6 295.252 ws
49.204 536.38(return  curvalue_  -  cur_length\(\)  /  2;) 10 216.16 ws
38.536 522.94(}) 1 44.296 as
38.536 509.5(Coord  Valuator::cur_upper\(DimensionName\)  const  {) 6 295.252 ws
49.204 496.06(return  cur_lower\(\)  +  cur_length\(\);) 6 212.92 ws
38.536 482.62(}) 1 44.296 as
38.536 469.18(Coord  Valuator::cur_length\(DimensionName\)  const  {  return  10.0;  }) 12 365.68 ws
38.536 449.74(void  Valuator::scroll_to\(DimensionName  d,  Coord  position\)  {) 10 338.284 ws
49.204 436.3(Coord  p  =  position;) 6 142.984 ws
49.204 422.86(constrain\(d,  p\);) 2 122.524 ws
49.204 409.42(if  \(p  !=  curvalue_\)  {) 8 146.368 ws
59.872 395.98(curvalue_  =  p;) 4 129.292 ws
59.872 382.54(notify\(\);) 9 99.868 as
49.204 369.1(}) 1 54.964 as
38.536 355.66(}) 1 44.296 as
12 /Times-Roman sf
116.71 336.22(Figure  7.5:) 2 169.378 ws
180.046 336.22(Example  adjustable  subclass.) 4 320.362 ws
newpath
17.2 326.04 moveto
17.2 327.04 lineto
413.2 327.04 lineto
413.2 326.04 lineto
closepath
gsave eofill grestore
showpage
%%Page: 9 9
92 37.08 translate
0 0 0 setrgbcolor
18 /Times-Bold sf
16 370.2(7.6) 3 38.5 as
46 370.2(Editors) 7 103.006 as
12 /Times-Roman sf
16 337.8(Many  application  need  simple  editors  for  entering  or  browsing  data.   Currently,) 21 412 ws
16 324.06(InterViews  only  provides  a  field  editor  for  text  strings.   A  field  editor  is  suitable) 27 412 ws
16 310.32(for  incorporating  into  other  components,  such  as  a  dialog  box.   Figure  7.6  shows) 25 412 ws
16 296.58(the  field  editor  class  interface.) 8 160.96 ws
26.668 281.94(Clicking  inside  the  editor  \(or  calling  FieldEditor::edit\)  initiates  an  edit.) 18 412 ws
16 268.2(Subsequent  keyboard  events,  regardless  of  the  pointer  location,  are  interpreted  as) 20 412 ws
16 254.46(editing  operations  on  the  text.   Clicking  outside  the  editor  terminates  the  editing.) 23 401.152 ws
26.668 239.82(Text  is  selected  with  the  pointer  or  with  the  keyboard.   A  single  click  of  the  left) 31 412 ws
16 226.08(button  selects  a  new  insertion  point  between  characters.   Dragging  across  the  text) 23 412 ws
16 212.34(selects  a  range  of  characters.   A  set  of  control  characters  is  mapped  into  common) 27 412 ws
16 198.6(editing  operations.   A  character  not  specifically  associated  with  commands  is) 19 412 ws
16 184.86(inserted  in  place  of  the  current  selection,  the  replaced  text  is  discarded,  and) 24 412 ws
16 171.12(the  selection  becomes  an  insertion  point  following  the  inserted  character.   The) 21 412 ws
16 157.38(commands  defined  are:) 4 127.972 ws
37.336 137.94(character-left  \(^B\)) 2 125.92 ws
37.336 124.5(character-right  \(^F\)) 2 131.26 ws
37.336 111.06(beginning-of-text  \(^A\)) 2 146.608 ws
37.336 97.62(end-of-text  \(^E\)) 2 114.604 ws
37.336 84.18(erase  \(^H  or  DEL\)) 6 126.592 ws
37.336 70.74(delete  \(^D\)) 2 91.276 ws
394.8 39.12(7-) 2 404.796 as
407.796 39.12(9) 1 413.796 as
newpath
16.24 676.06 moveto
16.24 677.06 lineto
412.24 677.06 lineto
412.24 676.06 lineto
closepath
gsave eofill grestore
37.576 659.5(class  FieldEditor  :  public  MonoGlyph  {) 10 228.34 ws
37.576 646.06(public:) 7 70.912 as
48.244 632.62(FieldEditor\() 12 106.912 as
58.912 619.18(const  char*  sample,  Style*,  Action*  ok  =  nil,  Action*  cancel  =  nil) 22 376.42 ws
48.244 605.74(\);) 2 55.576 as
48.244 592.3(FieldEditor\() 12 106.912 as
58.912 578.86(const  String&  sample,  Style*,  Action*  ok  =  nil,  Action*  cancel  =  nil) 22 388.444 ws
48.244 565.42(\);) 2 55.576 as
48.244 545.98(void  field\(const  char*\);) 4 160.888 ws
48.244 532.54(void  field\(const  String&\);) 4 172.912 ws
48.244 519.1(void  select\(int  pos\);) 4 143.572 ws
48.244 505.66(void  select\(int  left,  int  right\);) 8 187.24 ws
48.244 492.22(void  edit\(\);) 2 101.908 ws
48.244 478.78(void  edit\(const  char*,  int  left,  int  right\);) 12 238.9 ws
48.244 465.34(void  edit\(const  String&,  int  left,  int  right\);) 12 250.924 ws
48.244 451.9(const  char*  text\(\)  const;) 6 163.888 ws
48.244 438.46(void  text\(String&\)  const;) 4 168.916 ws
37.576 425.02(};) 2 46.672 as
12 /Times-Roman sf
120.922 405.58(Figure  7.6:) 2 173.59 ws
184.258 405.58(Field  editor  class  interface.) 6 314.23 ws
newpath
16.24 395.4 moveto
16.24 396.4 lineto
412.24 396.4 lineto
412.24 395.4 lineto
closepath
gsave eofill grestore
showpage
%%Page: 10 10
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
37.336 671.36(select-all  \(^U\)) 2 105.94 ws
37.336 657.92(select-word\(^W\)) 15 118.264 as
16 638.48(Strings  that  are  too  long  to  fit  into  the  editor  can  be  scrolled  horizontally.   Clicking) 29 412 ws
16 624.74(the  middle  button  inside  the  editor  initiates  \252grab-scrolling\272.   While  the  button  is) 23 412 ws
16 611(down  the  editor  scrolls  the  text  to  follow  the  pointer,  giving  the  appearance  that) 26 412 ws
16 597.26(the  user  is  dragging  the  text.   Clicking  the  right  button  engages  \252rate-scrolling\272,  a) 25 412 ws
16 583.52(joy-stick-like  scrolling  interface  in  which  the  scrolling  rate  increases  as  the  user) 22 412 ws
16 569.78(drags  the  pointer  away  from  the  initial  click  location.) 16 270.964 ws
26.668 555.14(The  field  editor  constructor  is  passed  a  sample  string,  used  to  compute  its) 24 412 ws
16 541.4(natural  size,  a  style  for  customization,  an  action  to  execute  when  editing  returns) 24 412 ws
16 527.66(normally,  and  an  action  to  execute  when  editing  is  terminated.   Editing  normally) 23 412 ws
16 513.92(completes  when  a  carriage  return  or  tab  is  entered;  abnormally  when  an  escape) 24 412 ws
16 500.18(character  is  entered.) 4 112.288 ws
26.668 485.54(FieldEditor::field  sets  the  contents  of  the  string  being  edited.   FieldEditor::select) 19 412 ws
16 471.8(sets  the  insertion  point  or  subrange  within  the  edit  string.   FieldEditor::edit) 21 412 ws
16 458.06(initiates  an  edit.   Specifying  a  string  and  selection  range  is  short-hand  for  first) 25 412 ws
16 444.32(calling  FieldEditor::field  and  FieldEditor::select.   FieldEditor::text  returns  the) 13 412 ws
16 430.58(current  value  of  the  string  being  edited.   The  caller  must  copy  the  string  to  save) 29 412 ws
16 416.84(the  contents,  as  it  will  be  modified  by  a  subsequent  edit.) 20 285.316 ws
394.8 39.12(7-10) 4 416.796 as
showpage
%%Trailer
end restore
%%Pages: 10
%!PS-Adobe-2.0
%%Creator: ./ch8.doc
%%Pages: atend
%%EndComments
save 20 dict begin

/sf {   % scale /fontName => -  (set current font)
    {findfont} stopped {pop /Courier findfont} if
    exch scalefont setfont
} def

/ws {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 8#40 4 3 roll
    widthshow
} def

/as {
    4 index 6 4 roll moveto sub
    2 index stringwidth pop sub
    exch div 0 3 2 roll
    ashow
} def

%%EndProlog
%%Page: 1 1
92 37.08 translate
0 0 0 setrgbcolor
24 /Times-Bold sf
16 662.72(Chapter  8) 2 119.32 ws
16 625.76(Operating  System  Interface) 4 299.944 ws
12 /Times-Roman sf
16 597.44(This  chapter  describes  the  classes  that  abstract  operating  system  services.   These) 21 412 ws
16 583.7(classes  do  not  yet  cover  the  entire  range  of  operating  system  operations,  but  they) 26 412 ws
16 569.96(offer  higher-level  abstractions  in  some  cases,  relief  from  name  space  concerns  in) 22 412 ws
16 556.22(other  cases,  and  greater  application  portability.) 10 240.952 ws
26.668 541.58(The  classes  are  presented  below  in  alphabetical  order.   A  ) 19 321.375 ws
12 /Times-Bold sf
321.375 541.58(directory) 9 368.691 as
12 /Times-Roman sf
368.691 541.58(  is  a  list) 6 412 ws
16 527.84(of  files  or  other  directories.   A  ) 13 184.676 ws
12 /Times-Bold sf
184.676 527.84(file) 4 200.672 as
12 /Times-Roman sf
200.672 527.84(  is  a  list  of  bytes.   Both  directories  and) 17 412 ws
16 514.1(files  are  accessed  by  a  string  name.   A  ) 17 219.05 ws
12 /Times-Bold sf
219.05 514.1(list) 4 234.386 as
12 /Times-Roman sf
234.386 514.1(  is  an  ordered  sequence  of  objects,) 12 412 ws
16 500.36(parameterized  by  the  element  type.   The  math  class  provides  an  interface  to) 23 412 ws
16 486.62(common  mathematical  operations  on  concrete  types  \(e.g.,  ints  and  floats\).   The) 21 412 ws
16 472.88(memory  class  provides  operations  on  variable-length  arrays  of  bytes.   A  ) 21 370.31 ws
12 /Times-Bold sf
370.309 472.88(string) 6 400.309 as
12 /Times-Roman sf
400.309 472.88(  is) 2 412 ws
16 459.14(a  variable-length  list  of  characters.   A  ) 13 200.654 ws
12 /Times-Bold sf
200.654 459.14(table) 5 225.986 as
12 /Times-Roman sf
225.986 459.14(  is  an  associative  map  from  a  key  type) 16 412 ws
16 445.4(to  a  data  type.) 6 83.32 ws
26.668 430.76(List  and  table  are  generic  classes,  parameterized  by  other  types.   Because) 21 412 ws
16 417.02(no  C++  implementation  currently  supports  a  generic  mechanism  \(though  the) 18 412 ws
16 403.28(language  defines  a  template  construct\),  it  is  necessary  to  define  list  and  table) 24 412 ws
16 389.54(classes  using  preprocessor  macros  and  must  be  instantiated  explicitly.) 16 350.956 ws
18 /Times-Bold sf
16 348.26(8.1) 3 38.5 as
46 348.26(Directory) 9 119.962 as
12 /Times-Roman sf
16 315.86(Figure  8.1  shows  the  directory  class  interface.   The  static  member  functions) 21 412 ws
16 302.12(Directory::current  and  Directory::open  return  a  pointer  to  a  DirectoryInfo  object) 18 412 ws
16 288.38(suitable  for  passing  to  the  directory  constructor.   Directory::current  looks  in  the) 21 412 ws
16 274.64(default  directory  for  the  application  context,  Directory::open  tries  to  find  the) 20 412 ws
16 260.9(directory  with  the  given  name.   If  the  name  cannot  be  found  or  access  is  denied  to) 31 412 ws
16 247.16(the  directory,  Director::open  returns  nil.) 8 207.964 ws
393.84 36.24(8-) 2 403.836 as
406.836 36.24(1) 1 412.836 as
newpath
17.2 227.74 moveto
17.2 228.74 lineto
413.2 228.74 lineto
413.2 227.74 lineto
closepath
gsave eofill grestore
38.536 211.18(class  Directory  {) 4 119.608 ws
38.536 197.74(public:) 7 71.872 as
49.204 184.3(Directory\(DirectoryInfo*\);) 26 178.492 as
49.204 170.86(static  DirectoryInfo*  current\(\);) 4 197.824 ws
49.204 157.42(static  DirectoryInfo*  open\(const  char*  name\);) 8 271.144 ws
49.204 143.98(virtual  int  count\(\)  const;) 6 165.532 ws
49.204 130.54(virtual  const  char*  name\(int  i\)  const;) 10 226.18 ws
49.204 117.1(virtual  int  index\(const  char*\)  const;) 8 220.516 ws
49.204 103.66(virtual  void  close\(\);) 4 143.86 ws
38.536 90.2199(};) 2 47.632 as
12 /Times-Roman sf
126.724 70.7799(Figure  8.1:) 2 179.392 ws
190.06 70.7799(Directory  class  interface.) 4 310.348 ws
newpath
17.2 60.6 moveto
17.2 61.6 lineto
413.2 61.6 lineto
413.2 60.6 lineto
closepath
gsave eofill grestore
showpage
%%Page: 2 2
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 671.36(Directory::count  returns  the  number  of  entries  \(files  and  directories\),  including) 18 412 ws
16 657.62(any  special  system  entries  such  as  \252.\272  and  \252..\272  on  Unix.   Directory::name  returns) 25 412 ws
16 643.88(the  name  of  the  specified  entry.   Directory::index  returns  the  index  of  the  entry) 25 412 ws
16 630.14(that  matches  the  given  name  or  -1  if  no  match  is  found.   Directory::close  discards) 27 412 ws
16 616.4(the  information  associated  with  the  directory.) 10 233.968 ws
18 /Times-Bold sf
16 575.12(8.2) 3 38.5 as
46 575.12(File) 4 74.998 as
12 /Times-Roman sf
16 542.72(Figure  8.2  shows  the  file  class  interface  and  subclasses  for  input  handling.   The) 25 412 ws
16 528.98(base  class  File  is  abstract  and  defines  no  data  access  functions.   Currently,  only) 25 412 ws
16 515.24(input  files  are  implemented.   File::name  returns  the  string  name  of  the  file.) 23 412 ws
16 501.5(File::length  returns  the  number  of  bytes  in  the  file.   File::close  releases  any) 23 412 ws
16 487.76(information  associated  with  the  file.) 8 188.98 ws
26.668 473.12(File::limit  sets  an  upper  bound  on  the  size  of  a  buffer  to  allocate  for  file  storage.) 30 412 ws
16 459.38(By  default,  a  file  attempts  to  allocate  contiguous  storage  for  its  entire  contents.) 24 412 ws
393.84 36.24(8-) 2 403.836 as
406.836 36.24(2) 1 412.836 as
newpath
17.2 432.22 moveto
17.2 433.22 lineto
413.2 433.22 lineto
413.2 432.22 lineto
closepath
gsave eofill grestore
38.536 415.66(class  File  {) 4 92.296 ws
38.536 402.22(protected:) 10 86.524 as
49.204 388.78(File\(FileInfo*\);) 16 123.868 as
38.536 375.34(public:) 7 71.872 as
49.204 361.9(virtual  const  char*  name\(\)  const;) 8 207.172 ws
49.204 348.46(virtual  long  length\(\)  const;) 6 177.532 ws
49.204 335.02(virtual  void  close\(\);) 4 143.86 ws
49.204 315.58(virtual  void  limit\(unsigned  int  buffersize\);) 8 251.86 ws
38.536 302.14(};) 2 47.632 as
38.536 282.7(class  InputFile  :  public  File  {) 10 178.636 ws
38.536 269.26(protected:) 10 86.524 as
49.204 255.82(InputFile\(FileInfo*\);) 21 149.2 as
38.536 242.38(public:) 7 71.872 as
49.204 228.94(static  InputFile*  open\(const  char*  name\);) 8 249.172 ws
49.204 215.5(virtual  int  read\(const  char*&  start\);) 8 219.172 ws
38.536 202.06(};) 2 47.632 as
38.536 182.62(class  StdInput  :  public  InputFile  {) 10 201.304 ws
38.536 169.18(public:) 7 71.872 as
49.204 155.74(StdInput\(\);) 11 101.872 as
38.536 142.3(};) 2 47.632 as
12 /Times-Roman sf
125.536 122.86(Figure  8.2:) 2 178.204 ws
188.872 122.86(File  and  input  subclasses.) 6 311.536 ws
newpath
17.2 112.68 moveto
17.2 113.68 lineto
413.2 113.68 lineto
413.2 112.68 lineto
closepath
gsave eofill grestore
showpage
%%Page: 3 3
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(This  approach  can  allow  for  simpler  application  code  and  can  be  implemented) 22 412 ws
16 657.62(very  efficiently  on  systems  with  memory-mapped  files.) 12 281.632 ws
26.668 642.98(The  contents  of  an  input  file  can  be  accessed  but  not  modified.   InputFile::open) 25 412 ws
16 629.24(returns  nil  if  the  named  file  cannot  be  found  or  is  not  readable.   InputFile::read) 27 412 ws
16 615.5(allocates  a  data  area  for  the  file  contents,  sets  the  start  parameter  to  the  beginning) 28 412 ws
16 601.76(of  the  area,  and  returns  the  length  of  the  area.   If  no  storage  limit  has  been) 31 412 ws
16 588.02(specified  and  the  file  is  on  disk  \(as  opposed  to  a  terminal  or  pipe\),  then  read  will) 32 412 ws
16 574.28(return  the  entire  file.   The  standard  input  subclass  is  an  input  file  that  reads  from) 29 412 ws
16 560.54(the  system  default  input.) 6 133.996 ws
18 /Times-Bold sf
16 519.26(8.3) 3 38.5 as
46 519.26(List) 4 76.006 as
12 /Times-Roman sf
16 486.86(Figure  8.3  shows  the  list  generic  class  interface.   The  implementation  of  lists) 23 412 ws
16 473.12(uses  a  dynamic  array  with  an  insertion  gap,  meaning  that  large  lists  are  very) 26 412 ws
16 459.38(space-efficient.   The  time  efficiency  depends  on  the  distribution  of  insertions\261if) 19 412 ws
16 445.64(the  insertion  position  moves  frequently,  the  list  will  do  excessive  copying.) 20 372.652 ws
393.84 36.24(8-) 2 403.836 as
406.836 36.24(3) 1 412.836 as
newpath
17.2 417.82 moveto
17.2 418.82 lineto
413.2 418.82 lineto
413.2 417.82 lineto
closepath
gsave eofill grestore
38.536 401.26(class  List\(T\)  {) 4 107.62 ws
38.536 387.82(public:) 7 71.872 as
49.204 374.38(List\(T\)\(long  initial_size  =  0\);) 6 190.3 ws
49.204 354.94(long  count\(\)  const;) 4 139.864 ws
49.204 341.5(T&  item\(long  index\)  const;) 6 180.868 ws
49.204 328.06(void  prepend\(T&\)  const;) 4 168.52 ws
49.204 314.62(void  append\(T&  const\);) 4 164.524 ws
49.204 301.18(void  insert\(long  index,  T&  const\);) 8 213.532 ws
49.204 287.74(void  remove\(long  index\);) 4 171.856 ws
49.204 274.3(void  remove_all\(\);) 2 138.856 ws
38.536 260.86(};) 2 47.632 as
38.536 241.42(class  ListItr\(List\(T\)\)  {) 4 145.612 ws
38.536 227.98(public:) 7 71.872 as
49.204 214.54(ListItr\(List\(T\)\)\(List\(T\)&\);) 27 175.852 as
49.204 195.1(boolean  more\(\)  const;) 4 154.516 ws
49.204 181.66(T  cur\(\)  const;) 4 114.52 ws
49.204 168.22(T&  cur_ref\(\)  const;) 4 143.176 ws
49.204 154.78(void  remove_cur\(\);) 2 142.18 ws
49.204 141.34(void  next\(\);) 2 105.532 ws
38.536 127.9(};) 2 47.632 as
12 /Times-Roman sf
109.054 108.46(Figure  8.3:) 2 161.722 ws
172.39 108.46(List  and  iterator  class  interfaces.) 8 328.018 ws
newpath
17.2 98.28 moveto
17.2 99.28 lineto
413.2 99.28 lineto
413.2 98.28 lineto
closepath
gsave eofill grestore
showpage
%%Page: 4 4
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
26.668 671.36(The  list  constructor  takes  an  optional  initial  size  for  the  dynamic  array.   For  lists) 27 412 ws
16 657.62(that  are  known  to  be  large,  specifying  an  initial  size  avoids  the  cost  of  growing  the) 30 412 ws
16 643.88(array  dynamically.   List::count  returns  the  number  of  elements  in  the  list  \(not  the) 25 412 ws
16 630.14(size  of  the  array\).   List::item  returns  the  indexed  item.) 17 273.46 ws
26.668 615.5(List::prepend  adds  an  item  at  the  beginning  of  the  list,  List::append  at  the  end,) 26 412 ws
16 601.76(and  List::insert  before  an  indexed  item.   List::remove  deletes  the  item  specified  by) 23 412 ws
16 588.02(the  given  index.   List::remove_all  deletes  all  the  items  in  the  list.) 21 325.492 ws
26.668 573.38(ListItr  is  a  class  for  iterating  through  the  elements  of  a  list.   ListItr  is) 27 412 ws
16 559.64(parameterized  explicitly  by  the  list  type  and  implicitly  by  the  element  type.   The) 25 412 ws
16 545.9(constructor  is  given  the  target  list.   ListItr::more  returns  true  if  additional  elements) 23 412 ws
16 532.16(are  available  in  the  iteration.   ListItr::cur  returns  the  current  iteration's  item.) 21 412 ws
16 518.42(ListItr::cur_ref  returns  a  reference  to  the  item.   ListItr::remove_cur  deletes  the) 19 412 ws
16 504.68(current  item  from  the  list.   ListItr::next  moves  the  iteration  to  the  next  item  in  the) 29 412 ws
16 490.94(list.   No  modifications  should  be  made  to  the  list  during  an  iteration  \(except  in  the) 29 412 ws
16 477.2(last  step\),  as  this  may  cause  unexpected  or  erroneous  results.) 18 306.94 ws
26.668 462.56(As  an  example,  consider  a  list  of  glyphs  \(more  precisely,  a  list  of  pointers  to) 28 412 ws
16 448.82(glyphs\).   We  could  declare  such  a  list  in  a  header  or  source  file  as  follows:) 29 371.752 ws
37.336 429.38(declareList\(GlyphList,Glyph*\);) 30 189.652 as
16 409.94(Only  one  source  file  may  contain  the  expansion  of  the  implementation:) 20 357.292 ws
37.336 390.5(implementList\(GlyphList,Glyph*\);) 32 206.344 as
16 371.06(A  loop  to  iterate  over  all  the  glyphs  in  a  list  could  be  written  as  follows:) 30 360.976 ws
37.336 351.62(for  \(ListItr\(GlyphList\)  i\(list\);  i.more\(\);  i.next\(\)\)  {) 10 273.4 ws
48.004 338.18(Glyph*  g  =  i.cur\(\);) 6 138.76 ws
48.004 324.74(//  do  something  with  g) 8 156.016 ws
37.336 311.3(}) 1 43.096 as
26.668 291.86(A  list  makes  no  assumptions  about  its  element  type.   In  particular,  destroying  a) 25 412 ws
16 278.12(list  of  pointers  will  not  destroy  the  objects  that  are  the  targets  of  the  pointers.) 28 384.964 ws
18 /Times-Bold sf
16 236.84(8.4) 3 38.5 as
46 236.84(Math) 4 87.994 as
12 /Times-Roman sf
16 204.44(Figure  8.4  shows  the  math  class  interface.   One  cannot  create  a  \252math  object\272;  all) 27 412 ws
16 190.7(the  member  functions  are  static.   Math::min  and  Math::max  return  the  minimum) 21 412 ws
16 176.96(and  maximum  of  two  or  four  numbers,  respectively.   For  the  sake  of  brevity  only) 27 412 ws
16 163.22(the  floating  point  definitions  are  shown,  but  Math::min  and  Math::max  are  also) 22 412 ws
16 149.48(defined  for  ints,  longs,  unsigned  ints,  unsigned  longs,  and  doubles.) 18 335.992 ws
26.668 134.84(Math::abs  returns  the  absolute  value  of  a  number.   Math::round  returns  the) 21 412 ws
16 121.1(integer  nearest  to  a  floating  point  value.   Math::equal  compares  two  floating  point) 23 412 ws
16 107.36(numbers  and  returns  whether  they  are  within  a  given  epsilon  \(the  third  parameter\)) 24 412 ws
16 93.62(of  each  other.) 4 81.64 ws
393.84 36.24(8-) 2 403.836 as
406.836 36.24(4) 1 412.836 as
showpage
%%Page: 5 5
92 37.08 translate
0 0 0 setrgbcolor
18 /Times-Bold sf
16 418.2(8.5) 3 38.5 as
46 418.2(Memory) 6 111.97 as
12 /Times-Roman sf
16 385.8(Figure  8.5  shows  the  memory  class  interface.   Like  the  math  class,  the  memory) 25 412 ws
16 372.06(class  consists  solely  of  static  member  functions.   Memory::copy  writes  a  specified) 21 412 ws
16 358.32(number  of  bytes  from  one  memory  location  to  another.   Memory::compare) 19 412 ws
16 344.58(determines  if  a  specified  number  of  bytes  at  one  memory  location  is  identical  to) 26 412 ws
16 330.84(those  at  another  location.   If  so,  Memory::compare  returns  0.   Otherwise,  it  returns) 24 412 ws
16 317.1(a  non-zero  value.   Memory::zero  sets  a  specified  number  of  bytes  to  zero  starting) 25 412 ws
16 303.36(at  a  given  memory  location.) 8 150.316 ws
26.668 288.72(In  certain  circumstances,  memory  operations  are  faster  than  a  loop  over  a  set) 24 412 ws
16 274.98(of  elements.   Memory::zero  and  Memory::copy  are  useful  for  implementing  a) 19 412 ws
16 261.24(dynamic  array,  quickly  clearing  or  copying  data  when  the  array  grows.) 20 355.912 ws
393.84 36.24(8-) 2 403.836 as
406.836 36.24(5) 1 412.836 as
newpath
17.2 670.3 moveto
17.2 671.3 lineto
413.2 671.3 lineto
413.2 670.3 lineto
closepath
gsave eofill grestore
38.536 653.74(class  Math  {) 4 98.956 ws
38.536 640.3(public:) 7 71.872 as
49.204 626.86(static  float  min\(float  a,  float  b\);) 10 199.852 ws
49.204 613.42(static  float  max\(float  a,  float  b\);) 10 201.844 ws
49.204 599.98(static  float  min\(float  a,  float  b,  float  c,  float  d\);) 18 273.172 ws
49.204 586.54(static  float  max\(float  a,  float  b,  float  c,  float  d\);) 18 275.164 ws
49.204 567.1(static  int  abs\(int\);) 4 133.204 ws
49.204 553.66(static  long  abs\(long\);) 4 150.532 ws
49.204 540.22(static  double  abs\(double\);) 4 173.188 ws
49.204 526.78(static  int  round\(float\);) 4 154.528 ws
49.204 513.34(static  int  round\(double\);) 4 165.196 ws
49.204 499.9(static  boolean  equal\(float  x,  float  y,  float  e\);) 14 260.164 ws
49.204 486.46(static  boolean  equal\(double  x,  double  y,  double  e\);) 14 292.168 ws
38.536 473.02(};) 2 47.632 as
12 /Times-Roman sf
137.05 453.58(Figure  8.4:) 2 189.718 ws
200.386 453.58(Math  class  interface.) 4 300.022 ws
newpath
17.2 443.4 moveto
17.2 444.4 lineto
413.2 444.4 lineto
413.2 443.4 lineto
closepath
gsave eofill grestore
newpath
17.2 224.86 moveto
17.2 225.86 lineto
413.2 225.86 lineto
413.2 224.86 lineto
closepath
gsave eofill grestore
12 /Times-Roman sf
38.536 208.3(class  Memory  {) 4 114.952 ws
38.536 194.86(public:) 7 71.872 as
49.204 181.42(static  void  copy\(const  void*,  void*  to,  unsigned  int  nbytes\);) 16 337.204 ws
49.204 167.98(static  void  compare\(const  void*,  const  void*,  unsigned  int  nbytes\);) 16 371.188 ws
49.204 154.54(static  void  zero\(void*,  unsigned  int  nbytes\);) 10 260.524 ws
38.536 141.1(};) 2 47.632 as
12 /Times-Roman sf
129.052 121.66(Figure  8.5:) 2 181.72 ws
192.388 121.66(Memory  class  interface.) 4 308.02 ws
newpath
17.2 111.48 moveto
17.2 112.48 lineto
413.2 112.48 lineto
413.2 111.48 lineto
closepath
gsave eofill grestore
showpage
%%Page: 6 6
92 37.08 translate
0 0 0 setrgbcolor
18 /Times-Bold sf
16 667.52(8.6) 3 38.5 as
46 667.52(String) 6 94.006 as
12 /Times-Roman sf
16 635.12(Figure  8.6  shows  the  string  class  interface.   The  purpose  of  the  string  class  is  to) 29 412 ws
16 621.38(provide  a  convenient  set  of  operations  for  manipulating  variable-length  character) 18 412 ws
16 607.64(arrays,  ) 2 51.4501 ws
12 /Times-Italic sf
51.4501 607.64(not) 3 66.7861 as
12 /Times-Roman sf
66.7861 607.64(  to  manage  storage.   The  base  class  does  not  allocate  or  free  any  storage) 27 412 ws
16 593.9(associated  with  the  characters.) 6 161.956 ws
26.668 579.26(Three  string  constructors  are  available.   The  first,  with  no  arguments,  creates  an) 23 412 ws
16 565.52(uninitialized  string  that  should  be  assigned  to  another  string  before  use.   The) 23 412 ws
393.84 36.24(8-) 2 403.836 as
406.836 36.24(6) 1 412.836 as
newpath
17.2 550.3 moveto
17.2 551.3 lineto
413.2 551.3 lineto
413.2 550.3 lineto
closepath
gsave eofill grestore
38.536 533.74(class  String  {) 4 102.964 ws
38.536 520.3(public:) 7 71.872 as
49.204 506.86(String\(\);) 9 89.872 as
49.204 493.42(String\(const  char*\);) 2 144.856 ws
49.204 479.98(String\(const  char*,  int  length\);) 6 196.528 ws
49.204 460.54(const  char*  string\(\)  const;) 6 174.184 ws
49.204 447.1(int  length\(\)  const;) 4 134.536 ws
49.204 433.66(virtual  boolean  null_terminated\(\)  const;) 6 240.184 ws
49.204 420.22(virtual  unsigned  long  hash\(\)  const;) 8 215.86 ws
49.204 400.78(virtual  String&  operator  =\(const  String&\);) 8 253.3 ws
49.204 387.34(virtual  boolean  operator  ==\(const  String&\)  const;) 10 287.716 ws
49.204 373.9(virtual  boolean  operator  !=\(const  String&\)  const;) 10 284.944 ws
49.204 360.46(virtual  boolean  operator  >\(const  String&\)  const;) 10 280.948 ws
49.204 347.02(virtual  boolean  operator  >=\(const  String&\)  const;) 10 287.716 ws
49.204 333.58(virtual  boolean  operator  <\(const  String&\)  const;) 10 280.948 ws
49.204 320.14(virtual  boolean  operator  <=\(const  String&\)  const;) 10 287.716 ws
49.204 306.7(virtual  boolean  case_insensitive_equal\(const  String&\)  const;) 8 341.176 ws
49.204 287.26(char  operator[]\(int  index\)  const;) 6 202.828 ws
49.204 273.82(virtual  String  substr\(int  start,  int  length\)  const;) 12 272.212 ws
49.204 260.38(String  left\(int  length\)  const;) 6 182.872 ws
49.204 246.94(String  right\(int  start\)  const;) 6 180.208 ws
49.204 233.5(virtual  void  set_to_substr\(int  start,  int  length\);) 10 270.544 ws
49.204 220.06(void  set_to_left\(int  length\);) 4 181.204 ws
49.204 206.62(void  set_to_right\(int  start\);) 4 178.54 ws
49.204 187.18(virtual  int  search\(int  start,  char\)  const;) 10 232.504 ws
49.204 173.74(int  index\(char\)  const;) 4 151.852 ws
49.204 160.3(int  rindex\(char\)  const;) 4 155.848 ws
49.204 140.86(virtual  boolean  convert\(int&\)  const;) 6 222.184 ws
49.204 127.42(virtual  boolean  convert\(long&\)  const;) 6 230.848 ws
49.204 113.98(virtual  boolean  convert\(float&\)  const;) 6 231.508 ws
49.204 100.54(virtual  boolean  convert\(double&\)  const;) 6 242.176 ws
38.536 87.0999(};) 2 47.632 as
12 /Times-Roman sf
135.046 67.6599(Figure  8.6:) 2 187.714 ws
198.382 67.6599(String  class  interface.) 4 302.026 ws
newpath
17.2 57.4799 moveto
17.2 58.4799 lineto
413.2 58.4799 lineto
413.2 57.4799 lineto
closepath
gsave eofill grestore
showpage
%%Page: 7 7
92 37.08 translate
0 0 0 setrgbcolor
12 /Times-Roman sf
16 671.36(second,  with  a  character  pointer,  sets  the  string's  data  to  the  given  pointer.   The) 27 412 ws
16 657.62(string's  length  is  computed  from  the  pointer  under  the  assumption  that  the  data) 24 412 ws
16 643.88(is  null-terminated.   The  third  constructor  takes  a  character  pointer  and  explicit) 21 412 ws
16 630.14(length.   It  does  not  assume  the  data  is  null-terminated.) 17 274.144 ws
26.668 615.5(String::string  returns  a  pointer  to  the  character  data,  which  may  not  be) 22 412 ws
16 601.76(null-terminated.   String::length  returns  the  number  of  characters  in  the  string.) 19 412 ws
16 588.02(String::null_terminated  returns  whether  the  string  is  already  known  to  be) 18 412 ws
16 574.28(null-terminated  \(it  does  not  attempt  to  find  a  null\).   String::hash  returns  a  value  for) 27 412 ws
16 560.54(the  string  data  suitable  for  indexing  the  strings  into  a  hash  table.) 22 323.308 ws
26.668 545.9(The  string  class  provides  operators  for  assignment  and  comparison.   The  second) 21 412 ws
16 532.16(operand  for  these  operations  can  be  a  string  or  a  character  pointer.   In  the  latter) 29 412 ws
16 518.42(case,  the  data  is  assumed  to  be  null-terminated.   String::case_insensitive_equal) 17 412 ws
16 504.68(tests  for  equality  ignoring  the  case  of  the  characters  in  the  strings.) 22 331.276 ws
26.668 490.04(The  subscript  operator  allows  access  to  individual  characters.   It  is  an  error  to) 25 412 ws
16 476.3(pass  a  negative  index  or  an  index  greater  than  or  equal  to  the  length  of  the  string.) 32 412 ws
16 462.56(String::substr  returns  a  new  string  representing  the  part  of  the  original  string) 22 412 ws
16 448.82(begining  at  the  ) 6 95.3421 ws
12 /Times-Italic sf
95.3421 448.82(start) 5 117.35 as
12 /Times-Roman sf
117.35 448.82(  parameter  and  continuing  for  ) 10 271.339 ws
12 /Times-Italic sf
271.339 448.82(length) 6 301.339 as
12 /Times-Roman sf
301.339 448.82(  characters.   If  ) 7 377.317 ws
12 /Times-Italic sf
377.317 448.82(start) 5 399.325 as
12 /Times-Roman sf
399.325 448.82(  is) 2 412 ws
16 435.08(negative,  the  beginning  position  is  the  end  of  the  string  offset  by  ) 24 330.003 ws
12 /Times-Italic sf
330.003 435.08(start) 5 352.011 as
12 /Times-Roman sf
352.011 435.08(.   If  ) 5 370.855 ws
12 /Times-Italic sf
370.855 435.08(length) 6 400.855 as
12 /Times-Roman sf
400.855 435.08(  is) 2 412 ws
16 421.34(\2611,  then  the  remainder  of  the  string  is  included.   String::substr  does  not  copy  the) 27 412 ws
16 407.6(data,  it  simply  creates  another  string  that  points  into  the  same  data  as  the  original) 28 412 ws
16 393.86(string.   String::left  and  String::right  are  short-hand  for  accessing  the  beginning  or) 21 412 ws
16 380.12(end  of  a  string.   String::set_to_substr,  String::set_to_left,  and  String::set_to_right) 15 412 ws
16 366.38(are  convenience  for  changing  a  string  to  a  particular  substring  instead  of  creating) 24 412 ws
16 352.64(a  new  string.) 4 77.656 ws
26.668 338(String::search  returns  the  index  of  the  occurrence  of  the  given  character  after) 22 412 ws
16 324.26(the  given  starting  position.   If  the  starting  position  is  negative,  it  is  treated  as  an) 29 412 ws
16 310.52(offset  from  the  end  of  the  string  and  the  search  is  made  right-to-left.   String::index) 27 412 ws
16 296.78(and  String::rindex  are  short-hand  for  searching  from  the  beginning  and  end  of  the) 24 412 ws
16 283.04(string,  respectively.) 2 110.32 ws
26.668 268.4(String::convert  attempts  to  interpret  the  string  as  a  number  and  sets  its) 22 412 ws
16 254.66(parameter  to  the  value.   If  the  conversion  is  successful,  String::convert  returns  true.) 23 412 ws
26.668 240.02(Three  string  subclasses  of  string  are  provided,  all  of  which  have  the  same) 24 412 ws
16 226.28(constructors  and  operations  as  the  base  class.   CopyString  is  a  subclass  that) 23 412 ws
16 212.54(copies  the  string  data  when  constructed  and  frees  the  storage  when  deleted.) 22 412 ws
16 198.8(When  the  copy  is  made,  a  null  is  appended  to  ensure  the  data  is  null-terminated.) 28 412 ws
16 185.06(NullTerminatedString  is  a  subclass  that  guarantees  its  data  is  null-terminated.   If) 21 412 ws
16 171.32(constructed  with  a  normal  string,  it  will  copy  the  data  much  like  a  copy-string.) 26 412 ws
16 157.58(However,  if  the  given  string  is  already  a  copy-string,  then  no  copy  is  made.) 26 412 ws
16 143.84(NullTerminatedString  is  useful  for  passing  string  data  to  external  C  functions,) 20 412 ws
16 130.1(such  as  printf.) 4 83.656 ws
26.668 115.46(The  third  string  subclass  is  UniqueString,  which  uses  a  table  to  map  identical) 24 412 ws
16 101.72(strings  to  the  same  data.   Comparing  unique  strings  for  equality  is  fast  because  the) 27 412 ws
16 87.9801(implementation  can  compare  pointers  instead  of  the  string  data.   Unique  strings) 21 412 ws
16 74.2401(are  not  null-terminated.) 4 128.98 ws
393.84 36.24(8-) 2 403.836 as
406.836 36.24(7) 1 412.836 as
showpage
%%Page: 8 8
92 37.08 translate
0 0 0 setrgbcolor
18 /Times-Bold sf
16 667.52(8.7) 3 38.5 as
46 667.52(Table) 5 90.01 as
12 /Times-Roman sf
16 635.12(Figure  8.7  shows  the  table  class  interface.   Table  is  a  generic  class  that  is) 27 412 ws
16 621.38(parameterized  by  a  key  type  and  a  value  type.   The  constructor  is  given  a  size  for) 31 412 ws
16 607.64(the  hash  table  implementation.   For  good  access  performance,  the  size  should  be) 23 412 ws
16 593.9(roughly  twice  the  expected  number  of  keys.) 12 226.288 ws
26.668 579.26(Table::insert  stores  a  <key,value>  pair.   Table::find  searches  an  entry  with) 19 412 ws
16 565.52(the  given  key.   If  such  an  entry  exists,  Table::find  sets  ) 21 298.496 ws
12 /Times-Italic sf
298.496 565.52(value) 5 324.488 as
12 /Times-Roman sf
324.488 565.52(  and  returns  true.) 6 412 ws
16 551.78(Otherwise,  it  leaves  the  parameter  unmodified  and  returns  false.   Table::remove) 19 412 ws
16 538.04(deletes  a  <key,value>  pair  from  the  table  if  one  exists.   Table::find_and_remove) 21 412 ws
16 524.3(combines  the  find  and  remove  operations  in  a  single  call.) 18 289.96 ws
26.668 509.66(If  the  same  key  is  inserted  more  than  once,  Table::find  will  return  the  most) 26 412 ws
16 495.92(recently  inserted  value.   Similarly,  Table::remove  will  delete  the  most  recently) 19 412 ws
16 482.18(inserted  pair.) 2 78.652 ws
26.668 467.54(TableIterator  allows  one  to  iterate  over  all  the  <key,value>  pairs  defined  in  a) 24 412 ws
16 453.8(table.   TableIterator  is  parameterized  explicitly  by  the  table  type,  implicitly  by  the) 23 412 ws
16 440.06(key  and  value  types.   TableIterator::cur_key  and  TableIterator::cur_value  return) 15 412 ws
16 426.32(the  current  entry  information.   TableIterator::more  tests  if  additional  entries  are) 19 412 ws
16 412.58(defined.   TableIterator::next  moves  to  the  next  entry  in  the  table.) 19 324.448 ws
393.84 36.24(8-) 2 403.836 as
406.836 36.24(8) 1 412.836 as
newpath
14.3201 361.18 moveto
14.3201 362.18 lineto
410.32 362.18 lineto
410.32 361.18 lineto
closepath
gsave eofill grestore
35.6561 344.62(unsigned  long  key_to_hash\(Key\);) 4 198.304 ws
35.6561 325.18(class  Table\(Key,Value\)  {) 4 157.708 ws
35.6561 311.74(public:) 7 68.9921 as
46.3241 298.3(Table\(Key,Value\)\(int  hash_table_size\);) 2 236.272 ws
46.3241 278.86(void  insert\(Key,  Value\);) 4 163.3 ws
46.3241 265.42(boolean  find\(Value&,  Key\);) 4 181.96 ws
46.3241 251.98(void  remove\(Key\);) 2 137.968 ws
46.3241 238.54(boolean  find_and_remove\(Value&,  Key\);) 4 247.276 ws
35.6561 225.1(};) 2 44.752 as
35.6561 205.66(class  TableIterator\(Table\(Key,Value\)\)  {) 4 228.34 ws
46.3241 192.22(TableIterator\(Table\(Key,Value\)\)\(Table\(Key,Value\)&\);) 51 311.548 as
46.3241 172.78(Key&  cur_key\(\);) 2 128.632 ws
46.3241 159.34(Value&  cur_value\(\);) 2 145.96 ws
46.3241 145.9(boolean  more\(\);) 2 123.304 ws
46.3241 132.46(boolean  next\(\);) 2 119.308 ws
35.6561 119.02(};) 2 44.752 as
12 /Times-Roman sf
133.174 99.5799(Figure  8.7:) 2 185.842 ws
196.51 99.5799(Table  class  interface.) 4 298.138 ws
newpath
14.3201 89.4 moveto
14.3201 90.4 lineto
410.32 90.4 lineto
410.32 89.4 lineto
closepath
gsave eofill grestore
showpage
%%Trailer
end restore
%%Pages: 8
