#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t0/Imakefile t0/Makefile
#   t0/main.c t1/Imakefile t1/Makefile t1/main.c t2/Imakefile
#   t2/Makefile t2/main.c t3/Imakefile t3/Makefile t3/main.c
#   t4/Imakefile t4/Makefile t4/fontsample.c t4/fontsample.h t4/main.c
#   t5/Imakefile t5/Makefile t5/fontbrowser.c t5/fontbrowser.h
#   t5/fontsample.c t5/fontsample.h t5/main.c t6/Imakefile t6/Makefile
#   t6/fontbrowser.c t6/fontbrowser.h t6/fontsample.c t6/fontsample.h
#   t6/main.c t7/Imakefile t7/Makefile t7/cyclebutton.c
#   t7/cyclebutton.h t7/fontbrowser.c t7/fontbrowser.h t7/fontsample.c
#   t7/fontsample.h t7/main.c t8/Imakefile t8/Makefile
#   t8/cyclebutton.c t8/cyclebutton.h t8/fontbrowser.c
#   t8/fontbrowser.h t8/fontsample.c t8/fontsample.h t8/main.c
#   t9/Imakefile t9/Makefile t9/cyclebutton.c t9/cyclebutton.h
#   t9/fontbrowser.c t9/fontbrowser.h t9/fontsample.c t9/fontsample.h
#   t9/main.c t9/stringbutton.c t9/stringbutton.h
# Wrapped by calder@interviews on Mon Nov 27 15:40:54 1989
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test ! -d 't0' ; then
    echo shar: Creating directory \"'t0'\"
    mkdir 't0'
fi
if test ! -d 't1' ; then
    echo shar: Creating directory \"'t1'\"
    mkdir 't1'
fi
if test ! -d 't2' ; then
    echo shar: Creating directory \"'t2'\"
    mkdir 't2'
fi
if test ! -d 't3' ; then
    echo shar: Creating directory \"'t3'\"
    mkdir 't3'
fi
if test ! -d 't4' ; then
    echo shar: Creating directory \"'t4'\"
    mkdir 't4'
fi
if test ! -d 't5' ; then
    echo shar: Creating directory \"'t5'\"
    mkdir 't5'
fi
if test ! -d 't6' ; then
    echo shar: Creating directory \"'t6'\"
    mkdir 't6'
fi
if test ! -d 't7' ; then
    echo shar: Creating directory \"'t7'\"
    mkdir 't7'
fi
if test ! -d 't8' ; then
    echo shar: Creating directory \"'t8'\"
    mkdir 't8'
fi
if test ! -d 't9' ; then
    echo shar: Creating directory \"'t9'\"
    mkdir 't9'
fi
if test -f 't0/Imakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t0/Imakefile'\"
else
echo shar: Extracting \"'t0/Imakefile'\" \(220 characters\)
sed "s/^X//" >'t0/Imakefile' <<'END_OF_FILE'
X#
X# InterViews tutorial part 0
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)//**/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    main.o
X
XComplexProgramTarget(t0)
X
XMakeObjectFromSrc(main)
END_OF_FILE
if test 220 -ne `wc -c <'t0/Imakefile'`; then
    echo shar: \"'t0/Imakefile'\" unpacked with wrong size!
fi
# end of 't0/Imakefile'
fi
if test -f 't0/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t0/Makefile'\"
else
echo shar: Extracting \"'t0/Makefile'\" \(5082 characters\)
sed "s/^X//" >'t0/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.41 89/02/21 11:42:35 jim Exp $
X
X#
X# "IVImake.tmpl" - generic imake template customized for InterViews
X#
X# You may change platform-specific parameters in the appropriate .cf
X# configuration files.  You may set site-wide parameters in the file
X# IVsite.def.  You may need a full rebuild if you change any parameters.
X#
X
X# architecture:  MIPSEL
X
X# platform:  $XConsortium: ultrix.cf,v 1.3 89/02/24 13:34:28 jim Exp $
X# operating system:             Ultrix-32 3.0
X
X#
X# Generic make variables
X#
X
X            SHELL = /bin/sh
X
X              TOP = .
X
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X  BOOTSTRAPCPUCMD = cpu
X  BOOTSTRAPMACROS = BOOTSTRAPCFLAGS='$(BOOTSTRAPCFLAGS)' DESTDIR='$(DESTDIR)' \
X			EXTRA_CFLAGS='$(EXTRA_CFLAGS)'
X               CC = cc
X         COMPRESS = compress
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E	 $(STD_CPP_DEFINES)
X           DEPEND = makedepend
X         GENCLASS = genclass
X            IMAKE = imake
X          INSTALL = install
X               LD = ld
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make X=$X
X        MKDIRHIER = mkdirhier
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X             TAGS = ctags
X            TROFF = psroff
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X      CDEBUGFLAGS =
X           CFLAGS = $(CDEBUGFLAGS) $(EXTRA_CFLAGS) \
X			$(INCLUDES) $(STD_DEFINES) $(DEFINES)
X        LINTFLAGS = $(LINTOPTS) $(INCLUDES) $(STD_DEFINES) $(DEFINES) -DLINT
X          LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        MACROFILE = ultrix.cf
X        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS) $(EXTRA_IMAKEOPTS)
X           RM_CMD = $(RM) .emacs_* *.CKP *.ln *.BAK *.bak *.a *.o *..c ,* *~ \
X			a.out core errs tags TAGS make.log make.out
X
X#
X# Project.tmpl - project-specific configuration file
X#
X
X          DESTDIR =
X
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(DESTDIR)/usr/bin/X11
X      LOCALBINDIR = $(DESTDIR)/usr/local/bin/
X          INCROOT = $(DESTDIR)/usr/include
X
X           INCDIR = $(INCROOT)/InterViews
X     TEMPLATESDIR = $(INCDIR)/Templates
X           LIBDIR = $(DESTDIR)/usr/lib/X11
X        CONFIGDIR = $(LIBDIR)/config
X      IVCONFIGDIR = $(CONFIGDIR)/InterViews
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)n
X
X        CONFIGSRC = $(TOP)/config
X      IVCONFIGSRC = $(CONFIGSRC)/InterViews
X            IVSRC = $(TOP)/src
X       INCLUDESRC = $(IVSRC)/InterViews
X     TEMPLATESSRC = $(INCLUDESRC)/Templates
X           BINSRC = $(IVSRC)/bin
X         IMAKESRC = $(BINSRC)/imake
X        SCRIPTSRC = $(BINSRC)/scripts
X LIBINTERVIEWSSRC = $(IVSRC)/libInterViews
X    LIBGRAPHICSRC = $(IVSRC)/libgraphic
X       LIBTEXTSRC = $(IVSRC)/libtext
X           MANSRC = $(TOP)/man
X
X        IMAKETMPL = "IVImake.tmpl"
X
X        IMAKEOPTS = -T $(IMAKETMPL) -I$(IVCONFIGDIR) -I$(CONFIGDIR) \
X		    -DUseInstalled
X
X               CC = CC
X               LD = CC
X     DEPENDCFLAGS = $(CFLAGS) -I/usr/include/CC
X     INSTPGMFLAGS = -s
X     AFTERINSTALL = $(RM)
X
X         INCLUDES = -I$(SRC) -I$(GEN) -I$(INCDIR)/Std
X        TEMPLATES = $(TEMPLATESDIR)
X    LIBINTERVIEWS = $(USRLIBDIR)/libInterViews$X.a
X       LIBGRAPHIC = $(USRLIBDIR)/libgraphic.a
X          LIBTEXT = $(USRLIBDIR)/libtext.a
X
X             AOUT = a.out
X              SRC = .
X              GEN = Generated
X                M = MIPSEL
X                X = X11
X
X#
X# InterViews tutorial part 0
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    main.o
X
XPROGRAM		= t0
X
Xall:: $(AOUT)
X
X$(AOUT): $(OBJS) $(LOCAL_LIBRARIES)
X	@echo "linking $@"
X	-@if [ ! -w $@ ]; then $(RM) $@; else exit 0; fi
X	$(CC) -o $@ $(OBJS) $(LOCAL_LIBRARIES) $(LDFLAGS) $(EXTRA_LOAD_FLAGS)
X
Xinstall:: $(AOUT)
X	$(INSTALL) -c $(INSTPGMFLAGS) $(INSTALLFLAGS) $(AOUT) $(BINDIR)/$(PROGRAM)
X	$(AFTERINSTALL) $(AOUT)
X
Xdepend:: $(SRCS)
X	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPENDCFLAGS) -- $(SRCS)
X
Xclean::
X	$(RM) $(AOUT)
X
Xmain.o: $(SRC)/main.c
X	@echo "compiling $(SRC)/main.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/main.c
X
X#
X# Common rules for all Makefiles from "IVImake.tmpl" - do not edit.
X#
X
Xclean::
X	$(RM_CMD) \#*
X
XMakefile::
X	-@if [ -f Makefile ]; then \
X		$(RM) Makefile.bak; \
X		$(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP)
X
Xinstall::
XMakefiles::
X
X#
X# dependencies generated by makedepend
X#
X
X# DO NOT DELETE
X
Xmain.o: /usr/include/InterViews/message.h
Xmain.o: /usr/include/InterViews/interactor.h /usr/include/InterViews/defs.h
Xmain.o: /usr/include/InterViews/world.h /usr/include/InterViews/scene.h
END_OF_FILE
if test 5082 -ne `wc -c <'t0/Makefile'`; then
    echo shar: \"'t0/Makefile'\" unpacked with wrong size!
fi
# end of 't0/Makefile'
fi
if test -f 't0/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t0/main.c'\"
else
echo shar: Extracting \"'t0/main.c'\" \(246 characters\)
sed "s/^X//" >'t0/main.c' <<'END_OF_FILE'
X#include <InterViews/message.h>
X#include <InterViews/world.h>
X
Xint main () {
X    World* world = new World();
X    world->InsertApplication(
X        new Message("The quick brown fox...")
X    );
X
X    world->Run();
X
X    delete world;
X    return 0;
X}
END_OF_FILE
if test 246 -ne `wc -c <'t0/main.c'`; then
    echo shar: \"'t0/main.c'\" unpacked with wrong size!
fi
# end of 't0/main.c'
fi
if test -f 't1/Imakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t1/Imakefile'\"
else
echo shar: Extracting \"'t1/Imakefile'\" \(220 characters\)
sed "s/^X//" >'t1/Imakefile' <<'END_OF_FILE'
X#
X# InterViews tutorial part 1
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)//**/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    main.o
X
XComplexProgramTarget(t1)
X
XMakeObjectFromSrc(main)
END_OF_FILE
if test 220 -ne `wc -c <'t1/Imakefile'`; then
    echo shar: \"'t1/Imakefile'\" unpacked with wrong size!
fi
# end of 't1/Imakefile'
fi
if test -f 't1/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t1/Makefile'\"
else
echo shar: Extracting \"'t1/Makefile'\" \(5183 characters\)
sed "s/^X//" >'t1/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.41 89/02/21 11:42:35 jim Exp $
X
X#
X# "IVImake.tmpl" - generic imake template customized for InterViews
X#
X# You may change platform-specific parameters in the appropriate .cf
X# configuration files.  You may set site-wide parameters in the file
X# IVsite.def.  You may need a full rebuild if you change any parameters.
X#
X
X# architecture:  MIPSEL
X
X# platform:  $XConsortium: ultrix.cf,v 1.3 89/02/24 13:34:28 jim Exp $
X# operating system:             Ultrix-32 3.0
X
X#
X# Generic make variables
X#
X
X            SHELL = /bin/sh
X
X              TOP = .
X
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X  BOOTSTRAPCPUCMD = cpu
X  BOOTSTRAPMACROS = BOOTSTRAPCFLAGS='$(BOOTSTRAPCFLAGS)' DESTDIR='$(DESTDIR)' \
X			EXTRA_CFLAGS='$(EXTRA_CFLAGS)'
X               CC = cc
X         COMPRESS = compress
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E	 $(STD_CPP_DEFINES)
X           DEPEND = makedepend
X         GENCLASS = genclass
X            IMAKE = imake
X          INSTALL = install
X               LD = ld
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make X=$X
X        MKDIRHIER = mkdirhier
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X             TAGS = ctags
X            TROFF = psroff
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X      CDEBUGFLAGS =
X           CFLAGS = $(CDEBUGFLAGS) $(EXTRA_CFLAGS) \
X			$(INCLUDES) $(STD_DEFINES) $(DEFINES)
X        LINTFLAGS = $(LINTOPTS) $(INCLUDES) $(STD_DEFINES) $(DEFINES) -DLINT
X          LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        MACROFILE = ultrix.cf
X        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS) $(EXTRA_IMAKEOPTS)
X           RM_CMD = $(RM) .emacs_* *.CKP *.ln *.BAK *.bak *.a *.o *..c ,* *~ \
X			a.out core errs tags TAGS make.log make.out
X
X#
X# Project.tmpl - project-specific configuration file
X#
X
X          DESTDIR =
X
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(DESTDIR)/usr/bin/X11
X      LOCALBINDIR = $(DESTDIR)/usr/local/bin/
X          INCROOT = $(DESTDIR)/usr/include
X
X           INCDIR = $(INCROOT)/InterViews
X     TEMPLATESDIR = $(INCDIR)/Templates
X           LIBDIR = $(DESTDIR)/usr/lib/X11
X        CONFIGDIR = $(LIBDIR)/config
X      IVCONFIGDIR = $(CONFIGDIR)/InterViews
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)n
X
X        CONFIGSRC = $(TOP)/config
X      IVCONFIGSRC = $(CONFIGSRC)/InterViews
X            IVSRC = $(TOP)/src
X       INCLUDESRC = $(IVSRC)/InterViews
X     TEMPLATESSRC = $(INCLUDESRC)/Templates
X           BINSRC = $(IVSRC)/bin
X         IMAKESRC = $(BINSRC)/imake
X        SCRIPTSRC = $(BINSRC)/scripts
X LIBINTERVIEWSSRC = $(IVSRC)/libInterViews
X    LIBGRAPHICSRC = $(IVSRC)/libgraphic
X       LIBTEXTSRC = $(IVSRC)/libtext
X           MANSRC = $(TOP)/man
X
X        IMAKETMPL = "IVImake.tmpl"
X
X        IMAKEOPTS = -T $(IMAKETMPL) -I$(IVCONFIGDIR) -I$(CONFIGDIR) \
X		    -DUseInstalled
X
X               CC = CC
X               LD = CC
X     DEPENDCFLAGS = $(CFLAGS) -I/usr/include/CC
X     INSTPGMFLAGS = -s
X     AFTERINSTALL = $(RM)
X
X         INCLUDES = -I$(SRC) -I$(GEN) -I$(INCDIR)/Std
X        TEMPLATES = $(TEMPLATESDIR)
X    LIBINTERVIEWS = $(USRLIBDIR)/libInterViews$X.a
X       LIBGRAPHIC = $(USRLIBDIR)/libgraphic.a
X          LIBTEXT = $(USRLIBDIR)/libtext.a
X
X             AOUT = a.out
X              SRC = .
X              GEN = Generated
X                M = MIPSEL
X                X = X11
X
X#
X# InterViews tutorial part 1
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    main.o
X
XPROGRAM		= t1
X
Xall:: $(AOUT)
X
X$(AOUT): $(OBJS) $(LOCAL_LIBRARIES)
X	@echo "linking $@"
X	-@if [ ! -w $@ ]; then $(RM) $@; else exit 0; fi
X	$(CC) -o $@ $(OBJS) $(LOCAL_LIBRARIES) $(LDFLAGS) $(EXTRA_LOAD_FLAGS)
X
Xinstall:: $(AOUT)
X	$(INSTALL) -c $(INSTPGMFLAGS) $(INSTALLFLAGS) $(AOUT) $(BINDIR)/$(PROGRAM)
X	$(AFTERINSTALL) $(AOUT)
X
Xdepend:: $(SRCS)
X	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPENDCFLAGS) -- $(SRCS)
X
Xclean::
X	$(RM) $(AOUT)
X
Xmain.o: $(SRC)/main.c
X	@echo "compiling $(SRC)/main.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/main.c
X
X#
X# Common rules for all Makefiles from "IVImake.tmpl" - do not edit.
X#
X
Xclean::
X	$(RM_CMD) \#*
X
XMakefile::
X	-@if [ -f Makefile ]; then \
X		$(RM) Makefile.bak; \
X		$(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP)
X
Xinstall::
XMakefiles::
X
X#
X# dependencies generated by makedepend
X#
X
X# DO NOT DELETE
X
Xmain.o: /usr/include/InterViews/box.h /usr/include/InterViews/scene.h
Xmain.o: /usr/include/InterViews/interactor.h /usr/include/InterViews/defs.h
Xmain.o: /usr/include/InterViews/glue.h /usr/include/InterViews/shape.h
Xmain.o: /usr/include/InterViews/message.h /usr/include/InterViews/world.h
END_OF_FILE
if test 5183 -ne `wc -c <'t1/Makefile'`; then
    echo shar: \"'t1/Makefile'\" unpacked with wrong size!
fi
# end of 't1/Makefile'
fi
if test -f 't1/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t1/main.c'\"
else
echo shar: Extracting \"'t1/main.c'\" \(681 characters\)
sed "s/^X//" >'t1/main.c' <<'END_OF_FILE'
X#include <InterViews/box.h>
X#include <InterViews/glue.h>
X#include <InterViews/message.h>
X#include <InterViews/world.h>
X
Xint main () {
X    World* world = new World();
X    world->InsertApplication(
X        new HBox(
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X            new VBox(
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X                new Message("The quick brown fox..."),
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X            ),
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X        )
X    );
X
X    world->Run();
X
X    delete world;
X    return 0;
X}
END_OF_FILE
if test 681 -ne `wc -c <'t1/main.c'`; then
    echo shar: \"'t1/main.c'\" unpacked with wrong size!
fi
# end of 't1/main.c'
fi
if test -f 't2/Imakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t2/Imakefile'\"
else
echo shar: Extracting \"'t2/Imakefile'\" \(220 characters\)
sed "s/^X//" >'t2/Imakefile' <<'END_OF_FILE'
X#
X# InterViews tutorial part 2
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)//**/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    main.o
X
XComplexProgramTarget(t2)
X
XMakeObjectFromSrc(main)
END_OF_FILE
if test 220 -ne `wc -c <'t2/Imakefile'`; then
    echo shar: \"'t2/Imakefile'\" unpacked with wrong size!
fi
# end of 't2/Imakefile'
fi
if test -f 't2/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t2/Makefile'\"
else
echo shar: Extracting \"'t2/Makefile'\" \(5299 characters\)
sed "s/^X//" >'t2/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.41 89/02/21 11:42:35 jim Exp $
X
X#
X# "IVImake.tmpl" - generic imake template customized for InterViews
X#
X# You may change platform-specific parameters in the appropriate .cf
X# configuration files.  You may set site-wide parameters in the file
X# IVsite.def.  You may need a full rebuild if you change any parameters.
X#
X
X# architecture:  MIPSEL
X
X# platform:  $XConsortium: ultrix.cf,v 1.3 89/02/24 13:34:28 jim Exp $
X# operating system:             Ultrix-32 3.0
X
X#
X# Generic make variables
X#
X
X            SHELL = /bin/sh
X
X              TOP = .
X
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X  BOOTSTRAPCPUCMD = cpu
X  BOOTSTRAPMACROS = BOOTSTRAPCFLAGS='$(BOOTSTRAPCFLAGS)' DESTDIR='$(DESTDIR)' \
X			EXTRA_CFLAGS='$(EXTRA_CFLAGS)'
X               CC = cc
X         COMPRESS = compress
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E	 $(STD_CPP_DEFINES)
X           DEPEND = makedepend
X         GENCLASS = genclass
X            IMAKE = imake
X          INSTALL = install
X               LD = ld
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make X=$X
X        MKDIRHIER = mkdirhier
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X             TAGS = ctags
X            TROFF = psroff
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X      CDEBUGFLAGS =
X           CFLAGS = $(CDEBUGFLAGS) $(EXTRA_CFLAGS) \
X			$(INCLUDES) $(STD_DEFINES) $(DEFINES)
X        LINTFLAGS = $(LINTOPTS) $(INCLUDES) $(STD_DEFINES) $(DEFINES) -DLINT
X          LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        MACROFILE = ultrix.cf
X        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS) $(EXTRA_IMAKEOPTS)
X           RM_CMD = $(RM) .emacs_* *.CKP *.ln *.BAK *.bak *.a *.o *..c ,* *~ \
X			a.out core errs tags TAGS make.log make.out
X
X#
X# Project.tmpl - project-specific configuration file
X#
X
X          DESTDIR =
X
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(DESTDIR)/usr/bin/X11
X      LOCALBINDIR = $(DESTDIR)/usr/local/bin/
X          INCROOT = $(DESTDIR)/usr/include
X
X           INCDIR = $(INCROOT)/InterViews
X     TEMPLATESDIR = $(INCDIR)/Templates
X           LIBDIR = $(DESTDIR)/usr/lib/X11
X        CONFIGDIR = $(LIBDIR)/config
X      IVCONFIGDIR = $(CONFIGDIR)/InterViews
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)n
X
X        CONFIGSRC = $(TOP)/config
X      IVCONFIGSRC = $(CONFIGSRC)/InterViews
X            IVSRC = $(TOP)/src
X       INCLUDESRC = $(IVSRC)/InterViews
X     TEMPLATESSRC = $(INCLUDESRC)/Templates
X           BINSRC = $(IVSRC)/bin
X         IMAKESRC = $(BINSRC)/imake
X        SCRIPTSRC = $(BINSRC)/scripts
X LIBINTERVIEWSSRC = $(IVSRC)/libInterViews
X    LIBGRAPHICSRC = $(IVSRC)/libgraphic
X       LIBTEXTSRC = $(IVSRC)/libtext
X           MANSRC = $(TOP)/man
X
X        IMAKETMPL = "IVImake.tmpl"
X
X        IMAKEOPTS = -T $(IMAKETMPL) -I$(IVCONFIGDIR) -I$(CONFIGDIR) \
X		    -DUseInstalled
X
X               CC = CC
X               LD = CC
X     DEPENDCFLAGS = $(CFLAGS) -I/usr/include/CC
X     INSTPGMFLAGS = -s
X     AFTERINSTALL = $(RM)
X
X         INCLUDES = -I$(SRC) -I$(GEN) -I$(INCDIR)/Std
X        TEMPLATES = $(TEMPLATESDIR)
X    LIBINTERVIEWS = $(USRLIBDIR)/libInterViews$X.a
X       LIBGRAPHIC = $(USRLIBDIR)/libgraphic.a
X          LIBTEXT = $(USRLIBDIR)/libtext.a
X
X             AOUT = a.out
X              SRC = .
X              GEN = Generated
X                M = MIPSEL
X                X = X11
X
X#
X# InterViews tutorial part 2
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    main.o
X
XPROGRAM		= t2
X
Xall:: $(AOUT)
X
X$(AOUT): $(OBJS) $(LOCAL_LIBRARIES)
X	@echo "linking $@"
X	-@if [ ! -w $@ ]; then $(RM) $@; else exit 0; fi
X	$(CC) -o $@ $(OBJS) $(LOCAL_LIBRARIES) $(LDFLAGS) $(EXTRA_LOAD_FLAGS)
X
Xinstall:: $(AOUT)
X	$(INSTALL) -c $(INSTPGMFLAGS) $(INSTALLFLAGS) $(AOUT) $(BINDIR)/$(PROGRAM)
X	$(AFTERINSTALL) $(AOUT)
X
Xdepend:: $(SRCS)
X	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPENDCFLAGS) -- $(SRCS)
X
Xclean::
X	$(RM) $(AOUT)
X
Xmain.o: $(SRC)/main.c
X	@echo "compiling $(SRC)/main.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/main.c
X
X#
X# Common rules for all Makefiles from "IVImake.tmpl" - do not edit.
X#
X
Xclean::
X	$(RM_CMD) \#*
X
XMakefile::
X	-@if [ -f Makefile ]; then \
X		$(RM) Makefile.bak; \
X		$(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP)
X
Xinstall::
XMakefiles::
X
X#
X# dependencies generated by makedepend
X#
X
X# DO NOT DELETE
X
Xmain.o: /usr/include/InterViews/box.h /usr/include/InterViews/scene.h
Xmain.o: /usr/include/InterViews/interactor.h /usr/include/InterViews/defs.h
Xmain.o: /usr/include/InterViews/button.h /usr/include/InterViews/subject.h
Xmain.o: /usr/include/InterViews/dialog.h /usr/include/InterViews/glue.h
Xmain.o: /usr/include/InterViews/shape.h /usr/include/InterViews/message.h
Xmain.o: /usr/include/InterViews/world.h
END_OF_FILE
if test 5299 -ne `wc -c <'t2/Makefile'`; then
    echo shar: \"'t2/Makefile'\" unpacked with wrong size!
fi
# end of 't2/Makefile'
fi
if test -f 't2/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t2/main.c'\"
else
echo shar: Extracting \"'t2/main.c'\" \(1153 characters\)
sed "s/^X//" >'t2/main.c' <<'END_OF_FILE'
X#include <InterViews/box.h>
X#include <InterViews/button.h>
X#include <InterViews/dialog.h>
X#include <InterViews/glue.h>
X#include <InterViews/message.h>
X#include <InterViews/world.h>
X
Xint main () {
X    World* world = new World();
X    ButtonState* quit = new ButtonState(false);
X    Dialog* browser = new Dialog(
X        quit,
X        new HBox(
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X            new VBox(
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X                new Message("The quick brown fox..."),
X                new VGlue(round(0.3*inch), round(0.2*inch), 0),
X                new HBox(
X                    new HGlue(round(0.3*inch), round(0.2*inch), hfil),
X                    new PushButton("Quit", quit, true)
X                ),
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X            ),
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X        )
X    );
X
X    world->InsertApplication(browser);
X    browser->Accept();
X    world->Remove(browser);
X
X    delete browser;
X    delete quit;
X    delete world;
X    return 0;
X}
END_OF_FILE
if test 1153 -ne `wc -c <'t2/main.c'`; then
    echo shar: \"'t2/main.c'\" unpacked with wrong size!
fi
# end of 't2/main.c'
fi
if test -f 't3/Imakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t3/Imakefile'\"
else
echo shar: Extracting \"'t3/Imakefile'\" \(220 characters\)
sed "s/^X//" >'t3/Imakefile' <<'END_OF_FILE'
X#
X# InterViews tutorial part 3
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)//**/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    main.o
X
XComplexProgramTarget(t3)
X
XMakeObjectFromSrc(main)
END_OF_FILE
if test 220 -ne `wc -c <'t3/Imakefile'`; then
    echo shar: \"'t3/Imakefile'\" unpacked with wrong size!
fi
# end of 't3/Imakefile'
fi
if test -f 't3/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t3/Makefile'\"
else
echo shar: Extracting \"'t3/Makefile'\" \(5299 characters\)
sed "s/^X//" >'t3/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.41 89/02/21 11:42:35 jim Exp $
X
X#
X# "IVImake.tmpl" - generic imake template customized for InterViews
X#
X# You may change platform-specific parameters in the appropriate .cf
X# configuration files.  You may set site-wide parameters in the file
X# IVsite.def.  You may need a full rebuild if you change any parameters.
X#
X
X# architecture:  MIPSEL
X
X# platform:  $XConsortium: ultrix.cf,v 1.3 89/02/24 13:34:28 jim Exp $
X# operating system:             Ultrix-32 3.0
X
X#
X# Generic make variables
X#
X
X            SHELL = /bin/sh
X
X              TOP = .
X
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X  BOOTSTRAPCPUCMD = cpu
X  BOOTSTRAPMACROS = BOOTSTRAPCFLAGS='$(BOOTSTRAPCFLAGS)' DESTDIR='$(DESTDIR)' \
X			EXTRA_CFLAGS='$(EXTRA_CFLAGS)'
X               CC = cc
X         COMPRESS = compress
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E	 $(STD_CPP_DEFINES)
X           DEPEND = makedepend
X         GENCLASS = genclass
X            IMAKE = imake
X          INSTALL = install
X               LD = ld
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make X=$X
X        MKDIRHIER = mkdirhier
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X             TAGS = ctags
X            TROFF = psroff
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X      CDEBUGFLAGS =
X           CFLAGS = $(CDEBUGFLAGS) $(EXTRA_CFLAGS) \
X			$(INCLUDES) $(STD_DEFINES) $(DEFINES)
X        LINTFLAGS = $(LINTOPTS) $(INCLUDES) $(STD_DEFINES) $(DEFINES) -DLINT
X          LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        MACROFILE = ultrix.cf
X        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS) $(EXTRA_IMAKEOPTS)
X           RM_CMD = $(RM) .emacs_* *.CKP *.ln *.BAK *.bak *.a *.o *..c ,* *~ \
X			a.out core errs tags TAGS make.log make.out
X
X#
X# Project.tmpl - project-specific configuration file
X#
X
X          DESTDIR =
X
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(DESTDIR)/usr/bin/X11
X      LOCALBINDIR = $(DESTDIR)/usr/local/bin/
X          INCROOT = $(DESTDIR)/usr/include
X
X           INCDIR = $(INCROOT)/InterViews
X     TEMPLATESDIR = $(INCDIR)/Templates
X           LIBDIR = $(DESTDIR)/usr/lib/X11
X        CONFIGDIR = $(LIBDIR)/config
X      IVCONFIGDIR = $(CONFIGDIR)/InterViews
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)n
X
X        CONFIGSRC = $(TOP)/config
X      IVCONFIGSRC = $(CONFIGSRC)/InterViews
X            IVSRC = $(TOP)/src
X       INCLUDESRC = $(IVSRC)/InterViews
X     TEMPLATESSRC = $(INCLUDESRC)/Templates
X           BINSRC = $(IVSRC)/bin
X         IMAKESRC = $(BINSRC)/imake
X        SCRIPTSRC = $(BINSRC)/scripts
X LIBINTERVIEWSSRC = $(IVSRC)/libInterViews
X    LIBGRAPHICSRC = $(IVSRC)/libgraphic
X       LIBTEXTSRC = $(IVSRC)/libtext
X           MANSRC = $(TOP)/man
X
X        IMAKETMPL = "IVImake.tmpl"
X
X        IMAKEOPTS = -T $(IMAKETMPL) -I$(IVCONFIGDIR) -I$(CONFIGDIR) \
X		    -DUseInstalled
X
X               CC = CC
X               LD = CC
X     DEPENDCFLAGS = $(CFLAGS) -I/usr/include/CC
X     INSTPGMFLAGS = -s
X     AFTERINSTALL = $(RM)
X
X         INCLUDES = -I$(SRC) -I$(GEN) -I$(INCDIR)/Std
X        TEMPLATES = $(TEMPLATESDIR)
X    LIBINTERVIEWS = $(USRLIBDIR)/libInterViews$X.a
X       LIBGRAPHIC = $(USRLIBDIR)/libgraphic.a
X          LIBTEXT = $(USRLIBDIR)/libtext.a
X
X             AOUT = a.out
X              SRC = .
X              GEN = Generated
X                M = MIPSEL
X                X = X11
X
X#
X# InterViews tutorial part 3
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    main.o
X
XPROGRAM		= t3
X
Xall:: $(AOUT)
X
X$(AOUT): $(OBJS) $(LOCAL_LIBRARIES)
X	@echo "linking $@"
X	-@if [ ! -w $@ ]; then $(RM) $@; else exit 0; fi
X	$(CC) -o $@ $(OBJS) $(LOCAL_LIBRARIES) $(LDFLAGS) $(EXTRA_LOAD_FLAGS)
X
Xinstall:: $(AOUT)
X	$(INSTALL) -c $(INSTPGMFLAGS) $(INSTALLFLAGS) $(AOUT) $(BINDIR)/$(PROGRAM)
X	$(AFTERINSTALL) $(AOUT)
X
Xdepend:: $(SRCS)
X	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPENDCFLAGS) -- $(SRCS)
X
Xclean::
X	$(RM) $(AOUT)
X
Xmain.o: $(SRC)/main.c
X	@echo "compiling $(SRC)/main.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/main.c
X
X#
X# Common rules for all Makefiles from "IVImake.tmpl" - do not edit.
X#
X
Xclean::
X	$(RM_CMD) \#*
X
XMakefile::
X	-@if [ -f Makefile ]; then \
X		$(RM) Makefile.bak; \
X		$(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP)
X
Xinstall::
XMakefiles::
X
X#
X# dependencies generated by makedepend
X#
X
X# DO NOT DELETE
X
Xmain.o: /usr/include/InterViews/box.h /usr/include/InterViews/scene.h
Xmain.o: /usr/include/InterViews/interactor.h /usr/include/InterViews/defs.h
Xmain.o: /usr/include/InterViews/button.h /usr/include/InterViews/subject.h
Xmain.o: /usr/include/InterViews/dialog.h /usr/include/InterViews/glue.h
Xmain.o: /usr/include/InterViews/shape.h /usr/include/InterViews/message.h
Xmain.o: /usr/include/InterViews/world.h
END_OF_FILE
if test 5299 -ne `wc -c <'t3/Makefile'`; then
    echo shar: \"'t3/Makefile'\" unpacked with wrong size!
fi
# end of 't3/Makefile'
fi
if test -f 't3/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t3/main.c'\"
else
echo shar: Extracting \"'t3/main.c'\" \(1714 characters\)
sed "s/^X//" >'t3/main.c' <<'END_OF_FILE'
X#include <InterViews/box.h>
X#include <InterViews/button.h>
X#include <InterViews/dialog.h>
X#include <InterViews/glue.h>
X#include <InterViews/message.h>
X#include <InterViews/world.h>
X
Xstatic PropertyData properties[] = {
X    { "tutorial*sample", "The quick brown fox..." },
X    { "tutorial*font",
X        "*-*-helvetica-medium-r-normal-*-*-240-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*PushButton*font",
X        "*-*-times-medium-i-normal-*-*-140-*-*-*-*-iso8859-1"
X    },
X    { nil }
X};
X
Xstatic OptionDesc options[] = {
X    { "-sample", "tutorial*sample", OptionValueNext },
X    { nil }
X};
X
Xint main (int argc, char* argv[]) {
X    World* world = new World("tutorial", properties, options, argc, argv);
X    ButtonState* quit = new ButtonState(false);
X    Dialog* browser = new Dialog(
X        quit,
X        new HBox(
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X            new VBox(
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X                new Message(world->GetAttribute("sample")),
X                new VGlue(round(0.3*inch), round(0.2*inch), 0),
X                new HBox(
X                    new HGlue(round(0.3*inch), round(0.2*inch), hfil),
X                    new PushButton("Quit", quit, true)
X                ),
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X            ),
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X        )
X    );
X
X    browser->SetName("InterViews font browser");
X    browser->SetIconName("ifb");
X
X    world->InsertApplication(browser);
X    browser->Accept();
X    world->Remove(browser);
X
X    delete browser;
X    delete quit;
X    delete world;
X    return 0;
X}
END_OF_FILE
if test 1714 -ne `wc -c <'t3/main.c'`; then
    echo shar: \"'t3/main.c'\" unpacked with wrong size!
fi
# end of 't3/main.c'
fi
if test -f 't4/Imakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t4/Imakefile'\"
else
echo shar: Extracting \"'t4/Imakefile'\" \(269 characters\)
sed "s/^X//" >'t4/Imakefile' <<'END_OF_FILE'
X#
X# InterViews tutorial part 4
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)//**/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontsample.o \
X    main.o
X
XComplexProgramTarget(t4)
X
XMakeObjectFromSrc(fontsample)
XMakeObjectFromSrc(main)
END_OF_FILE
if test 269 -ne `wc -c <'t4/Imakefile'`; then
    echo shar: \"'t4/Imakefile'\" unpacked with wrong size!
fi
# end of 't4/Imakefile'
fi
if test -f 't4/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t4/Makefile'\"
else
echo shar: Extracting \"'t4/Makefile'\" \(5804 characters\)
sed "s/^X//" >'t4/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.41 89/02/21 11:42:35 jim Exp $
X
X#
X# "IVImake.tmpl" - generic imake template customized for InterViews
X#
X# You may change platform-specific parameters in the appropriate .cf
X# configuration files.  You may set site-wide parameters in the file
X# IVsite.def.  You may need a full rebuild if you change any parameters.
X#
X
X# architecture:  MIPSEL
X
X# platform:  $XConsortium: ultrix.cf,v 1.3 89/02/24 13:34:28 jim Exp $
X# operating system:             Ultrix-32 3.0
X
X#
X# Generic make variables
X#
X
X            SHELL = /bin/sh
X
X              TOP = .
X
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X  BOOTSTRAPCPUCMD = cpu
X  BOOTSTRAPMACROS = BOOTSTRAPCFLAGS='$(BOOTSTRAPCFLAGS)' DESTDIR='$(DESTDIR)' \
X			EXTRA_CFLAGS='$(EXTRA_CFLAGS)'
X               CC = cc
X         COMPRESS = compress
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E	 $(STD_CPP_DEFINES)
X           DEPEND = makedepend
X         GENCLASS = genclass
X            IMAKE = imake
X          INSTALL = install
X               LD = ld
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make X=$X
X        MKDIRHIER = mkdirhier
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X             TAGS = ctags
X            TROFF = psroff
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X      CDEBUGFLAGS =
X           CFLAGS = $(CDEBUGFLAGS) $(EXTRA_CFLAGS) \
X			$(INCLUDES) $(STD_DEFINES) $(DEFINES)
X        LINTFLAGS = $(LINTOPTS) $(INCLUDES) $(STD_DEFINES) $(DEFINES) -DLINT
X          LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        MACROFILE = ultrix.cf
X        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS) $(EXTRA_IMAKEOPTS)
X           RM_CMD = $(RM) .emacs_* *.CKP *.ln *.BAK *.bak *.a *.o *..c ,* *~ \
X			a.out core errs tags TAGS make.log make.out
X
X#
X# Project.tmpl - project-specific configuration file
X#
X
X          DESTDIR =
X
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(DESTDIR)/usr/bin/X11
X      LOCALBINDIR = $(DESTDIR)/usr/local/bin/
X          INCROOT = $(DESTDIR)/usr/include
X
X           INCDIR = $(INCROOT)/InterViews
X     TEMPLATESDIR = $(INCDIR)/Templates
X           LIBDIR = $(DESTDIR)/usr/lib/X11
X        CONFIGDIR = $(LIBDIR)/config
X      IVCONFIGDIR = $(CONFIGDIR)/InterViews
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)n
X
X        CONFIGSRC = $(TOP)/config
X      IVCONFIGSRC = $(CONFIGSRC)/InterViews
X            IVSRC = $(TOP)/src
X       INCLUDESRC = $(IVSRC)/InterViews
X     TEMPLATESSRC = $(INCLUDESRC)/Templates
X           BINSRC = $(IVSRC)/bin
X         IMAKESRC = $(BINSRC)/imake
X        SCRIPTSRC = $(BINSRC)/scripts
X LIBINTERVIEWSSRC = $(IVSRC)/libInterViews
X    LIBGRAPHICSRC = $(IVSRC)/libgraphic
X       LIBTEXTSRC = $(IVSRC)/libtext
X           MANSRC = $(TOP)/man
X
X        IMAKETMPL = "IVImake.tmpl"
X
X        IMAKEOPTS = -T $(IMAKETMPL) -I$(IVCONFIGDIR) -I$(CONFIGDIR) \
X		    -DUseInstalled
X
X               CC = CC
X               LD = CC
X     DEPENDCFLAGS = $(CFLAGS) -I/usr/include/CC
X     INSTPGMFLAGS = -s
X     AFTERINSTALL = $(RM)
X
X         INCLUDES = -I$(SRC) -I$(GEN) -I$(INCDIR)/Std
X        TEMPLATES = $(TEMPLATESDIR)
X    LIBINTERVIEWS = $(USRLIBDIR)/libInterViews$X.a
X       LIBGRAPHIC = $(USRLIBDIR)/libgraphic.a
X          LIBTEXT = $(USRLIBDIR)/libtext.a
X
X             AOUT = a.out
X              SRC = .
X              GEN = Generated
X                M = MIPSEL
X                X = X11
X
X#
X# InterViews tutorial part 4
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontsample.o \
X    main.o
X
XPROGRAM		= t4
X
Xall:: $(AOUT)
X
X$(AOUT): $(OBJS) $(LOCAL_LIBRARIES)
X	@echo "linking $@"
X	-@if [ ! -w $@ ]; then $(RM) $@; else exit 0; fi
X	$(CC) -o $@ $(OBJS) $(LOCAL_LIBRARIES) $(LDFLAGS) $(EXTRA_LOAD_FLAGS)
X
Xinstall:: $(AOUT)
X	$(INSTALL) -c $(INSTPGMFLAGS) $(INSTALLFLAGS) $(AOUT) $(BINDIR)/$(PROGRAM)
X	$(AFTERINSTALL) $(AOUT)
X
Xdepend:: $(SRCS)
X	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPENDCFLAGS) -- $(SRCS)
X
Xclean::
X	$(RM) $(AOUT)
X
Xfontsample.o: $(SRC)/fontsample.c
X	@echo "compiling $(SRC)/fontsample.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/fontsample.c
X
Xmain.o: $(SRC)/main.c
X	@echo "compiling $(SRC)/main.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/main.c
X
X#
X# Common rules for all Makefiles from "IVImake.tmpl" - do not edit.
X#
X
Xclean::
X	$(RM_CMD) \#*
X
XMakefile::
X	-@if [ -f Makefile ]; then \
X		$(RM) Makefile.bak; \
X		$(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP)
X
Xinstall::
XMakefiles::
X
X#
X# dependencies generated by makedepend
X#
X
X# DO NOT DELETE
X
Xfontsample.o: fontsample.h /usr/include/InterViews/interactor.h
Xfontsample.o: /usr/include/InterViews/defs.h /usr/include/InterViews/font.h
Xfontsample.o: /usr/include/InterViews/resource.h
Xfontsample.o: /usr/include/InterViews/painter.h
Xfontsample.o: /usr/include/InterViews/pattern.h
Xfontsample.o: /usr/include/InterViews/shape.h
Xfontsample.o: /usr/include/InterViews/Std/string.h
Xmain.o: /usr/include/InterViews/box.h /usr/include/InterViews/scene.h
Xmain.o: /usr/include/InterViews/interactor.h /usr/include/InterViews/defs.h
Xmain.o: /usr/include/InterViews/button.h /usr/include/InterViews/subject.h
Xmain.o: /usr/include/InterViews/dialog.h /usr/include/InterViews/glue.h
Xmain.o: /usr/include/InterViews/shape.h /usr/include/InterViews/world.h
Xmain.o: fontsample.h
END_OF_FILE
if test 5804 -ne `wc -c <'t4/Makefile'`; then
    echo shar: \"'t4/Makefile'\" unpacked with wrong size!
fi
# end of 't4/Makefile'
fi
if test -f 't4/fontsample.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t4/fontsample.c'\"
else
echo shar: Extracting \"'t4/fontsample.c'\" \(1674 characters\)
sed "s/^X//" >'t4/fontsample.c' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#include "fontsample.h"
X
X#include <InterViews/font.h>
X#include <InterViews/painter.h>
X#include <InterViews/pattern.h>
X#include <InterViews/shape.h>
X#include <string.h>
X
Xstatic const int BufferSize = 1000;
X
XFontSample::FontSample(const char* sample) : () {
X    Init(sample);
X}
X
XFontSample::FontSample(const char* name, const char* sample) : () {
X    SetInstance(name);
X    Init(sample);
X}
X
XFontSample::~FontSample () {
X    delete sample;
X    delete fontname;
X    delete font;
X}
X
Xvoid FontSample::Init (const char* samp) {
X    SetClassName("FontSample");
X    font = nil;
X    fontname = new char [BufferSize];
X    sample = new char [BufferSize];
X    strcpy(sample, samp);
X}
X
Xvoid FontSample::Reconfig () {
X    Painter* tmp = new Painter(output);
X    Unref(output);
X    output = tmp;
X    output->Reference();
X    output->SetFont(font);
X    Interactor::Reconfig();
X    shape->Rect(font->Width(sample), font->Height());
X    shape->Rigid(hfil, hfil, 0, 0);
X}
X
Xvoid FontSample::Redraw (Coord l, Coord b, Coord r, Coord t) {
X    output->ClearRect(canvas, l, b, r, t);
X    output->Text(canvas, sample, 0, 0);
X}
X
Xvoid FontSample::ShowFont (const char* name) {
X    if (strcmp(name, fontname) != 0) {
X        strcpy(fontname, name);
X        //Unref(font);
X        font = new Font(fontname);
X        font->Reference();
X        if (output != nil) {
X            if (font->Valid()) {
X                output->FillBg(true);
X                output->SetPattern(solid);
X                Reconfig();
X            } else {
X                output->FillBg(false);
X                output->SetPattern(gray);
X            }
X            Draw();
X        }
X    }
X}
END_OF_FILE
if test 1674 -ne `wc -c <'t4/fontsample.c'`; then
    echo shar: \"'t4/fontsample.c'\" unpacked with wrong size!
fi
# end of 't4/fontsample.c'
fi
if test -f 't4/fontsample.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t4/fontsample.h'\"
else
echo shar: Extracting \"'t4/fontsample.h'\" \(542 characters\)
sed "s/^X//" >'t4/fontsample.h' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#ifndef fontsample_h
X#define fontsample_h
X
X#include <InterViews/interactor.h>
X
Xclass Font;
X
Xclass FontSample : public Interactor {
Xpublic:
X    FontSample(const char* sample);
X    FontSample(const char* name, const char* sample);
X    virtual ~FontSample();
X
X    void ShowFont(const char* name);
Xprotected:
X    virtual void Reconfig();
X    virtual void Redraw(Coord, Coord, Coord, Coord);
Xprivate:
X    void Init(const char*);
Xprivate:
X    Font* font;
X    char* fontname;
X    char* sample;
X};
X
X#endif
END_OF_FILE
if test 542 -ne `wc -c <'t4/fontsample.h'`; then
    echo shar: \"'t4/fontsample.h'\" unpacked with wrong size!
fi
# end of 't4/fontsample.h'
fi
if test -f 't4/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t4/main.c'\"
else
echo shar: Extracting \"'t4/main.c'\" \(1794 characters\)
sed "s/^X//" >'t4/main.c' <<'END_OF_FILE'
X#include <InterViews/box.h>
X#include <InterViews/button.h>
X#include <InterViews/dialog.h>
X#include <InterViews/glue.h>
X#include <InterViews/world.h>
X
X#include "fontsample.h"
X
Xstatic PropertyData properties[] = {
X    { "tutorial*sample", "The quick brown fox..." },
X    { "tutorial*font",
X        "*-*-helvetica-medium-r-normal-*-*-240-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*PushButton*font",
X        "*-*-times-medium-i-normal-*-*-140-*-*-*-*-iso8859-1"
X    },
X    { nil }
X};
X
Xstatic OptionDesc options[] = {
X    { "-sample", "tutorial*sample", OptionValueNext },
X    { nil }
X};
X
Xint main (int argc, char* argv[]) {
X    World* world = new World("tutorial", properties, options, argc, argv);
X    ButtonState* quit = new ButtonState(false);
X    FontSample* sample = new FontSample(world->GetAttribute("sample"));
X    sample->ShowFont(world->GetAttribute("font"));
X    Dialog* browser = new Dialog(
X        quit,
X        new HBox(
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X            new VBox(
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X                sample,
X                new VGlue(round(0.3*inch), round(0.2*inch), 0),
X                new HBox(
X                    new HGlue(round(0.3*inch), round(0.2*inch), hfil),
X                    new PushButton("Quit", quit, true)
X                ),
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X            ),
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X        )
X    );
X
X    browser->SetName("InterViews font browser");
X    browser->SetIconName("ifb");
X
X    world->InsertApplication(browser);
X    browser->Accept();
X    world->Remove(browser);
X
X    delete browser;
X    delete quit;
X    delete world;
X    return 0;
X}
END_OF_FILE
if test 1794 -ne `wc -c <'t4/main.c'`; then
    echo shar: \"'t4/main.c'\" unpacked with wrong size!
fi
# end of 't4/main.c'
fi
if test -f 't5/Imakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t5/Imakefile'\"
else
echo shar: Extracting \"'t5/Imakefile'\" \(320 characters\)
sed "s/^X//" >'t5/Imakefile' <<'END_OF_FILE'
X#
X# InterViews tutorial part 5
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)//**/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontbrowser.o \
X    fontsample.o \
X    main.o
X
XComplexProgramTarget(t5)
X
XMakeObjectFromSrc(fontbrowser)
XMakeObjectFromSrc(fontsample)
XMakeObjectFromSrc(main)
END_OF_FILE
if test 320 -ne `wc -c <'t5/Imakefile'`; then
    echo shar: \"'t5/Imakefile'\" unpacked with wrong size!
fi
# end of 't5/Imakefile'
fi
if test -f 't5/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t5/Makefile'\"
else
echo shar: Extracting \"'t5/Makefile'\" \(6557 characters\)
sed "s/^X//" >'t5/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.41 89/02/21 11:42:35 jim Exp $
X
X#
X# "IVImake.tmpl" - generic imake template customized for InterViews
X#
X# You may change platform-specific parameters in the appropriate .cf
X# configuration files.  You may set site-wide parameters in the file
X# IVsite.def.  You may need a full rebuild if you change any parameters.
X#
X
X# architecture:  MIPSEL
X
X# platform:  $XConsortium: ultrix.cf,v 1.3 89/02/24 13:34:28 jim Exp $
X# operating system:             Ultrix-32 3.0
X
X#
X# Generic make variables
X#
X
X            SHELL = /bin/sh
X
X              TOP = .
X
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X  BOOTSTRAPCPUCMD = cpu
X  BOOTSTRAPMACROS = BOOTSTRAPCFLAGS='$(BOOTSTRAPCFLAGS)' DESTDIR='$(DESTDIR)' \
X			EXTRA_CFLAGS='$(EXTRA_CFLAGS)'
X               CC = cc
X         COMPRESS = compress
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E	 $(STD_CPP_DEFINES)
X           DEPEND = makedepend
X         GENCLASS = genclass
X            IMAKE = imake
X          INSTALL = install
X               LD = ld
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make X=$X
X        MKDIRHIER = mkdirhier
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X             TAGS = ctags
X            TROFF = psroff
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X      CDEBUGFLAGS =
X           CFLAGS = $(CDEBUGFLAGS) $(EXTRA_CFLAGS) \
X			$(INCLUDES) $(STD_DEFINES) $(DEFINES)
X        LINTFLAGS = $(LINTOPTS) $(INCLUDES) $(STD_DEFINES) $(DEFINES) -DLINT
X          LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        MACROFILE = ultrix.cf
X        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS) $(EXTRA_IMAKEOPTS)
X           RM_CMD = $(RM) .emacs_* *.CKP *.ln *.BAK *.bak *.a *.o *..c ,* *~ \
X			a.out core errs tags TAGS make.log make.out
X
X#
X# Project.tmpl - project-specific configuration file
X#
X
X          DESTDIR =
X
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(DESTDIR)/usr/bin/X11
X      LOCALBINDIR = $(DESTDIR)/usr/local/bin/
X          INCROOT = $(DESTDIR)/usr/include
X
X           INCDIR = $(INCROOT)/InterViews
X     TEMPLATESDIR = $(INCDIR)/Templates
X           LIBDIR = $(DESTDIR)/usr/lib/X11
X        CONFIGDIR = $(LIBDIR)/config
X      IVCONFIGDIR = $(CONFIGDIR)/InterViews
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)n
X
X        CONFIGSRC = $(TOP)/config
X      IVCONFIGSRC = $(CONFIGSRC)/InterViews
X            IVSRC = $(TOP)/src
X       INCLUDESRC = $(IVSRC)/InterViews
X     TEMPLATESSRC = $(INCLUDESRC)/Templates
X           BINSRC = $(IVSRC)/bin
X         IMAKESRC = $(BINSRC)/imake
X        SCRIPTSRC = $(BINSRC)/scripts
X LIBINTERVIEWSSRC = $(IVSRC)/libInterViews
X    LIBGRAPHICSRC = $(IVSRC)/libgraphic
X       LIBTEXTSRC = $(IVSRC)/libtext
X           MANSRC = $(TOP)/man
X
X        IMAKETMPL = "IVImake.tmpl"
X
X        IMAKEOPTS = -T $(IMAKETMPL) -I$(IVCONFIGDIR) -I$(CONFIGDIR) \
X		    -DUseInstalled
X
X               CC = CC
X               LD = CC
X     DEPENDCFLAGS = $(CFLAGS) -I/usr/include/CC
X     INSTPGMFLAGS = -s
X     AFTERINSTALL = $(RM)
X
X         INCLUDES = -I$(SRC) -I$(GEN) -I$(INCDIR)/Std
X        TEMPLATES = $(TEMPLATESDIR)
X    LIBINTERVIEWS = $(USRLIBDIR)/libInterViews$X.a
X       LIBGRAPHIC = $(USRLIBDIR)/libgraphic.a
X          LIBTEXT = $(USRLIBDIR)/libtext.a
X
X             AOUT = a.out
X              SRC = .
X              GEN = Generated
X                M = MIPSEL
X                X = X11
X
X#
X# InterViews tutorial part 5
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontbrowser.o \
X    fontsample.o \
X    main.o
X
XPROGRAM		= t5
X
Xall:: $(AOUT)
X
X$(AOUT): $(OBJS) $(LOCAL_LIBRARIES)
X	@echo "linking $@"
X	-@if [ ! -w $@ ]; then $(RM) $@; else exit 0; fi
X	$(CC) -o $@ $(OBJS) $(LOCAL_LIBRARIES) $(LDFLAGS) $(EXTRA_LOAD_FLAGS)
X
Xinstall:: $(AOUT)
X	$(INSTALL) -c $(INSTPGMFLAGS) $(INSTALLFLAGS) $(AOUT) $(BINDIR)/$(PROGRAM)
X	$(AFTERINSTALL) $(AOUT)
X
Xdepend:: $(SRCS)
X	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPENDCFLAGS) -- $(SRCS)
X
Xclean::
X	$(RM) $(AOUT)
X
Xfontbrowser.o: $(SRC)/fontbrowser.c
X	@echo "compiling $(SRC)/fontbrowser.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/fontbrowser.c
X
Xfontsample.o: $(SRC)/fontsample.c
X	@echo "compiling $(SRC)/fontsample.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/fontsample.c
X
Xmain.o: $(SRC)/main.c
X	@echo "compiling $(SRC)/main.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/main.c
X
X#
X# Common rules for all Makefiles from "IVImake.tmpl" - do not edit.
X#
X
Xclean::
X	$(RM_CMD) \#*
X
XMakefile::
X	-@if [ -f Makefile ]; then \
X		$(RM) Makefile.bak; \
X		$(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP)
X
Xinstall::
XMakefiles::
X
X#
X# dependencies generated by makedepend
X#
X
X# DO NOT DELETE
X
Xfontbrowser.o: fontbrowser.h /usr/include/InterViews/dialog.h
Xfontbrowser.o: /usr/include/InterViews/scene.h
Xfontbrowser.o: /usr/include/InterViews/interactor.h
Xfontbrowser.o: /usr/include/InterViews/defs.h fontsample.h
Xfontbrowser.o: /usr/include/InterViews/box.h /usr/include/InterViews/button.h
Xfontbrowser.o: /usr/include/InterViews/subject.h
Xfontbrowser.o: /usr/include/InterViews/event.h /usr/include/InterViews/glue.h
Xfontbrowser.o: /usr/include/InterViews/shape.h
Xfontbrowser.o: /usr/include/InterViews/message.h
Xfontbrowser.o: /usr/include/InterViews/Std/stdio.h //usr/include/stdio.h
Xfontbrowser.o: /usr/include/InterViews/Std/string.h
Xfontsample.o: fontsample.h /usr/include/InterViews/interactor.h
Xfontsample.o: /usr/include/InterViews/defs.h /usr/include/InterViews/font.h
Xfontsample.o: /usr/include/InterViews/resource.h
Xfontsample.o: /usr/include/InterViews/painter.h
Xfontsample.o: /usr/include/InterViews/pattern.h
Xfontsample.o: /usr/include/InterViews/shape.h
Xfontsample.o: /usr/include/InterViews/Std/string.h
Xmain.o: /usr/include/InterViews/button.h /usr/include/InterViews/interactor.h
Xmain.o: /usr/include/InterViews/defs.h /usr/include/InterViews/subject.h
Xmain.o: /usr/include/InterViews/world.h /usr/include/InterViews/scene.h
Xmain.o: /usr/include/InterViews/Std/stdio.h //usr/include/stdio.h
Xmain.o: fontbrowser.h /usr/include/InterViews/dialog.h
END_OF_FILE
if test 6557 -ne `wc -c <'t5/Makefile'`; then
    echo shar: \"'t5/Makefile'\" unpacked with wrong size!
fi
# end of 't5/Makefile'
fi
if test -f 't5/fontbrowser.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t5/fontbrowser.c'\"
else
echo shar: Extracting \"'t5/fontbrowser.c'\" \(4862 characters\)
sed "s/^X//" >'t5/fontbrowser.c' <<'END_OF_FILE'
X/*
X * a Dialog for browsing fonts
X */
X
X#include "fontbrowser.h"
X
X#include "fontsample.h"
X
X#include <InterViews/box.h>
X#include <InterViews/button.h>
X#include <InterViews/event.h>
X#include <InterViews/glue.h>
X#include <InterViews/message.h>
X#include <stdio.h>
X#include <string.h>
X
Xclass ButtonChoice {
Xpublic:
X    const char* label;
X    void* value;
X};
X
Xstatic ButtonChoice ModeChoices[] = {
X    { "family", "family" },
X    { "name", "name" },
X    { nil }
X};
X
Xstatic ButtonChoice FamilyChoices[] = {
X    { "helvetica", "helvetica" },
X    { "times", "times" },
X    { nil }
X};
X
Xstatic ButtonChoice WeightChoices[] = {
X    { "medium", "medium" },
X    { "bold", "bold" },
X    { nil }
X};
X
Xstatic ButtonChoice SlantChoices[] = {
X    { "roman", "r" },
X    { "oblique", "o" },
X    { "italic", "i" },
X    { nil }
X};
X
Xstatic ButtonChoice PointChoices[] = {
X    { "24 point", "24" },
X    { "18 point", "18" },
X    { "14 point", "14" },
X    { "12 point", "12" },
X    { nil }
X};
X
Xstatic Interactor* ButtonBox (
X    const char* name, ButtonState* state, ButtonChoice* choices
X) {
X    HBox* box = new HBox();
X    box->Align(Center);
X    for (int i = 0; choices[i].label != nil; ++i) {
X        box->Insert(
X            new RadioButton(name, choices[i].label, state, choices[i].value)
X        );
X        box->Insert(new HGlue(round(0.05*inch), round(0.05*inch), 0));
X    }
X    return box;
X}
X
XFontBrowser::FontBrowser (ButtonState* s, const char* samp) : (s, nil) {
X    Init(samp);
X}
X
XFontBrowser::FontBrowser (
X    const char* name, ButtonState* s, const char* samp
X) : (s, nil) {
X    SetInstance(name);
X    Init(samp);
X}
X
XFontBrowser::~FontBrowser () {
X    delete family;
X    delete weight;
X    delete slant;
X    delete point;
X    delete fontname;
X}
X
Xvoid FontBrowser::Init (const char* samp) {
X    SetClassName("FontBrowser");
X
X    family = new ButtonState(FamilyChoices[0].value);
X    weight = new ButtonState(WeightChoices[0].value);
X    slant = new ButtonState(SlantChoices[0].value);
X    point = new ButtonState(PointChoices[0].value);
X
X    sample = new FontSample(samp);
X
X    Insert(
X        new HBox(
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X            new VBox(
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X                sample,
X                new VGlue(round(0.3*inch), round(0.2*inch), 0),
X                new HBox(
X                    new VBox(
X                        new HBox(
X                            new Message("label", "Family"),
X                            new HGlue(round(0.2*inch), round(0.1*inch), ),
X                            ButtonBox("choice", family, FamilyChoices)
X                        ),
X                        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X                        new HBox(
X                            new Message("label", "Weight"),
X                            new HGlue(round(0.2*inch), round(0.1*inch), ),
X                            ButtonBox("choice", weight, WeightChoices)
X                        ),
X                        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X                        new HBox(
X                            new Message("label", "Slant"),
X                            new HGlue(round(0.2*inch), round(0.1*inch), ),
X                            ButtonBox("choice", slant, SlantChoices)
X                        ),
X                        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X                        new HBox(
X                            new Message("label", "Size"),
X                            new HGlue(round(0.2*inch), round(0.1*inch), ),
X                            ButtonBox("choice", point, PointChoices)
X                        ),
X                    ),
X                    new HGlue(round(0.3*inch), round(0.2*inch), hfil),
X                    new PushButton("Quit", state, true)
X                ),
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X            ),
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X        )
X    );
X
X    fontname = new char[1000];
X    UpdateFontname();
X}
X
Xconst char* FontBrowser::Fontname () {
X    return fontname;
X}
X
Xboolean FontBrowser::Accept () {
X    Event e;
X    int v;
X
X    state->SetValue(0);
X    do {
X        Read(e);
X        e.target->Handle(e);
X        UpdateFontname();
X        state->GetValue(v);
X    } while (v == 0 && e.target != nil);
X    return v == 1 || e.target == nil;
X}
X
Xvoid FontBrowser::UpdateFontname () {
X    void* v;
X    family->GetValue(v);
X    const char* fam = (char*)v;
X    weight->GetValue(v);
X    const char* wgt = (char*)v;
X    slant->GetValue(v);
X    const char* sl = (char*)v;
X    point->GetValue(v);
X    const char* pnt = (char*)v;
X    sprintf(fontname,
X        "*-*-%s-%s-%s-normal-*-*-%s0-*-*-*-*-iso8859-1",
X        fam, wgt, sl, pnt
X    );
X    sample->ShowFont(Fontname());
X}
END_OF_FILE
if test 4862 -ne `wc -c <'t5/fontbrowser.c'`; then
    echo shar: \"'t5/fontbrowser.c'\" unpacked with wrong size!
fi
# end of 't5/fontbrowser.c'
fi
if test -f 't5/fontbrowser.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t5/fontbrowser.h'\"
else
echo shar: Extracting \"'t5/fontbrowser.h'\" \(642 characters\)
sed "s/^X//" >'t5/fontbrowser.h' <<'END_OF_FILE'
X/*
X * a Dialog for browsing fonts
X */
X
X#ifndef fontbrowser_h
X#define fontbrowser_h
X
X#include <InterViews/dialog.h>
X
Xclass FontSample;
Xclass Deck;
Xclass StringEditor;
X
Xclass FontBrowser : public Dialog {
Xpublic:
X    FontBrowser(ButtonState*, const char* sample);
X    FontBrowser(const char*, ButtonState*, const char* sample);
X    virtual ~FontBrowser();
X
X    virtual boolean Accept();
X    const char* Fontname();
Xprotected:
X    void UpdateFontname();
X
X    char* fontname;
X    FontSample* sample;
X    ButtonState* family;
X    ButtonState* weight;
X    ButtonState* slant;
X    ButtonState* point;
Xprivate:
X    void Init(const char*);
X};
X
X#endif
END_OF_FILE
if test 642 -ne `wc -c <'t5/fontbrowser.h'`; then
    echo shar: \"'t5/fontbrowser.h'\" unpacked with wrong size!
fi
# end of 't5/fontbrowser.h'
fi
if test -f 't5/fontsample.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t5/fontsample.c'\"
else
echo shar: Extracting \"'t5/fontsample.c'\" \(1674 characters\)
sed "s/^X//" >'t5/fontsample.c' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#include "fontsample.h"
X
X#include <InterViews/font.h>
X#include <InterViews/painter.h>
X#include <InterViews/pattern.h>
X#include <InterViews/shape.h>
X#include <string.h>
X
Xstatic const int BufferSize = 1000;
X
XFontSample::FontSample(const char* sample) : () {
X    Init(sample);
X}
X
XFontSample::FontSample(const char* name, const char* sample) : () {
X    SetInstance(name);
X    Init(sample);
X}
X
XFontSample::~FontSample () {
X    delete sample;
X    delete fontname;
X    delete font;
X}
X
Xvoid FontSample::Init (const char* samp) {
X    SetClassName("FontSample");
X    font = nil;
X    fontname = new char [BufferSize];
X    sample = new char [BufferSize];
X    strcpy(sample, samp);
X}
X
Xvoid FontSample::Reconfig () {
X    Painter* tmp = new Painter(output);
X    Unref(output);
X    output = tmp;
X    output->Reference();
X    output->SetFont(font);
X    Interactor::Reconfig();
X    shape->Rect(font->Width(sample), font->Height());
X    shape->Rigid(hfil, hfil, 0, 0);
X}
X
Xvoid FontSample::Redraw (Coord l, Coord b, Coord r, Coord t) {
X    output->ClearRect(canvas, l, b, r, t);
X    output->Text(canvas, sample, 0, 0);
X}
X
Xvoid FontSample::ShowFont (const char* name) {
X    if (strcmp(name, fontname) != 0) {
X        strcpy(fontname, name);
X        //Unref(font);
X        font = new Font(fontname);
X        font->Reference();
X        if (output != nil) {
X            if (font->Valid()) {
X                output->FillBg(true);
X                output->SetPattern(solid);
X                Reconfig();
X            } else {
X                output->FillBg(false);
X                output->SetPattern(gray);
X            }
X            Draw();
X        }
X    }
X}
END_OF_FILE
if test 1674 -ne `wc -c <'t5/fontsample.c'`; then
    echo shar: \"'t5/fontsample.c'\" unpacked with wrong size!
fi
# end of 't5/fontsample.c'
fi
if test -f 't5/fontsample.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t5/fontsample.h'\"
else
echo shar: Extracting \"'t5/fontsample.h'\" \(542 characters\)
sed "s/^X//" >'t5/fontsample.h' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#ifndef fontsample_h
X#define fontsample_h
X
X#include <InterViews/interactor.h>
X
Xclass Font;
X
Xclass FontSample : public Interactor {
Xpublic:
X    FontSample(const char* sample);
X    FontSample(const char* name, const char* sample);
X    virtual ~FontSample();
X
X    void ShowFont(const char* name);
Xprotected:
X    virtual void Reconfig();
X    virtual void Redraw(Coord, Coord, Coord, Coord);
Xprivate:
X    void Init(const char*);
Xprivate:
X    Font* font;
X    char* fontname;
X    char* sample;
X};
X
X#endif
END_OF_FILE
if test 542 -ne `wc -c <'t5/fontsample.h'`; then
    echo shar: \"'t5/fontsample.h'\" unpacked with wrong size!
fi
# end of 't5/fontsample.h'
fi
if test -f 't5/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t5/main.c'\"
else
echo shar: Extracting \"'t5/main.c'\" \(1146 characters\)
sed "s/^X//" >'t5/main.c' <<'END_OF_FILE'
X#include <InterViews/button.h>
X#include <InterViews/world.h>
X#include <stdio.h>
X
X#include "fontbrowser.h"
X
Xstatic PropertyData properties[] = {
X    { "tutorial*sample", "The quick brown fox..." },
X    { "tutorial*choice*font",
X        "*-*-times-medium-r-normal-*-*-120-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*label*font",
X        "*-*-times-bold-r-normal-*-*-120-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*PushButton*font",
X        "*-*-times-medium-i-normal-*-*-140-*-*-*-*-iso8859-1"
X    },
X    { nil }
X};
X
Xstatic OptionDesc options[] = {
X    { "-sample", "tutorial*sample", OptionValueNext },
X    { nil }
X};
X
Xint main (int argc, char* argv[]) {
X    World* world = new World("tutorial", properties, options, argc, argv);
X    ButtonState* quit = new ButtonState(false);
X    FontBrowser* browser = new FontBrowser(
X        quit, world->GetAttribute("sample")
X    );
X
X    browser->SetName("InterViews font browser");
X    browser->SetIconName("ifb");
X
X    world->InsertApplication(browser);
X    browser->Accept();
X    world->Remove(browser);
X
X    puts(browser->Fontname());
X
X    delete browser;
X    delete quit;
X    delete world;
X    return 0;
X}
END_OF_FILE
if test 1146 -ne `wc -c <'t5/main.c'`; then
    echo shar: \"'t5/main.c'\" unpacked with wrong size!
fi
# end of 't5/main.c'
fi
if test -f 't6/Imakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t6/Imakefile'\"
else
echo shar: Extracting \"'t6/Imakefile'\" \(320 characters\)
sed "s/^X//" >'t6/Imakefile' <<'END_OF_FILE'
X#
X# InterViews tutorial part 6
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)//**/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontbrowser.o \
X    fontsample.o \
X    main.o
X
XComplexProgramTarget(t6)
X
XMakeObjectFromSrc(fontbrowser)
XMakeObjectFromSrc(fontsample)
XMakeObjectFromSrc(main)
END_OF_FILE
if test 320 -ne `wc -c <'t6/Imakefile'`; then
    echo shar: \"'t6/Imakefile'\" unpacked with wrong size!
fi
# end of 't6/Imakefile'
fi
if test -f 't6/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t6/Makefile'\"
else
echo shar: Extracting \"'t6/Makefile'\" \(6603 characters\)
sed "s/^X//" >'t6/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.41 89/02/21 11:42:35 jim Exp $
X
X#
X# "IVImake.tmpl" - generic imake template customized for InterViews
X#
X# You may change platform-specific parameters in the appropriate .cf
X# configuration files.  You may set site-wide parameters in the file
X# IVsite.def.  You may need a full rebuild if you change any parameters.
X#
X
X# architecture:  MIPSEL
X
X# platform:  $XConsortium: ultrix.cf,v 1.3 89/02/24 13:34:28 jim Exp $
X# operating system:             Ultrix-32 3.0
X
X#
X# Generic make variables
X#
X
X            SHELL = /bin/sh
X
X              TOP = .
X
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X  BOOTSTRAPCPUCMD = cpu
X  BOOTSTRAPMACROS = BOOTSTRAPCFLAGS='$(BOOTSTRAPCFLAGS)' DESTDIR='$(DESTDIR)' \
X			EXTRA_CFLAGS='$(EXTRA_CFLAGS)'
X               CC = cc
X         COMPRESS = compress
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E	 $(STD_CPP_DEFINES)
X           DEPEND = makedepend
X         GENCLASS = genclass
X            IMAKE = imake
X          INSTALL = install
X               LD = ld
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make X=$X
X        MKDIRHIER = mkdirhier
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X             TAGS = ctags
X            TROFF = psroff
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X      CDEBUGFLAGS =
X           CFLAGS = $(CDEBUGFLAGS) $(EXTRA_CFLAGS) \
X			$(INCLUDES) $(STD_DEFINES) $(DEFINES)
X        LINTFLAGS = $(LINTOPTS) $(INCLUDES) $(STD_DEFINES) $(DEFINES) -DLINT
X          LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        MACROFILE = ultrix.cf
X        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS) $(EXTRA_IMAKEOPTS)
X           RM_CMD = $(RM) .emacs_* *.CKP *.ln *.BAK *.bak *.a *.o *..c ,* *~ \
X			a.out core errs tags TAGS make.log make.out
X
X#
X# Project.tmpl - project-specific configuration file
X#
X
X          DESTDIR =
X
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(DESTDIR)/usr/bin/X11
X      LOCALBINDIR = $(DESTDIR)/usr/local/bin/
X          INCROOT = $(DESTDIR)/usr/include
X
X           INCDIR = $(INCROOT)/InterViews
X     TEMPLATESDIR = $(INCDIR)/Templates
X           LIBDIR = $(DESTDIR)/usr/lib/X11
X        CONFIGDIR = $(LIBDIR)/config
X      IVCONFIGDIR = $(CONFIGDIR)/InterViews
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)n
X
X        CONFIGSRC = $(TOP)/config
X      IVCONFIGSRC = $(CONFIGSRC)/InterViews
X            IVSRC = $(TOP)/src
X       INCLUDESRC = $(IVSRC)/InterViews
X     TEMPLATESSRC = $(INCLUDESRC)/Templates
X           BINSRC = $(IVSRC)/bin
X         IMAKESRC = $(BINSRC)/imake
X        SCRIPTSRC = $(BINSRC)/scripts
X LIBINTERVIEWSSRC = $(IVSRC)/libInterViews
X    LIBGRAPHICSRC = $(IVSRC)/libgraphic
X       LIBTEXTSRC = $(IVSRC)/libtext
X           MANSRC = $(TOP)/man
X
X        IMAKETMPL = "IVImake.tmpl"
X
X        IMAKEOPTS = -T $(IMAKETMPL) -I$(IVCONFIGDIR) -I$(CONFIGDIR) \
X		    -DUseInstalled
X
X               CC = CC
X               LD = CC
X     DEPENDCFLAGS = $(CFLAGS) -I/usr/include/CC
X     INSTPGMFLAGS = -s
X     AFTERINSTALL = $(RM)
X
X         INCLUDES = -I$(SRC) -I$(GEN) -I$(INCDIR)/Std
X        TEMPLATES = $(TEMPLATESDIR)
X    LIBINTERVIEWS = $(USRLIBDIR)/libInterViews$X.a
X       LIBGRAPHIC = $(USRLIBDIR)/libgraphic.a
X          LIBTEXT = $(USRLIBDIR)/libtext.a
X
X             AOUT = a.out
X              SRC = .
X              GEN = Generated
X                M = MIPSEL
X                X = X11
X
X#
X# InterViews tutorial part 6
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontbrowser.o \
X    fontsample.o \
X    main.o
X
XPROGRAM		= t6
X
Xall:: $(AOUT)
X
X$(AOUT): $(OBJS) $(LOCAL_LIBRARIES)
X	@echo "linking $@"
X	-@if [ ! -w $@ ]; then $(RM) $@; else exit 0; fi
X	$(CC) -o $@ $(OBJS) $(LOCAL_LIBRARIES) $(LDFLAGS) $(EXTRA_LOAD_FLAGS)
X
Xinstall:: $(AOUT)
X	$(INSTALL) -c $(INSTPGMFLAGS) $(INSTALLFLAGS) $(AOUT) $(BINDIR)/$(PROGRAM)
X	$(AFTERINSTALL) $(AOUT)
X
Xdepend:: $(SRCS)
X	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPENDCFLAGS) -- $(SRCS)
X
Xclean::
X	$(RM) $(AOUT)
X
Xfontbrowser.o: $(SRC)/fontbrowser.c
X	@echo "compiling $(SRC)/fontbrowser.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/fontbrowser.c
X
Xfontsample.o: $(SRC)/fontsample.c
X	@echo "compiling $(SRC)/fontsample.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/fontsample.c
X
Xmain.o: $(SRC)/main.c
X	@echo "compiling $(SRC)/main.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/main.c
X
X#
X# Common rules for all Makefiles from "IVImake.tmpl" - do not edit.
X#
X
Xclean::
X	$(RM_CMD) \#*
X
XMakefile::
X	-@if [ -f Makefile ]; then \
X		$(RM) Makefile.bak; \
X		$(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP)
X
Xinstall::
XMakefiles::
X
X#
X# dependencies generated by makedepend
X#
X
X# DO NOT DELETE
X
Xfontbrowser.o: fontbrowser.h /usr/include/InterViews/dialog.h
Xfontbrowser.o: /usr/include/InterViews/scene.h
Xfontbrowser.o: /usr/include/InterViews/interactor.h
Xfontbrowser.o: /usr/include/InterViews/defs.h fontsample.h
Xfontbrowser.o: /usr/include/InterViews/box.h /usr/include/InterViews/button.h
Xfontbrowser.o: /usr/include/InterViews/subject.h
Xfontbrowser.o: /usr/include/InterViews/event.h /usr/include/InterViews/glue.h
Xfontbrowser.o: /usr/include/InterViews/shape.h
Xfontbrowser.o: /usr/include/InterViews/message.h
Xfontbrowser.o: /usr/include/InterViews/tray.h
Xfontbrowser.o: /usr/include/InterViews/Std/stdio.h //usr/include/stdio.h
Xfontbrowser.o: /usr/include/InterViews/Std/string.h
Xfontsample.o: fontsample.h /usr/include/InterViews/interactor.h
Xfontsample.o: /usr/include/InterViews/defs.h /usr/include/InterViews/font.h
Xfontsample.o: /usr/include/InterViews/resource.h
Xfontsample.o: /usr/include/InterViews/painter.h
Xfontsample.o: /usr/include/InterViews/pattern.h
Xfontsample.o: /usr/include/InterViews/shape.h
Xfontsample.o: /usr/include/InterViews/Std/string.h
Xmain.o: /usr/include/InterViews/button.h /usr/include/InterViews/interactor.h
Xmain.o: /usr/include/InterViews/defs.h /usr/include/InterViews/subject.h
Xmain.o: /usr/include/InterViews/world.h /usr/include/InterViews/scene.h
Xmain.o: /usr/include/InterViews/Std/stdio.h //usr/include/stdio.h
Xmain.o: fontbrowser.h /usr/include/InterViews/dialog.h
END_OF_FILE
if test 6603 -ne `wc -c <'t6/Makefile'`; then
    echo shar: \"'t6/Makefile'\" unpacked with wrong size!
fi
# end of 't6/Makefile'
fi
if test -f 't6/fontbrowser.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t6/fontbrowser.c'\"
else
echo shar: Extracting \"'t6/fontbrowser.c'\" \(5777 characters\)
sed "s/^X//" >'t6/fontbrowser.c' <<'END_OF_FILE'
X/*
X * a Dialog for browsing fonts
X */
X
X#include "fontbrowser.h"
X
X#include "fontsample.h"
X
X#include <InterViews/box.h>
X#include <InterViews/button.h>
X#include <InterViews/event.h>
X#include <InterViews/glue.h>
X#include <InterViews/message.h>
X#include <InterViews/tray.h>
X#include <stdio.h>
X#include <string.h>
X
Xclass ButtonChoice {
Xpublic:
X    const char* label;
X    void* value;
X};
X
Xstatic ButtonChoice ModeChoices[] = {
X    { "family", "family" },
X    { "name", "name" },
X    { nil }
X};
X
Xstatic ButtonChoice FamilyChoices[] = {
X    { "helvetica", "helvetica" },
X    { "times", "times" },
X    { nil }
X};
X
Xstatic ButtonChoice WeightChoices[] = {
X    { "medium", "medium" },
X    { "bold", "bold" },
X    { nil }
X};
X
Xstatic ButtonChoice SlantChoices[] = {
X    { "roman", "r" },
X    { "oblique", "o" },
X    { "italic", "i" },
X    { nil }
X};
X
Xstatic ButtonChoice PointChoices[] = {
X    { "24 point", "24" },
X    { "18 point", "18" },
X    { "14 point", "14" },
X    { "12 point", "12" },
X    { nil }
X};
X
Xstatic Interactor* ButtonBox (
X    const char* name, ButtonState* state, ButtonChoice* choices
X) {
X    HBox* box = new HBox();
X    box->Align(Center);
X    for (int i = 0; choices[i].label != nil; ++i) {
X        box->Insert(
X            new RadioButton(name, choices[i].label, state, choices[i].value)
X        );
X        box->Insert(new HGlue(round(0.05*inch), round(0.05*inch), 0));
X    }
X    return box;
X}
X
XFontBrowser::FontBrowser (ButtonState* s, const char* samp) : (s, nil) {
X    Init(samp);
X}
X
XFontBrowser::FontBrowser (
X    const char* name, ButtonState* s, const char* samp
X) : (s, nil) {
X    SetInstance(name);
X    Init(samp);
X}
X
XFontBrowser::~FontBrowser () {
X    delete family;
X    delete weight;
X    delete slant;
X    delete point;
X    delete fontname;
X}
X
Xvoid FontBrowser::Init (const char* samp) {
X    SetClassName("FontBrowser");
X
X    family = new ButtonState(FamilyChoices[0].value);
X    weight = new ButtonState(WeightChoices[0].value);
X    slant = new ButtonState(SlantChoices[0].value);
X    point = new ButtonState(PointChoices[0].value);
X
X    sample = new FontSample(samp);
X    Tray* familymode = new Tray();
X    Interactor* familylabel = new Message("label", "Family");
X    Interactor* familychoices = ButtonBox("choice", family, FamilyChoices);
X    Interactor* weightlabel = new Message("label", "Weight");
X    Interactor* weightchoices = ButtonBox("choice", weight, WeightChoices);
X    Interactor* slantlabel = new Message("label", "Slant");
X    Interactor* slantchoices = ButtonBox("choice", slant, SlantChoices);
X    Interactor* pointlabel = new Message("label", "Size");
X    Interactor* pointchoices = ButtonBox("choice", point, PointChoices);
X    familymode->VBox(
X        familymode,
X        familychoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        weightchoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        slantchoices
X    );
X    familymode->VBox(
X        slantchoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        pointchoices,
X        familymode
X    );
X    familymode->HBox(
X        familymode,
X        familylabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        familychoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, familylabel, familychoices);
X    familymode->HBox(
X        familymode,
X        weightlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        weightchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, weightlabel, weightchoices);
X    familymode->HBox(
X        familymode,
X        slantlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        slantchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, slantlabel, slantchoices);
X    familymode->HBox(
X        familymode,
X        pointlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        pointchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, pointlabel, pointchoices);
X    familymode->Align(Left,
X        familylabel, weightlabel, slantlabel, pointlabel
X    );
X    familymode->Align(Left,
X        familychoices, weightchoices, slantchoices, pointchoices
X    );
X
X    Insert(
X        new HBox(
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X            new VBox(
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X                sample,
X                new VGlue(round(0.3*inch), round(0.2*inch), 0),
X                new HBox(
X                    familymode,
X                    new HGlue(round(0.3*inch), round(0.2*inch), hfil),
X                    new PushButton("Quit", state, true)
X                ),
X                new VGlue(round(0.3*inch), round(0.2*inch), round(1.0*inch)),
X            ),
X            new HGlue(round(0.5*inch), round(0.4*inch), round(2.0*inch)),
X        )
X    );
X
X    fontname = new char[1000];
X    UpdateFontname();
X}
X
Xconst char* FontBrowser::Fontname () {
X    return fontname;
X}
X
Xboolean FontBrowser::Accept () {
X    Event e;
X    int v;
X
X    state->SetValue(0);
X    do {
X        Read(e);
X        e.target->Handle(e);
X        UpdateFontname();
X        state->GetValue(v);
X    } while (v == 0 && e.target != nil);
X    return v == 1 || e.target == nil;
X}
X
Xvoid FontBrowser::UpdateFontname () {
X    void* v;
X    family->GetValue(v);
X    const char* fam = (char*)v;
X    weight->GetValue(v);
X    const char* wgt = (char*)v;
X    slant->GetValue(v);
X    const char* sl = (char*)v;
X    point->GetValue(v);
X    const char* pnt = (char*)v;
X    sprintf(fontname,
X        "*-*-%s-%s-%s-normal-*-*-%s0-*-*-*-*-iso8859-1",
X        fam, wgt, sl, pnt
X    );
X    sample->ShowFont(Fontname());
X}
END_OF_FILE
if test 5777 -ne `wc -c <'t6/fontbrowser.c'`; then
    echo shar: \"'t6/fontbrowser.c'\" unpacked with wrong size!
fi
# end of 't6/fontbrowser.c'
fi
if test -f 't6/fontbrowser.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t6/fontbrowser.h'\"
else
echo shar: Extracting \"'t6/fontbrowser.h'\" \(642 characters\)
sed "s/^X//" >'t6/fontbrowser.h' <<'END_OF_FILE'
X/*
X * a Dialog for browsing fonts
X */
X
X#ifndef fontbrowser_h
X#define fontbrowser_h
X
X#include <InterViews/dialog.h>
X
Xclass FontSample;
Xclass Deck;
Xclass StringEditor;
X
Xclass FontBrowser : public Dialog {
Xpublic:
X    FontBrowser(ButtonState*, const char* sample);
X    FontBrowser(const char*, ButtonState*, const char* sample);
X    virtual ~FontBrowser();
X
X    virtual boolean Accept();
X    const char* Fontname();
Xprotected:
X    void UpdateFontname();
X
X    char* fontname;
X    FontSample* sample;
X    ButtonState* family;
X    ButtonState* weight;
X    ButtonState* slant;
X    ButtonState* point;
Xprivate:
X    void Init(const char*);
X};
X
X#endif
END_OF_FILE
if test 642 -ne `wc -c <'t6/fontbrowser.h'`; then
    echo shar: \"'t6/fontbrowser.h'\" unpacked with wrong size!
fi
# end of 't6/fontbrowser.h'
fi
if test -f 't6/fontsample.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t6/fontsample.c'\"
else
echo shar: Extracting \"'t6/fontsample.c'\" \(1674 characters\)
sed "s/^X//" >'t6/fontsample.c' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#include "fontsample.h"
X
X#include <InterViews/font.h>
X#include <InterViews/painter.h>
X#include <InterViews/pattern.h>
X#include <InterViews/shape.h>
X#include <string.h>
X
Xstatic const int BufferSize = 1000;
X
XFontSample::FontSample(const char* sample) : () {
X    Init(sample);
X}
X
XFontSample::FontSample(const char* name, const char* sample) : () {
X    SetInstance(name);
X    Init(sample);
X}
X
XFontSample::~FontSample () {
X    delete sample;
X    delete fontname;
X    delete font;
X}
X
Xvoid FontSample::Init (const char* samp) {
X    SetClassName("FontSample");
X    font = nil;
X    fontname = new char [BufferSize];
X    sample = new char [BufferSize];
X    strcpy(sample, samp);
X}
X
Xvoid FontSample::Reconfig () {
X    Painter* tmp = new Painter(output);
X    Unref(output);
X    output = tmp;
X    output->Reference();
X    output->SetFont(font);
X    Interactor::Reconfig();
X    shape->Rect(font->Width(sample), font->Height());
X    shape->Rigid(hfil, hfil, 0, 0);
X}
X
Xvoid FontSample::Redraw (Coord l, Coord b, Coord r, Coord t) {
X    output->ClearRect(canvas, l, b, r, t);
X    output->Text(canvas, sample, 0, 0);
X}
X
Xvoid FontSample::ShowFont (const char* name) {
X    if (strcmp(name, fontname) != 0) {
X        strcpy(fontname, name);
X        //Unref(font);
X        font = new Font(fontname);
X        font->Reference();
X        if (output != nil) {
X            if (font->Valid()) {
X                output->FillBg(true);
X                output->SetPattern(solid);
X                Reconfig();
X            } else {
X                output->FillBg(false);
X                output->SetPattern(gray);
X            }
X            Draw();
X        }
X    }
X}
END_OF_FILE
if test 1674 -ne `wc -c <'t6/fontsample.c'`; then
    echo shar: \"'t6/fontsample.c'\" unpacked with wrong size!
fi
# end of 't6/fontsample.c'
fi
if test -f 't6/fontsample.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t6/fontsample.h'\"
else
echo shar: Extracting \"'t6/fontsample.h'\" \(542 characters\)
sed "s/^X//" >'t6/fontsample.h' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#ifndef fontsample_h
X#define fontsample_h
X
X#include <InterViews/interactor.h>
X
Xclass Font;
X
Xclass FontSample : public Interactor {
Xpublic:
X    FontSample(const char* sample);
X    FontSample(const char* name, const char* sample);
X    virtual ~FontSample();
X
X    void ShowFont(const char* name);
Xprotected:
X    virtual void Reconfig();
X    virtual void Redraw(Coord, Coord, Coord, Coord);
Xprivate:
X    void Init(const char*);
Xprivate:
X    Font* font;
X    char* fontname;
X    char* sample;
X};
X
X#endif
END_OF_FILE
if test 542 -ne `wc -c <'t6/fontsample.h'`; then
    echo shar: \"'t6/fontsample.h'\" unpacked with wrong size!
fi
# end of 't6/fontsample.h'
fi
if test -f 't6/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t6/main.c'\"
else
echo shar: Extracting \"'t6/main.c'\" \(1146 characters\)
sed "s/^X//" >'t6/main.c' <<'END_OF_FILE'
X#include <InterViews/button.h>
X#include <InterViews/world.h>
X#include <stdio.h>
X
X#include "fontbrowser.h"
X
Xstatic PropertyData properties[] = {
X    { "tutorial*sample", "The quick brown fox..." },
X    { "tutorial*choice*font",
X        "*-*-times-medium-r-normal-*-*-120-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*label*font",
X        "*-*-times-bold-r-normal-*-*-120-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*PushButton*font",
X        "*-*-times-medium-i-normal-*-*-140-*-*-*-*-iso8859-1"
X    },
X    { nil }
X};
X
Xstatic OptionDesc options[] = {
X    { "-sample", "tutorial*sample", OptionValueNext },
X    { nil }
X};
X
Xint main (int argc, char* argv[]) {
X    World* world = new World("tutorial", properties, options, argc, argv);
X    ButtonState* quit = new ButtonState(false);
X    FontBrowser* browser = new FontBrowser(
X        quit, world->GetAttribute("sample")
X    );
X
X    browser->SetName("InterViews font browser");
X    browser->SetIconName("ifb");
X
X    world->InsertApplication(browser);
X    browser->Accept();
X    world->Remove(browser);
X
X    puts(browser->Fontname());
X
X    delete browser;
X    delete quit;
X    delete world;
X    return 0;
X}
END_OF_FILE
if test 1146 -ne `wc -c <'t6/main.c'`; then
    echo shar: \"'t6/main.c'\" unpacked with wrong size!
fi
# end of 't6/main.c'
fi
if test -f 't7/Imakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t7/Imakefile'\"
else
echo shar: Extracting \"'t7/Imakefile'\" \(371 characters\)
sed "s/^X//" >'t7/Imakefile' <<'END_OF_FILE'
X#
X# InterViews tutorial part 7
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)//**/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontbrowser.o \
X    fontsample.o \
X    cyclebutton.o \
X    main.o
X
XComplexProgramTarget(t7)
X
XMakeObjectFromSrc(fontbrowser)
XMakeObjectFromSrc(fontsample)
XMakeObjectFromSrc(cyclebutton)
XMakeObjectFromSrc(main)
END_OF_FILE
if test 371 -ne `wc -c <'t7/Imakefile'`; then
    echo shar: \"'t7/Imakefile'\" unpacked with wrong size!
fi
# end of 't7/Imakefile'
fi
if test -f 't7/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t7/Makefile'\"
else
echo shar: Extracting \"'t7/Makefile'\" \(7028 characters\)
sed "s/^X//" >'t7/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.45.1 89/08/28 17:30:07 interran Exp $
X
X#
X# "IVImake.tmpl" - generic imake template customized for InterViews
X#
X# Change platform-specific parameters in the appropriate .cf files.
X# Define local site-specific parameters in IVlocal.def.  You may
X# need a full rebuild after changing some parameters.
X#
X
X# architecture:  MIPSEL
X
X# platform:  $XConsortium: ultrix.cf,v 1.16 89/10/11 18:54:54 jim Exp $
X# operating system:             Ultrix-32 3.0
X
X#
X# generic make variables
X#
X
X            SHELL = /bin/sh
X
X              TOP = .
X      CURRENT_DIR = .
X              SRC = .
X              GEN = Generated
X                M = MIPSEL
X                X = X11
X
X             AOUT = a.out
X     AFTERINSTALL = $(RM)
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X  BOOTSTRAPCPUCMD = cpu
X               CC = CC
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E $(STD_CPP_DEFINES)
X           DEPEND = makedepend
X     DEPENDCFLAGS = $(ALLDEFINES) -I/usr/include/CC
X         GENCLASS = mkclass
X            IMAKE = imake
X        IMAKETMPL = "IVImake.tmpl"
X        IMAKEOPTS = -T $(IMAKETMPL) -I$(CONFIGDIR) -I$(XCONFIGDIR) -DUseInstalled
X          INSTALL = install
X               LD = CC
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make X=$X $(MFLAGS)
X        MKDIRHIER = mkdirhier
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X             TAGS = ctags
X            TROFF = psroff
X     STD_INCLUDES =
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X
X     INSTPGMFLAGS = -s
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X         INCLUDES = -I$(SRC) -I$(GEN) -I$(INCDIR)/Std -I$(INCROOT)
X
X      CDEBUGFLAGS =
X       ALLDEFINES = $(STD_INCLUDES) $(INCLUDES) $(STD_DEFINES) $(DEFINES)
X           CFLAGS = $(CDEBUGFLAGS) $(ALLDEFINES) $(EXTRA_CFLAGS)
X        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)
X          LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS) $(EXTRA_IMAKEOPTS)
X           RM_CMD = $(RM) .emacs_* *.CKP *.ln *.BAK *.bak *.a *.o *..c ,* *~ \
X			a.out core errs tags TAGS make.log make.out
X
X#
X# project-specific make variables
X#
X
X          DESTDIR =
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(DESTDIR)/usr/bin/X11
X      LOCALBINDIR = $(DESTDIR)/usr/local/bin/
X          INCROOT = $(DESTDIR)/usr/include
X           INCDIR = $(INCROOT)/InterViews
X     TEMPLATESDIR = $(INCDIR)/Templates
X        CONFIGDIR = $(XCONFIGDIR)/InterViews
X       XCONFIGDIR = $(DESTDIR)/usr/lib/X11/config
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)n
X
X        TEMPLATES = $(TEMPLATESDIR)
X    LIBINTERVIEWS = $(USRLIBDIR)/libInterViews$X.a
X       LIBGRAPHIC = $(USRLIBDIR)/libgraphic.a
X          LIBTEXT = $(USRLIBDIR)/libtext.a
X
X#
X# InterViews tutorial part 7
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontbrowser.o \
X    fontsample.o \
X    cyclebutton.o \
X    main.o
X
XPROGRAM		= t7
X
Xall:: $(AOUT)
X
X$(AOUT): $(OBJS) $(LOCAL_LIBRARIES)
X	@echo "linking $@"
X	-@if [ ! -w $@ ]; then $(RM) $@; else exit 0; fi
X	$(CC) -o $@ $(OBJS) $(LOCAL_LIBRARIES) $(LDFLAGS) $(EXTRA_LOAD_FLAGS)
X
Xinstall:: $(AOUT)
X	$(INSTALL) -c $(INSTPGMFLAGS) $(INSTALLFLAGS) $(AOUT) $(BINDIR)/$(PROGRAM)
X	$(AFTERINSTALL) $(AOUT)
X
Xdepend:: $(SRCS)
X	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPENDCFLAGS) -- $(SRCS)
X
Xclean::
X	$(RM) $(AOUT)
X
Xfontbrowser.o: $(SRC)/fontbrowser.c
X	@echo "compiling $(SRC)/fontbrowser.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/fontbrowser.c
X
Xfontsample.o: $(SRC)/fontsample.c
X	@echo "compiling $(SRC)/fontsample.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/fontsample.c
X
Xcyclebutton.o: $(SRC)/cyclebutton.c
X	@echo "compiling $(SRC)/cyclebutton.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/cyclebutton.c
X
Xmain.o: $(SRC)/main.c
X	@echo "compiling $(SRC)/main.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/main.c
X
X#
X# common rules for all Makefiles
X#
X
Xclean::
X	$(RM_CMD) \#*
X
XMakefile::
X	-@if [ -f Makefile ]; then \
X		$(RM) Makefile.bak; \
X		$(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)
X
Xinstall::
XMakefiles::
X
X#
X# dependencies generated by makedepend
X#
X
X# DO NOT DELETE
X
Xcyclebutton.o: cyclebutton.h /usr/include/InterViews/button.h
Xcyclebutton.o: /usr/include/InterViews/interactor.h
Xcyclebutton.o: /usr/include/InterViews/defs.h
Xcyclebutton.o: /usr/include/InterViews/subject.h
Xcyclebutton.o: /usr/include/InterViews/resource.h
Xcyclebutton.o: /usr/include/InterViews/bitmap.h
Xcyclebutton.o: /usr/include/InterViews/font.h
Xcyclebutton.o: /usr/include/InterViews/painter.h
Xcyclebutton.o: /usr/include/InterViews/shape.h
Xfontbrowser.o: fontbrowser.h /usr/include/InterViews/dialog.h
Xfontbrowser.o: /usr/include/InterViews/scene.h
Xfontbrowser.o: /usr/include/InterViews/interactor.h
Xfontbrowser.o: /usr/include/InterViews/defs.h cyclebutton.h
Xfontbrowser.o: /usr/include/InterViews/button.h
Xfontbrowser.o: /usr/include/InterViews/subject.h
Xfontbrowser.o: /usr/include/InterViews/resource.h fontsample.h
Xfontbrowser.o: /usr/include/InterViews/box.h /usr/include/InterViews/event.h
Xfontbrowser.o: /usr/include/InterViews/frame.h /usr/include/InterViews/glue.h
Xfontbrowser.o: /usr/include/InterViews/shape.h
Xfontbrowser.o: /usr/include/InterViews/message.h
Xfontbrowser.o: /usr/include/InterViews/tray.h
Xfontbrowser.o: /usr/include/InterViews/Std/stdio.h //usr/include/stdio.h
Xfontbrowser.o: /usr/include/InterViews/Std/string.h
Xfontsample.o: fontsample.h /usr/include/InterViews/interactor.h
Xfontsample.o: /usr/include/InterViews/defs.h /usr/include/InterViews/font.h
Xfontsample.o: /usr/include/InterViews/resource.h
Xfontsample.o: /usr/include/InterViews/painter.h
Xfontsample.o: /usr/include/InterViews/pattern.h
Xfontsample.o: /usr/include/InterViews/shape.h
Xfontsample.o: /usr/include/InterViews/Std/string.h
Xmain.o: /usr/include/InterViews/button.h /usr/include/InterViews/interactor.h
Xmain.o: /usr/include/InterViews/defs.h /usr/include/InterViews/subject.h
Xmain.o: /usr/include/InterViews/resource.h /usr/include/InterViews/world.h
Xmain.o: /usr/include/InterViews/scene.h /usr/include/InterViews/Std/stdio.h
Xmain.o: //usr/include/stdio.h fontbrowser.h /usr/include/InterViews/dialog.h
Xmarginframe.o: marginframe.h /usr/include/InterViews/scene.h
Xmarginframe.o: /usr/include/InterViews/interactor.h
Xmarginframe.o: /usr/include/InterViews/defs.h
Xmarginframe.o: /usr/include/InterViews/canvas.h
Xmarginframe.o: /usr/include/InterViews/painter.h
Xmarginframe.o: /usr/include/InterViews/resource.h
Xmarginframe.o: /usr/include/InterViews/shape.h
END_OF_FILE
if test 7028 -ne `wc -c <'t7/Makefile'`; then
    echo shar: \"'t7/Makefile'\" unpacked with wrong size!
fi
# end of 't7/Makefile'
fi
if test -f 't7/cyclebutton.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t7/cyclebutton.c'\"
else
echo shar: Extracting \"'t7/cyclebutton.c'\" \(2902 characters\)
sed "s/^X//" >'t7/cyclebutton.c' <<'END_OF_FILE'
X/*
X * a Button which cycles through multiple choices
X */
X
X#include "cyclebutton.h"
X
X#include <InterViews/bitmap.h>
X#include <InterViews/font.h>
X#include <InterViews/painter.h>
X#include <InterViews/shape.h>
X
Xstatic const int cycle_width = 11;
Xstatic const int cycle_height = 11;
Xstatic char cycle_mask[] = {
X   0x78, 0x00, 0xfc, 0x05, 0xfe, 0x07, 0xfe, 0x07, 0xff, 0x07, 0xff, 0x07,
X   0xff, 0x07, 0xff, 0x03, 0xff, 0x03, 0xfd, 0x01, 0xf0, 0x00};
Xstatic char cycle_plain[] = {
X   0x78, 0x00, 0x84, 0x05, 0x00, 0x07, 0x80, 0x04, 0x01, 0x05, 0x03, 0x06,
X   0x05, 0x04, 0x09, 0x00, 0x07, 0x00, 0x0d, 0x01, 0xf0, 0x00};
Xstatic char cycle_hit[] = {
X   0x78, 0x00, 0x84, 0x05, 0x00, 0x07, 0x80, 0x07, 0x01, 0x07, 0x03, 0x06,
X   0x07, 0x04, 0x0f, 0x00, 0x07, 0x00, 0x0d, 0x01, 0xf0, 0x00};
X
Xstatic Bitmap* CycleMask;
Xstatic Bitmap* CyclePlain;
Xstatic Bitmap* CycleHit;
X
Xstatic const int Separator = 3;
X
XCycleButton::CycleButton (
X    ButtonState* subject, CycleButtonChoice* choices
X)  : (subject, nil) {
X    Init(choices);
X}
X
XCycleButton::CycleButton (
X    const char* name, ButtonState* subject, CycleButtonChoice* choices
X) : (subject, nil) {
X    SetInstance(name);
X    Init(choices);
X}
X
XCycleButton::~CycleButton () { }
X
Xvoid CycleButton::Init (CycleButtonChoice* c) {
X    SetClassName("CycleButton");
X    if (CycleMask == nil) {
X        CycleMask = new Bitmap(cycle_mask, cycle_width, cycle_height);
X        CyclePlain = new Bitmap(cycle_plain, cycle_width, cycle_height);
X        CycleHit = new Bitmap(cycle_hit, cycle_width, cycle_height);
X    }
X    choices = c;
X    for (count = 0; choices[count].label != nil; ++count) { }
X    current = 0;
X}
X
Xvoid CycleButton::Reconfig () {
X    Font* font = output->GetFont();
X    int width = 0;
X    for (int i = 0; i < count; ++i) {
X        width = max(width, font->Width(choices[i].label));
X    }
X    Button::Reconfig();
X    shape->Rect(width + cycle_width + Separator, font->Height());
X    shape->Rigid();
X}
X
Xvoid CycleButton::Redraw (Coord l, Coord b, Coord r, Coord t) {
X    Coord textx = cycle_width + Separator;
X    Coord texty = (ymax + 1 - output->GetFont()->Height()) / 2;
X    output->ClearRect(canvas, l, b, r, t);
X    output->Text(canvas, choices[current].label, textx, texty);
X    Refresh();
X}
X
Xvoid CycleButton::Refresh () {
X    Coord bitsx = 0;
X    Coord bitsy = (ymax + 1 - cycle_height)/2;
X    if (!hit) {
X        output->Stencil(canvas, bitsx, bitsy, CyclePlain, CycleMask);
X    } else {
X        output->Stencil(canvas, bitsx, bitsy, CycleHit, CycleMask);
X    }
X}
X
Xvoid CycleButton::Press () {
X    subject->SetValue(choices[(current + 1) % count].value);
X}
X
Xvoid CycleButton::Update () {
X    void* v;
X    subject->GetValue(v);
X    if (v != choices[current].value) {
X        for (int i = 0; i < count; ++i) {
X            if (v == choices[i].value) {
X                current = i;
X                break;
X            }
X        }
X        Draw();
X    }
X}
END_OF_FILE
if test 2902 -ne `wc -c <'t7/cyclebutton.c'`; then
    echo shar: \"'t7/cyclebutton.c'\" unpacked with wrong size!
fi
# end of 't7/cyclebutton.c'
fi
if test -f 't7/cyclebutton.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t7/cyclebutton.h'\"
else
echo shar: Extracting \"'t7/cyclebutton.h'\" \(715 characters\)
sed "s/^X//" >'t7/cyclebutton.h' <<'END_OF_FILE'
X/*
X * a Button which cycles through multiple choices
X */
X
X#ifndef cyclebutton_h
X#define cyclebutton_h
X
X#include <InterViews/button.h>
X
Xclass CycleButtonChoice {
Xpublic:
X    const char* label;
X    void* value;
X};
X
Xclass CycleButton : public Button {
Xpublic:
X    CycleButton(ButtonState*, CycleButtonChoice* choices);
X    CycleButton(const char* name, ButtonState*, CycleButtonChoice* choices);
X    virtual ~CycleButton();
Xprotected:
X    virtual void Reconfig();
X    virtual void Redraw(Coord, Coord, Coord, Coord);
X    virtual void Refresh();
X    virtual void Press();
X    virtual void Update();
Xprivate:
X    void Init(CycleButtonChoice*);
X
X    CycleButtonChoice* choices;
X    int count;
X    int current;
X};
X
X#endif
END_OF_FILE
if test 715 -ne `wc -c <'t7/cyclebutton.h'`; then
    echo shar: \"'t7/cyclebutton.h'\" unpacked with wrong size!
fi
# end of 't7/cyclebutton.h'
fi
if test -f 't7/fontbrowser.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t7/fontbrowser.c'\"
else
echo shar: Extracting \"'t7/fontbrowser.c'\" \(5720 characters\)
sed "s/^X//" >'t7/fontbrowser.c' <<'END_OF_FILE'
X/*
X * a Dialog for browsing fonts
X */
X
X#include "fontbrowser.h"
X
X#include "cyclebutton.h"
X#include "fontsample.h"
X
X#include <InterViews/box.h>
X#include <InterViews/button.h>
X#include <InterViews/event.h>
X#include <InterViews/frame.h>
X#include <InterViews/glue.h>
X#include <InterViews/message.h>
X#include <InterViews/tray.h>
X#include <stdio.h>
X#include <string.h>
X
Xclass ButtonChoice {
Xpublic:
X    const char* label;
X    void* value;
X};
X
Xstatic ButtonChoice ModeChoices[] = {
X    { "family", "family" },
X    { "name", "name" },
X    { nil }
X};
X
Xstatic ButtonChoice FamilyChoices[] = {
X    { "helvetica", "helvetica" },
X    { "times", "times" },
X    { nil }
X};
X
Xstatic ButtonChoice WeightChoices[] = {
X    { "medium", "medium" },
X    { "bold", "bold" },
X    { nil }
X};
X
Xstatic ButtonChoice SlantChoices[] = {
X    { "roman", "r" },
X    { "oblique", "o" },
X    { "italic", "i" },
X    { nil }
X};
X
Xstatic CycleButtonChoice PointChoices[] = {
X    { "24 point", "24" },
X    { "18 point", "18" },
X    { "14 point", "14" },
X    { "12 point", "12" },
X    { "10 point", "10" },
X    { "8 point", "8" },
X    { nil }
X};
X
Xstatic Interactor* ButtonBox (
X    const char* name, ButtonState* state, ButtonChoice* choices
X) {
X    HBox* box = new HBox();
X    box->Align(Center);
X    for (int i = 0; choices[i].label != nil; ++i) {
X        box->Insert(
X            new RadioButton(name, choices[i].label, state, choices[i].value)
X        );
X        box->Insert(new HGlue(round(0.05*inch), round(0.05*inch), 0));
X    }
X    return box;
X}
X
XFontBrowser::FontBrowser (ButtonState* s, const char* samp) : (s, nil) {
X    Init(samp);
X}
X
XFontBrowser::FontBrowser (
X    const char* name, ButtonState* s, const char* samp
X) : (s, nil) {
X    SetInstance(name);
X    Init(samp);
X}
X
XFontBrowser::~FontBrowser () {
X    delete family;
X    delete weight;
X    delete slant;
X    delete point;
X    delete fontname;
X}
X
Xvoid FontBrowser::Init (const char* samp) {
X    SetClassName("FontBrowser");
X
X    family = new ButtonState(FamilyChoices[0].value);
X    weight = new ButtonState(WeightChoices[0].value);
X    slant = new ButtonState(SlantChoices[0].value);
X    point = new ButtonState(PointChoices[0].value);
X
X    sample = new FontSample(samp);
X    Tray* familymode = new Tray();
X    Interactor* familylabel = new Message("label", "Family");
X    Interactor* familychoices = ButtonBox("choice", family, FamilyChoices);
X    Interactor* weightlabel = new Message("label", "Weight");
X    Interactor* weightchoices = ButtonBox("choice", weight, WeightChoices);
X    Interactor* slantlabel = new Message("label", "Slant");
X    Interactor* slantchoices = ButtonBox("choice", slant, SlantChoices);
X    Interactor* pointlabel = new Message("label", "Size");
X    Interactor* pointchoices = new CycleButton("choice", point, PointChoices);
X    familymode->VBox(
X        familymode,
X        familychoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        weightchoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        slantchoices
X    );
X    familymode->VBox(
X        slantchoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        pointchoices,
X        familymode
X    );
X    familymode->HBox(
X        familymode,
X        familylabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        familychoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, familylabel, familychoices);
X    familymode->HBox(
X        familymode,
X        weightlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        weightchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, weightlabel, weightchoices);
X    familymode->HBox(
X        familymode,
X        slantlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        slantchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, slantlabel, slantchoices);
X    familymode->HBox(
X        familymode,
X        pointlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        pointchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, pointlabel, pointchoices);
X    familymode->Align(Left,
X        familylabel, weightlabel, slantlabel, pointlabel
X    );
X    familymode->Align(Left,
X        familychoices, weightchoices, slantchoices, pointchoices
X    );
X
X    Insert(
X        new MarginFrame(
X            new VBox(
X                sample,
X                new VGlue(round(0.3*inch), round(0.2*inch), 0),
X                new HBox(
X                    familymode,
X                    new HGlue(round(0.3*inch), round(0.2*inch), hfil),
X                    new PushButton("Quit", state, true)
X                )
X            ),
X            round(0.5*inch), round(0.4*inch), round(2.0*inch),
X            round(0.3*inch), round(0.2*inch), round(1.0*inch)
X        )
X    );
X
X    fontname = new char[1000];
X    UpdateFontname();
X}
X
Xconst char* FontBrowser::Fontname () {
X    return fontname;
X}
X
Xboolean FontBrowser::Accept () {
X    Event e;
X    int v;
X
X    state->SetValue(0);
X    do {
X        Read(e);
X        e.target->Handle(e);
X        UpdateFontname();
X        state->GetValue(v);
X    } while (v == 0 && e.target != nil);
X    return v == 1 || e.target == nil;
X}
X
Xvoid FontBrowser::UpdateFontname () {
X    void* v;
X    family->GetValue(v);
X    const char* fam = (char*)v;
X    weight->GetValue(v);
X    const char* wgt = (char*)v;
X    slant->GetValue(v);
X    const char* sl = (char*)v;
X    point->GetValue(v);
X    const char* pnt = (char*)v;
X    sprintf(fontname,
X        "*-*-%s-%s-%s-normal-*-*-%s0-*-*-*-*-iso8859-1",
X        fam, wgt, sl, pnt
X    );
X    sample->ShowFont(Fontname());
X}
END_OF_FILE
if test 5720 -ne `wc -c <'t7/fontbrowser.c'`; then
    echo shar: \"'t7/fontbrowser.c'\" unpacked with wrong size!
fi
# end of 't7/fontbrowser.c'
fi
if test -f 't7/fontbrowser.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t7/fontbrowser.h'\"
else
echo shar: Extracting \"'t7/fontbrowser.h'\" \(642 characters\)
sed "s/^X//" >'t7/fontbrowser.h' <<'END_OF_FILE'
X/*
X * a Dialog for browsing fonts
X */
X
X#ifndef fontbrowser_h
X#define fontbrowser_h
X
X#include <InterViews/dialog.h>
X
Xclass FontSample;
Xclass Deck;
Xclass StringEditor;
X
Xclass FontBrowser : public Dialog {
Xpublic:
X    FontBrowser(ButtonState*, const char* sample);
X    FontBrowser(const char*, ButtonState*, const char* sample);
X    virtual ~FontBrowser();
X
X    virtual boolean Accept();
X    const char* Fontname();
Xprotected:
X    void UpdateFontname();
X
X    char* fontname;
X    FontSample* sample;
X    ButtonState* family;
X    ButtonState* weight;
X    ButtonState* slant;
X    ButtonState* point;
Xprivate:
X    void Init(const char*);
X};
X
X#endif
END_OF_FILE
if test 642 -ne `wc -c <'t7/fontbrowser.h'`; then
    echo shar: \"'t7/fontbrowser.h'\" unpacked with wrong size!
fi
# end of 't7/fontbrowser.h'
fi
if test -f 't7/fontsample.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t7/fontsample.c'\"
else
echo shar: Extracting \"'t7/fontsample.c'\" \(1674 characters\)
sed "s/^X//" >'t7/fontsample.c' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#include "fontsample.h"
X
X#include <InterViews/font.h>
X#include <InterViews/painter.h>
X#include <InterViews/pattern.h>
X#include <InterViews/shape.h>
X#include <string.h>
X
Xstatic const int BufferSize = 1000;
X
XFontSample::FontSample(const char* sample) : () {
X    Init(sample);
X}
X
XFontSample::FontSample(const char* name, const char* sample) : () {
X    SetInstance(name);
X    Init(sample);
X}
X
XFontSample::~FontSample () {
X    delete sample;
X    delete fontname;
X    delete font;
X}
X
Xvoid FontSample::Init (const char* samp) {
X    SetClassName("FontSample");
X    font = nil;
X    fontname = new char [BufferSize];
X    sample = new char [BufferSize];
X    strcpy(sample, samp);
X}
X
Xvoid FontSample::Reconfig () {
X    Painter* tmp = new Painter(output);
X    Unref(output);
X    output = tmp;
X    output->Reference();
X    output->SetFont(font);
X    Interactor::Reconfig();
X    shape->Rect(font->Width(sample), font->Height());
X    shape->Rigid(hfil, hfil, 0, 0);
X}
X
Xvoid FontSample::Redraw (Coord l, Coord b, Coord r, Coord t) {
X    output->ClearRect(canvas, l, b, r, t);
X    output->Text(canvas, sample, 0, 0);
X}
X
Xvoid FontSample::ShowFont (const char* name) {
X    if (strcmp(name, fontname) != 0) {
X        strcpy(fontname, name);
X        //Unref(font);
X        font = new Font(fontname);
X        font->Reference();
X        if (output != nil) {
X            if (font->Valid()) {
X                output->FillBg(true);
X                output->SetPattern(solid);
X                Reconfig();
X            } else {
X                output->FillBg(false);
X                output->SetPattern(gray);
X            }
X            Draw();
X        }
X    }
X}
END_OF_FILE
if test 1674 -ne `wc -c <'t7/fontsample.c'`; then
    echo shar: \"'t7/fontsample.c'\" unpacked with wrong size!
fi
# end of 't7/fontsample.c'
fi
if test -f 't7/fontsample.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t7/fontsample.h'\"
else
echo shar: Extracting \"'t7/fontsample.h'\" \(542 characters\)
sed "s/^X//" >'t7/fontsample.h' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#ifndef fontsample_h
X#define fontsample_h
X
X#include <InterViews/interactor.h>
X
Xclass Font;
X
Xclass FontSample : public Interactor {
Xpublic:
X    FontSample(const char* sample);
X    FontSample(const char* name, const char* sample);
X    virtual ~FontSample();
X
X    void ShowFont(const char* name);
Xprotected:
X    virtual void Reconfig();
X    virtual void Redraw(Coord, Coord, Coord, Coord);
Xprivate:
X    void Init(const char*);
Xprivate:
X    Font* font;
X    char* fontname;
X    char* sample;
X};
X
X#endif
END_OF_FILE
if test 542 -ne `wc -c <'t7/fontsample.h'`; then
    echo shar: \"'t7/fontsample.h'\" unpacked with wrong size!
fi
# end of 't7/fontsample.h'
fi
if test -f 't7/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t7/main.c'\"
else
echo shar: Extracting \"'t7/main.c'\" \(1146 characters\)
sed "s/^X//" >'t7/main.c' <<'END_OF_FILE'
X#include <InterViews/button.h>
X#include <InterViews/world.h>
X#include <stdio.h>
X
X#include "fontbrowser.h"
X
Xstatic PropertyData properties[] = {
X    { "tutorial*sample", "The quick brown fox..." },
X    { "tutorial*choice*font",
X        "*-*-times-medium-r-normal-*-*-120-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*label*font",
X        "*-*-times-bold-r-normal-*-*-120-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*PushButton*font",
X        "*-*-times-medium-i-normal-*-*-140-*-*-*-*-iso8859-1"
X    },
X    { nil }
X};
X
Xstatic OptionDesc options[] = {
X    { "-sample", "tutorial*sample", OptionValueNext },
X    { nil }
X};
X
Xint main (int argc, char* argv[]) {
X    World* world = new World("tutorial", properties, options, argc, argv);
X    ButtonState* quit = new ButtonState(false);
X    FontBrowser* browser = new FontBrowser(
X        quit, world->GetAttribute("sample")
X    );
X
X    browser->SetName("InterViews font browser");
X    browser->SetIconName("ifb");
X
X    world->InsertApplication(browser);
X    browser->Accept();
X    world->Remove(browser);
X
X    puts(browser->Fontname());
X
X    delete browser;
X    delete quit;
X    delete world;
X    return 0;
X}
END_OF_FILE
if test 1146 -ne `wc -c <'t7/main.c'`; then
    echo shar: \"'t7/main.c'\" unpacked with wrong size!
fi
# end of 't7/main.c'
fi
if test -f 't8/Imakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t8/Imakefile'\"
else
echo shar: Extracting \"'t8/Imakefile'\" \(371 characters\)
sed "s/^X//" >'t8/Imakefile' <<'END_OF_FILE'
X#
X# InterViews tutorial part 8
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)//**/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontbrowser.o \
X    fontsample.o \
X    cyclebutton.o \
X    main.o
X
XComplexProgramTarget(t8)
X
XMakeObjectFromSrc(fontbrowser)
XMakeObjectFromSrc(fontsample)
XMakeObjectFromSrc(cyclebutton)
XMakeObjectFromSrc(main)
END_OF_FILE
if test 371 -ne `wc -c <'t8/Imakefile'`; then
    echo shar: \"'t8/Imakefile'\" unpacked with wrong size!
fi
# end of 't8/Imakefile'
fi
if test -f 't8/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t8/Makefile'\"
else
echo shar: Extracting \"'t8/Makefile'\" \(6980 characters\)
sed "s/^X//" >'t8/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.45.1 89/08/28 17:30:07 interran Exp $
X
X#
X# "IVImake.tmpl" - generic imake template customized for InterViews
X#
X# Change platform-specific parameters in the appropriate .cf files.
X# Define local site-specific parameters in IVlocal.def.  You may
X# need a full rebuild after changing some parameters.
X#
X
X# architecture:  MIPSEL
X
X# platform:  $XConsortium: ultrix.cf,v 1.16 89/10/11 18:54:54 jim Exp $
X# operating system:             Ultrix-32 3.0
X
X#
X# generic make variables
X#
X
X            SHELL = /bin/sh
X
X              TOP = .
X      CURRENT_DIR = .
X              SRC = .
X              GEN = Generated
X                M = MIPSEL
X                X = X11
X
X             AOUT = a.out
X     AFTERINSTALL = $(RM)
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X  BOOTSTRAPCPUCMD = cpu
X               CC = CC
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E $(STD_CPP_DEFINES)
X           DEPEND = makedepend
X     DEPENDCFLAGS = $(ALLDEFINES) -I/usr/include/CC
X         GENCLASS = mkclass
X            IMAKE = imake
X        IMAKETMPL = "IVImake.tmpl"
X        IMAKEOPTS = -T $(IMAKETMPL) -I$(CONFIGDIR) -I$(XCONFIGDIR) -DUseInstalled
X          INSTALL = install
X               LD = CC
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make X=$X $(MFLAGS)
X        MKDIRHIER = mkdirhier
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X             TAGS = ctags
X            TROFF = psroff
X     STD_INCLUDES =
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X
X     INSTPGMFLAGS = -s
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X         INCLUDES = -I$(SRC) -I$(GEN) -I$(INCDIR)/Std -I$(INCROOT)
X
X      CDEBUGFLAGS =
X       ALLDEFINES = $(STD_INCLUDES) $(INCLUDES) $(STD_DEFINES) $(DEFINES)
X           CFLAGS = $(CDEBUGFLAGS) $(ALLDEFINES) $(EXTRA_CFLAGS)
X        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)
X          LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS) $(EXTRA_IMAKEOPTS)
X           RM_CMD = $(RM) .emacs_* *.CKP *.ln *.BAK *.bak *.a *.o *..c ,* *~ \
X			a.out core errs tags TAGS make.log make.out
X
X#
X# project-specific make variables
X#
X
X          DESTDIR =
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(DESTDIR)/usr/bin/X11
X      LOCALBINDIR = $(DESTDIR)/usr/local/bin/
X          INCROOT = $(DESTDIR)/usr/include
X           INCDIR = $(INCROOT)/InterViews
X     TEMPLATESDIR = $(INCDIR)/Templates
X        CONFIGDIR = $(XCONFIGDIR)/InterViews
X       XCONFIGDIR = $(DESTDIR)/usr/lib/X11/config
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)n
X
X        TEMPLATES = $(TEMPLATESDIR)
X    LIBINTERVIEWS = $(USRLIBDIR)/libInterViews$X.a
X       LIBGRAPHIC = $(USRLIBDIR)/libgraphic.a
X          LIBTEXT = $(USRLIBDIR)/libtext.a
X
X#
X# InterViews tutorial part 8
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontbrowser.o \
X    fontsample.o \
X    cyclebutton.o \
X    main.o
X
XPROGRAM		= t8
X
Xall:: $(AOUT)
X
X$(AOUT): $(OBJS) $(LOCAL_LIBRARIES)
X	@echo "linking $@"
X	-@if [ ! -w $@ ]; then $(RM) $@; else exit 0; fi
X	$(CC) -o $@ $(OBJS) $(LOCAL_LIBRARIES) $(LDFLAGS) $(EXTRA_LOAD_FLAGS)
X
Xinstall:: $(AOUT)
X	$(INSTALL) -c $(INSTPGMFLAGS) $(INSTALLFLAGS) $(AOUT) $(BINDIR)/$(PROGRAM)
X	$(AFTERINSTALL) $(AOUT)
X
Xdepend:: $(SRCS)
X	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPENDCFLAGS) -- $(SRCS)
X
Xclean::
X	$(RM) $(AOUT)
X
Xfontbrowser.o: $(SRC)/fontbrowser.c
X	@echo "compiling $(SRC)/fontbrowser.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/fontbrowser.c
X
Xfontsample.o: $(SRC)/fontsample.c
X	@echo "compiling $(SRC)/fontsample.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/fontsample.c
X
Xcyclebutton.o: $(SRC)/cyclebutton.c
X	@echo "compiling $(SRC)/cyclebutton.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/cyclebutton.c
X
Xmain.o: $(SRC)/main.c
X	@echo "compiling $(SRC)/main.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/main.c
X
X#
X# common rules for all Makefiles
X#
X
Xclean::
X	$(RM_CMD) \#*
X
XMakefile::
X	-@if [ -f Makefile ]; then \
X		$(RM) Makefile.bak; \
X		$(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)
X
Xinstall::
XMakefiles::
X
X#
X# dependencies generated by makedepend
X#
X
X# DO NOT DELETE
X
Xcyclebutton.o: cyclebutton.h /usr/include/InterViews/button.h
Xcyclebutton.o: /usr/include/InterViews/interactor.h
Xcyclebutton.o: /usr/include/InterViews/defs.h
Xcyclebutton.o: /usr/include/InterViews/subject.h
Xcyclebutton.o: /usr/include/InterViews/resource.h
Xcyclebutton.o: /usr/include/InterViews/bitmap.h
Xcyclebutton.o: /usr/include/InterViews/font.h
Xcyclebutton.o: /usr/include/InterViews/painter.h
Xcyclebutton.o: /usr/include/InterViews/shape.h
Xfontbrowser.o: fontbrowser.h /usr/include/InterViews/dialog.h
Xfontbrowser.o: /usr/include/InterViews/scene.h
Xfontbrowser.o: /usr/include/InterViews/interactor.h
Xfontbrowser.o: /usr/include/InterViews/defs.h cyclebutton.h
Xfontbrowser.o: /usr/include/InterViews/button.h
Xfontbrowser.o: /usr/include/InterViews/subject.h
Xfontbrowser.o: /usr/include/InterViews/resource.h fontsample.h
Xfontbrowser.o: /usr/include/InterViews/texteditor.h
Xfontbrowser.o: /usr/include/InterViews/box.h /usr/include/InterViews/event.h
Xfontbrowser.o: /usr/include/InterViews/frame.h /usr/include/InterViews/glue.h
Xfontbrowser.o: /usr/include/InterViews/shape.h
Xfontbrowser.o: /usr/include/InterViews/message.h
Xfontbrowser.o: /usr/include/InterViews/tray.h
Xfontbrowser.o: /usr/include/InterViews/Std/stdio.h //usr/include/stdio.h
Xfontbrowser.o: /usr/include/InterViews/Std/string.h
Xfontsample.o: fontsample.h /usr/include/InterViews/texteditor.h
Xfontsample.o: /usr/include/InterViews/interactor.h
Xfontsample.o: /usr/include/InterViews/defs.h /usr/include/InterViews/font.h
Xfontsample.o: /usr/include/InterViews/resource.h
Xfontsample.o: /usr/include/InterViews/painter.h
Xfontsample.o: /usr/include/InterViews/pattern.h
Xfontsample.o: /usr/include/InterViews/sensor.h
Xfontsample.o: /usr/include/InterViews/event.h /usr/include/InterViews/shape.h
Xfontsample.o: /usr/include/InterViews/textbuffer.h
Xfontsample.o: /usr/include/InterViews/Std/ctype.h //usr/include/ctype.h
Xfontsample.o: /usr/include/InterViews/Std/string.h
Xmain.o: /usr/include/InterViews/button.h /usr/include/InterViews/interactor.h
Xmain.o: /usr/include/InterViews/defs.h /usr/include/InterViews/subject.h
Xmain.o: /usr/include/InterViews/resource.h /usr/include/InterViews/world.h
Xmain.o: /usr/include/InterViews/scene.h /usr/include/InterViews/Std/stdio.h
Xmain.o: //usr/include/stdio.h fontbrowser.h /usr/include/InterViews/dialog.h
END_OF_FILE
if test 6980 -ne `wc -c <'t8/Makefile'`; then
    echo shar: \"'t8/Makefile'\" unpacked with wrong size!
fi
# end of 't8/Makefile'
fi
if test -f 't8/cyclebutton.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t8/cyclebutton.c'\"
else
echo shar: Extracting \"'t8/cyclebutton.c'\" \(2902 characters\)
sed "s/^X//" >'t8/cyclebutton.c' <<'END_OF_FILE'
X/*
X * a Button which cycles through multiple choices
X */
X
X#include "cyclebutton.h"
X
X#include <InterViews/bitmap.h>
X#include <InterViews/font.h>
X#include <InterViews/painter.h>
X#include <InterViews/shape.h>
X
Xstatic const int cycle_width = 11;
Xstatic const int cycle_height = 11;
Xstatic char cycle_mask[] = {
X   0x78, 0x00, 0xfc, 0x05, 0xfe, 0x07, 0xfe, 0x07, 0xff, 0x07, 0xff, 0x07,
X   0xff, 0x07, 0xff, 0x03, 0xff, 0x03, 0xfd, 0x01, 0xf0, 0x00};
Xstatic char cycle_plain[] = {
X   0x78, 0x00, 0x84, 0x05, 0x00, 0x07, 0x80, 0x04, 0x01, 0x05, 0x03, 0x06,
X   0x05, 0x04, 0x09, 0x00, 0x07, 0x00, 0x0d, 0x01, 0xf0, 0x00};
Xstatic char cycle_hit[] = {
X   0x78, 0x00, 0x84, 0x05, 0x00, 0x07, 0x80, 0x07, 0x01, 0x07, 0x03, 0x06,
X   0x07, 0x04, 0x0f, 0x00, 0x07, 0x00, 0x0d, 0x01, 0xf0, 0x00};
X
Xstatic Bitmap* CycleMask;
Xstatic Bitmap* CyclePlain;
Xstatic Bitmap* CycleHit;
X
Xstatic const int Separator = 3;
X
XCycleButton::CycleButton (
X    ButtonState* subject, CycleButtonChoice* choices
X)  : (subject, nil) {
X    Init(choices);
X}
X
XCycleButton::CycleButton (
X    const char* name, ButtonState* subject, CycleButtonChoice* choices
X) : (subject, nil) {
X    SetInstance(name);
X    Init(choices);
X}
X
XCycleButton::~CycleButton () { }
X
Xvoid CycleButton::Init (CycleButtonChoice* c) {
X    SetClassName("CycleButton");
X    if (CycleMask == nil) {
X        CycleMask = new Bitmap(cycle_mask, cycle_width, cycle_height);
X        CyclePlain = new Bitmap(cycle_plain, cycle_width, cycle_height);
X        CycleHit = new Bitmap(cycle_hit, cycle_width, cycle_height);
X    }
X    choices = c;
X    for (count = 0; choices[count].label != nil; ++count) { }
X    current = 0;
X}
X
Xvoid CycleButton::Reconfig () {
X    Font* font = output->GetFont();
X    int width = 0;
X    for (int i = 0; i < count; ++i) {
X        width = max(width, font->Width(choices[i].label));
X    }
X    Button::Reconfig();
X    shape->Rect(width + cycle_width + Separator, font->Height());
X    shape->Rigid();
X}
X
Xvoid CycleButton::Redraw (Coord l, Coord b, Coord r, Coord t) {
X    Coord textx = cycle_width + Separator;
X    Coord texty = (ymax + 1 - output->GetFont()->Height()) / 2;
X    output->ClearRect(canvas, l, b, r, t);
X    output->Text(canvas, choices[current].label, textx, texty);
X    Refresh();
X}
X
Xvoid CycleButton::Refresh () {
X    Coord bitsx = 0;
X    Coord bitsy = (ymax + 1 - cycle_height)/2;
X    if (!hit) {
X        output->Stencil(canvas, bitsx, bitsy, CyclePlain, CycleMask);
X    } else {
X        output->Stencil(canvas, bitsx, bitsy, CycleHit, CycleMask);
X    }
X}
X
Xvoid CycleButton::Press () {
X    subject->SetValue(choices[(current + 1) % count].value);
X}
X
Xvoid CycleButton::Update () {
X    void* v;
X    subject->GetValue(v);
X    if (v != choices[current].value) {
X        for (int i = 0; i < count; ++i) {
X            if (v == choices[i].value) {
X                current = i;
X                break;
X            }
X        }
X        Draw();
X    }
X}
END_OF_FILE
if test 2902 -ne `wc -c <'t8/cyclebutton.c'`; then
    echo shar: \"'t8/cyclebutton.c'\" unpacked with wrong size!
fi
# end of 't8/cyclebutton.c'
fi
if test -f 't8/cyclebutton.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t8/cyclebutton.h'\"
else
echo shar: Extracting \"'t8/cyclebutton.h'\" \(715 characters\)
sed "s/^X//" >'t8/cyclebutton.h' <<'END_OF_FILE'
X/*
X * a Button which cycles through multiple choices
X */
X
X#ifndef cyclebutton_h
X#define cyclebutton_h
X
X#include <InterViews/button.h>
X
Xclass CycleButtonChoice {
Xpublic:
X    const char* label;
X    void* value;
X};
X
Xclass CycleButton : public Button {
Xpublic:
X    CycleButton(ButtonState*, CycleButtonChoice* choices);
X    CycleButton(const char* name, ButtonState*, CycleButtonChoice* choices);
X    virtual ~CycleButton();
Xprotected:
X    virtual void Reconfig();
X    virtual void Redraw(Coord, Coord, Coord, Coord);
X    virtual void Refresh();
X    virtual void Press();
X    virtual void Update();
Xprivate:
X    void Init(CycleButtonChoice*);
X
X    CycleButtonChoice* choices;
X    int count;
X    int current;
X};
X
X#endif
END_OF_FILE
if test 715 -ne `wc -c <'t8/cyclebutton.h'`; then
    echo shar: \"'t8/cyclebutton.h'\" unpacked with wrong size!
fi
# end of 't8/cyclebutton.h'
fi
if test -f 't8/fontbrowser.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t8/fontbrowser.c'\"
else
echo shar: Extracting \"'t8/fontbrowser.c'\" \(5766 characters\)
sed "s/^X//" >'t8/fontbrowser.c' <<'END_OF_FILE'
X/*
X * a Dialog for browsing fonts
X */
X
X#include "fontbrowser.h"
X
X#include "cyclebutton.h"
X#include "fontsample.h"
X
X#include <InterViews/box.h>
X#include <InterViews/button.h>
X#include <InterViews/event.h>
X#include <InterViews/frame.h>
X#include <InterViews/glue.h>
X#include <InterViews/message.h>
X#include <InterViews/tray.h>
X#include <stdio.h>
X#include <string.h>
X
Xclass ButtonChoice {
Xpublic:
X    const char* label;
X    void* value;
X};
X
Xstatic ButtonChoice ModeChoices[] = {
X    { "family", "family" },
X    { "name", "name" },
X    { nil }
X};
X
Xstatic ButtonChoice FamilyChoices[] = {
X    { "helvetica", "helvetica" },
X    { "times", "times" },
X    { nil }
X};
X
Xstatic ButtonChoice WeightChoices[] = {
X    { "medium", "medium" },
X    { "bold", "bold" },
X    { nil }
X};
X
Xstatic ButtonChoice SlantChoices[] = {
X    { "roman", "r" },
X    { "oblique", "o" },
X    { "italic", "i" },
X    { nil }
X};
X
Xstatic CycleButtonChoice PointChoices[] = {
X    { "24 point", "24" },
X    { "18 point", "18" },
X    { "14 point", "14" },
X    { "12 point", "12" },
X    { "10 point", "10" },
X    { "8 point", "8" },
X    { nil }
X};
X
Xstatic Interactor* ButtonBox (
X    const char* name, ButtonState* state, ButtonChoice* choices
X) {
X    HBox* box = new HBox();
X    box->Align(Center);
X    for (int i = 0; choices[i].label != nil; ++i) {
X        box->Insert(
X            new RadioButton(name, choices[i].label, state, choices[i].value)
X        );
X        box->Insert(new HGlue(round(0.05*inch), round(0.05*inch), 0));
X    }
X    return box;
X}
X
XFontBrowser::FontBrowser (ButtonState* s, const char* samp) : (s, nil) {
X    Init(samp);
X}
X
XFontBrowser::FontBrowser (
X    const char* name, ButtonState* s, const char* samp
X) : (s, nil) {
X    SetInstance(name);
X    Init(samp);
X}
X
XFontBrowser::~FontBrowser () {
X    delete family;
X    delete weight;
X    delete slant;
X    delete point;
X    delete fontname;
X}
X
Xvoid FontBrowser::Init (const char* samp) {
X    SetClassName("FontBrowser");
X
X    family = new ButtonState(FamilyChoices[0].value);
X    weight = new ButtonState(WeightChoices[0].value);
X    slant = new ButtonState(SlantChoices[0].value);
X    point = new ButtonState(PointChoices[0].value);
X
X    sample = new FontSample(samp);
X    Tray* familymode = new Tray();
X    Interactor* familylabel = new Message("label", "Family");
X    Interactor* familychoices = ButtonBox("choice", family, FamilyChoices);
X    Interactor* weightlabel = new Message("label", "Weight");
X    Interactor* weightchoices = ButtonBox("choice", weight, WeightChoices);
X    Interactor* slantlabel = new Message("label", "Slant");
X    Interactor* slantchoices = ButtonBox("choice", slant, SlantChoices);
X    Interactor* pointlabel = new Message("label", "Size");
X    Interactor* pointchoices = new CycleButton("choice", point, PointChoices);
X    familymode->VBox(
X        familymode,
X        familychoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        weightchoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        slantchoices
X    );
X    familymode->VBox(
X        slantchoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        pointchoices,
X        familymode
X    );
X    familymode->HBox(
X        familymode,
X        familylabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        familychoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, familylabel, familychoices);
X    familymode->HBox(
X        familymode,
X        weightlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        weightchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, weightlabel, weightchoices);
X    familymode->HBox(
X        familymode,
X        slantlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        slantchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, slantlabel, slantchoices);
X    familymode->HBox(
X        familymode,
X        pointlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        pointchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, pointlabel, pointchoices);
X    familymode->Align(Left,
X        familylabel, weightlabel, slantlabel, pointlabel
X    );
X    familymode->Align(Left,
X        familychoices, weightchoices, slantchoices, pointchoices
X    );
X
X    Insert(
X        new MarginFrame(
X            new VBox(
X                new ShadowFrame(new MarginFrame(sample, 2, 2), 2, 2),
X                new VGlue(round(0.3*inch), round(0.2*inch), 0),
X                new HBox(
X                    familymode,
X                    new HGlue(round(0.3*inch), round(0.2*inch), hfil),
X                    new PushButton("Quit", state, true)
X                )
X            ),
X            round(0.5*inch), round(0.4*inch), round(2.0*inch),
X            round(0.3*inch), round(0.2*inch), round(1.0*inch)
X        )
X    );
X
X    fontname = new char[1000];
X    UpdateFontname();
X}
X
Xconst char* FontBrowser::Fontname () {
X    return fontname;
X}
X
Xboolean FontBrowser::Accept () {
X    Event e;
X    int v;
X
X    state->SetValue(0);
X    do {
X        Read(e);
X        e.target->Handle(e);
X        UpdateFontname();
X        state->GetValue(v);
X    } while (v == 0 && e.target != nil);
X    return v == 1 || e.target == nil;
X}
X
Xvoid FontBrowser::UpdateFontname () {
X    void* v;
X    family->GetValue(v);
X    const char* fam = (char*)v;
X    weight->GetValue(v);
X    const char* wgt = (char*)v;
X    slant->GetValue(v);
X    const char* sl = (char*)v;
X    point->GetValue(v);
X    const char* pnt = (char*)v;
X    sprintf(fontname,
X        "*-*-%s-%s-%s-normal-*-*-%s0-*-*-*-*-iso8859-1",
X        fam, wgt, sl, pnt
X    );
X    sample->ShowFont(Fontname());
X}
END_OF_FILE
if test 5766 -ne `wc -c <'t8/fontbrowser.c'`; then
    echo shar: \"'t8/fontbrowser.c'\" unpacked with wrong size!
fi
# end of 't8/fontbrowser.c'
fi
if test -f 't8/fontbrowser.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t8/fontbrowser.h'\"
else
echo shar: Extracting \"'t8/fontbrowser.h'\" \(642 characters\)
sed "s/^X//" >'t8/fontbrowser.h' <<'END_OF_FILE'
X/*
X * a Dialog for browsing fonts
X */
X
X#ifndef fontbrowser_h
X#define fontbrowser_h
X
X#include <InterViews/dialog.h>
X
Xclass FontSample;
Xclass Deck;
Xclass StringEditor;
X
Xclass FontBrowser : public Dialog {
Xpublic:
X    FontBrowser(ButtonState*, const char* sample);
X    FontBrowser(const char*, ButtonState*, const char* sample);
X    virtual ~FontBrowser();
X
X    virtual boolean Accept();
X    const char* Fontname();
Xprotected:
X    void UpdateFontname();
X
X    char* fontname;
X    FontSample* sample;
X    ButtonState* family;
X    ButtonState* weight;
X    ButtonState* slant;
X    ButtonState* point;
Xprivate:
X    void Init(const char*);
X};
X
X#endif
END_OF_FILE
if test 642 -ne `wc -c <'t8/fontbrowser.h'`; then
    echo shar: \"'t8/fontbrowser.h'\" unpacked with wrong size!
fi
# end of 't8/fontbrowser.h'
fi
if test -f 't8/fontsample.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t8/fontsample.c'\"
else
echo shar: Extracting \"'t8/fontsample.c'\" \(3507 characters\)
sed "s/^X//" >'t8/fontsample.c' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#include "fontsample.h"
X
X#include <InterViews/font.h>
X#include <InterViews/painter.h>
X#include <InterViews/pattern.h>
X#include <InterViews/sensor.h>
X#include <InterViews/shape.h>
X#include <InterViews/textbuffer.h>
X#include <ctype.h>
X#include <string.h>
X
Xstatic const int BufferSize = 1000;
Xstatic const int SampleLines = 2;
Xstatic const int TabWidth = 8;
X
XFontSample::FontSample(
X    const char* sample
X) : (SampleLines, strlen(sample), TabWidth, Reversed) {
X    Init(sample);
X}
X
XFontSample::FontSample(
X    const char* name, const char* sample
X) : (SampleLines, strlen(sample), TabWidth, Reversed) {
X    SetInstance(name);
X    Init(sample);
X}
X
XFontSample::~FontSample () {
X    delete text;
X    delete sample;
X    delete fontname;
X    delete font;
X}
X
Xvoid FontSample::Init (const char* samp) {
X    SetClassName("FontSample");
X    font = nil;
X    fontname = new char [BufferSize];
X    sample = new char [BufferSize];
X    text = new TextBuffer(sample, 0, BufferSize);
X    text->Insert(0, samp, strlen(samp));
X    Edit(text);
X    input = new Sensor();
X    input->Catch(KeyEvent);
X    input->Catch(DownEvent);
X}
X
Xvoid FontSample::Reconfig () {
X    Painter* tmp = new Painter(output);
X    Unref(output);
X    output = tmp;
X    output->Reference();
X    output->SetFont(font);
X    TextEditor::Reconfig();
X    shape->vshrink = shape->height - shape->vunits;
X}
X
Xvoid FontSample::ShowFont (const char* name) {
X    if (strcmp(name, fontname) != 0) {
X        strcpy(fontname, name);
X        //Unref(font);
X        font = new Font(fontname);
X        font->Reference();
X        if (output != nil) {
X            if (font->Valid()) {
X                output->FillBg(true);
X                output->SetPattern(solid);
X                Reconfig();
X                Resize();
X            } else {
X                output->FillBg(false);
X                output->SetPattern(gray);
X            }
X            Draw();
X        }
X    }
X}
X
Xvoid FontSample::Handle (Event& e) {
X    if (!font->Valid()) {
X        return;
X    }
X    switch (e.eventType) {
X    case KeyEvent:
X        if (e.len > 0) {
X            char c = e.keystring[0];
X            switch(c) {
X            case '\006':
X                ForwardCharacter(1);
X                break;
X            case '\002':
X                BackwardCharacter(1);
X                break;
X            case '\016':
X                ForwardLine(1);
X                break;
X            case '\020':
X                BackwardLine(1);
X                break;
X            case '\001':
X                BeginningOfLine();
X                break;
X            case '\005':
X                EndOfLine();
X                break;
X            case '\004':
X            case '\010':
X            case '\177':
X                if (Dot() != Mark()) {
X                    DeleteSelection();
X                } else {
X                    DeleteText(c=='\004' ? 1 : -1);
X                }
X                break;
X            default:
X                if (c == '\015' || !iscntrl(c)) {
X                    if (Dot() != Mark()) {
X                        DeleteSelection();
X                    }
X                    InsertText(c=='\015' ? "\n" : &c, 1);
X                }
X            }
X        }
X        ScrollToSelection();
X        break;
X    case DownEvent:
X        Select(Locate(e.x, e.y));
X        do {
X            ScrollToView(e.x, e.y);
X            SelectMore(Locate(e.x, e.y));
X            Poll(e);
X        } while (e.leftmouse || e.middlemouse || e.rightmouse);
X        break;
X    }
X}
END_OF_FILE
if test 3507 -ne `wc -c <'t8/fontsample.c'`; then
    echo shar: \"'t8/fontsample.c'\" unpacked with wrong size!
fi
# end of 't8/fontsample.c'
fi
if test -f 't8/fontsample.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t8/fontsample.h'\"
else
echo shar: Extracting \"'t8/fontsample.h'\" \(544 characters\)
sed "s/^X//" >'t8/fontsample.h' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#ifndef fontsample_h
X#define fontsample_h
X
X#include <InterViews/texteditor.h>
X
Xclass Font;
X
Xclass FontSample : public TextEditor {
Xpublic:
X    FontSample(const char* sample);
X    FontSample(const char* name, const char* sample);
X    virtual ~FontSample();
X
X    void ShowFont(const char* name);
Xprotected:
X    virtual void Reconfig();
X    virtual void Handle(Event&);
Xprivate:
X    void Init(const char*);
Xprivate:
X    Font* font;
X    char* fontname;
X    char* sample;
X    TextBuffer* text;
X};
X
X#endif
END_OF_FILE
if test 544 -ne `wc -c <'t8/fontsample.h'`; then
    echo shar: \"'t8/fontsample.h'\" unpacked with wrong size!
fi
# end of 't8/fontsample.h'
fi
if test -f 't8/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t8/main.c'\"
else
echo shar: Extracting \"'t8/main.c'\" \(1146 characters\)
sed "s/^X//" >'t8/main.c' <<'END_OF_FILE'
X#include <InterViews/button.h>
X#include <InterViews/world.h>
X#include <stdio.h>
X
X#include "fontbrowser.h"
X
Xstatic PropertyData properties[] = {
X    { "tutorial*sample", "The quick brown fox..." },
X    { "tutorial*choice*font",
X        "*-*-times-medium-r-normal-*-*-120-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*label*font",
X        "*-*-times-bold-r-normal-*-*-120-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*PushButton*font",
X        "*-*-times-medium-i-normal-*-*-140-*-*-*-*-iso8859-1"
X    },
X    { nil }
X};
X
Xstatic OptionDesc options[] = {
X    { "-sample", "tutorial*sample", OptionValueNext },
X    { nil }
X};
X
Xint main (int argc, char* argv[]) {
X    World* world = new World("tutorial", properties, options, argc, argv);
X    ButtonState* quit = new ButtonState(false);
X    FontBrowser* browser = new FontBrowser(
X        quit, world->GetAttribute("sample")
X    );
X
X    browser->SetName("InterViews font browser");
X    browser->SetIconName("ifb");
X
X    world->InsertApplication(browser);
X    browser->Accept();
X    world->Remove(browser);
X
X    puts(browser->Fontname());
X
X    delete browser;
X    delete quit;
X    delete world;
X    return 0;
X}
END_OF_FILE
if test 1146 -ne `wc -c <'t8/main.c'`; then
    echo shar: \"'t8/main.c'\" unpacked with wrong size!
fi
# end of 't8/main.c'
fi
if test -f 't9/Imakefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t9/Imakefile'\"
else
echo shar: Extracting \"'t9/Imakefile'\" \(424 characters\)
sed "s/^X//" >'t9/Imakefile' <<'END_OF_FILE'
X#
X# InterViews tutorial part 9
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)//**/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontbrowser.o \
X    fontsample.o \
X    cyclebutton.o \
X    stringbutton.o \
X    main.o
X
XComplexProgramTarget(t9)
X
XMakeObjectFromSrc(fontbrowser)
XMakeObjectFromSrc(fontsample)
XMakeObjectFromSrc(cyclebutton)
XMakeObjectFromSrc(stringbutton)
XMakeObjectFromSrc(main)
END_OF_FILE
if test 424 -ne `wc -c <'t9/Imakefile'`; then
    echo shar: \"'t9/Imakefile'\" unpacked with wrong size!
fi
# end of 't9/Imakefile'
fi
if test -f 't9/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t9/Makefile'\"
else
echo shar: Extracting \"'t9/Makefile'\" \(7933 characters\)
sed "s/^X//" >'t9/Makefile' <<'END_OF_FILE'
X# Makefile generated by imake - do not edit!
X# $XConsortium: imake.c,v 1.45.1 89/08/28 17:30:07 interran Exp $
X
X#
X# "IVImake.tmpl" - generic imake template customized for InterViews
X#
X# Change platform-specific parameters in the appropriate .cf files.
X# Define local site-specific parameters in IVlocal.def.  You may
X# need a full rebuild after changing some parameters.
X#
X
X# architecture:  MIPSEL
X
X# platform:  $XConsortium: ultrix.cf,v 1.16 89/10/11 18:54:54 jim Exp $
X# operating system:             Ultrix-32 3.0
X
X#
X# generic make variables
X#
X
X            SHELL = /bin/sh
X
X              TOP = .
X      CURRENT_DIR = .
X              SRC = .
X              GEN = Generated
X                M = MIPSEL
X                X = X11
X
X             AOUT = a.out
X     AFTERINSTALL = $(RM)
X               AR = ar cq
X  BOOTSTRAPCFLAGS =
X  BOOTSTRAPCPUCMD = cpu
X               CC = CC
X              CPP = /lib/cpp $(STD_CPP_DEFINES)
X    PREPROCESSCMD = cc -E $(STD_CPP_DEFINES)
X           DEPEND = makedepend
X     DEPENDCFLAGS = $(ALLDEFINES) -I/usr/include/CC
X         GENCLASS = mkclass
X            IMAKE = imake
X        IMAKETMPL = "IVImake.tmpl"
X        IMAKEOPTS = -T $(IMAKETMPL) -I$(CONFIGDIR) -I$(XCONFIGDIR) -DUseInstalled
X          INSTALL = install
X               LD = CC
X             LINT = lint
X      LINTLIBFLAG = -C
X         LINTOPTS = -axz
X               LN = ln -s
X             MAKE = make X=$X $(MFLAGS)
X        MKDIRHIER = mkdirhier
X               MV = mv
X               CP = cp
X           RANLIB = ranlib
X  RANLIBINSTFLAGS =
X               RM = rm -f
X             TAGS = ctags
X            TROFF = psroff
X     STD_INCLUDES =
X  STD_CPP_DEFINES =
X      STD_DEFINES =
X EXTRA_LOAD_FLAGS =
X  EXTRA_LIBRARIES =
X
X     INSTPGMFLAGS = -s
X     INSTBINFLAGS = -m 0755
X     INSTUIDFLAGS = -m 4755
X     INSTLIBFLAGS = -m 0664
X     INSTINCFLAGS = -m 0444
X     INSTMANFLAGS = -m 0444
X     INSTDATFLAGS = -m 0444
X    INSTKMEMFLAGS = -m 4755
X
X         INCLUDES = -I$(SRC) -I$(GEN) -I$(INCDIR)/Std -I$(INCROOT)
X
X      CDEBUGFLAGS =
X       ALLDEFINES = $(STD_INCLUDES) $(INCLUDES) $(STD_DEFINES) $(DEFINES)
X           CFLAGS = $(CDEBUGFLAGS) $(ALLDEFINES) $(EXTRA_CFLAGS)
X        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)
X          LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
X
X        IMAKE_CMD = $(IMAKE) $(IMAKEOPTS) $(EXTRA_IMAKEOPTS)
X           RM_CMD = $(RM) .emacs_* *.CKP *.ln *.BAK *.bak *.a *.o *..c ,* *~ \
X			a.out core errs tags TAGS make.log make.out
X
X#
X# project-specific make variables
X#
X
X          DESTDIR =
X        USRLIBDIR = $(DESTDIR)/usr/lib
X           BINDIR = $(DESTDIR)/usr/bin/X11
X      LOCALBINDIR = $(DESTDIR)/usr/local/bin/
X          INCROOT = $(DESTDIR)/usr/include
X           INCDIR = $(INCROOT)/InterViews
X     TEMPLATESDIR = $(INCDIR)/Templates
X        CONFIGDIR = $(XCONFIGDIR)/InterViews
X       XCONFIGDIR = $(DESTDIR)/usr/lib/X11/config
X          MANPATH = $(DESTDIR)/usr/man
X    MANSOURCEPATH = $(MANPATH)/man
X           MANDIR = $(MANSOURCEPATH)n
X        LIBMANDIR = $(MANSOURCEPATH)n
X
X        TEMPLATES = $(TEMPLATESDIR)
X    LIBINTERVIEWS = $(USRLIBDIR)/libInterViews$X.a
X       LIBGRAPHIC = $(USRLIBDIR)/libgraphic.a
X          LIBTEXT = $(USRLIBDIR)/libtext.a
X
X#
X# InterViews tutorial part 9
X#
X
XCDEBUGFLAGS     = -g
XSRC             = .
XSRCS		= $(SRC)/*.c
XSYS_LIBRARIES	= -lInterViews$X -l$X -lm
XOBJS            = \
X    fontbrowser.o \
X    fontsample.o \
X    cyclebutton.o \
X    stringbutton.o \
X    main.o
X
XPROGRAM		= t9
X
Xall:: $(AOUT)
X
X$(AOUT): $(OBJS) $(LOCAL_LIBRARIES)
X	@echo "linking $@"
X	-@if [ ! -w $@ ]; then $(RM) $@; else exit 0; fi
X	$(CC) -o $@ $(OBJS) $(LOCAL_LIBRARIES) $(LDFLAGS) $(EXTRA_LOAD_FLAGS)
X
Xinstall:: $(AOUT)
X	$(INSTALL) -c $(INSTPGMFLAGS) $(INSTALLFLAGS) $(AOUT) $(BINDIR)/$(PROGRAM)
X	$(AFTERINSTALL) $(AOUT)
X
Xdepend:: $(SRCS)
X	$(DEPEND) -s "# DO NOT DELETE" -- $(DEPENDCFLAGS) -- $(SRCS)
X
Xclean::
X	$(RM) $(AOUT)
X
Xfontbrowser.o: $(SRC)/fontbrowser.c
X	@echo "compiling $(SRC)/fontbrowser.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/fontbrowser.c
X
Xfontsample.o: $(SRC)/fontsample.c
X	@echo "compiling $(SRC)/fontsample.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/fontsample.c
X
Xcyclebutton.o: $(SRC)/cyclebutton.c
X	@echo "compiling $(SRC)/cyclebutton.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/cyclebutton.c
X
Xstringbutton.o: $(SRC)/stringbutton.c
X	@echo "compiling $(SRC)/stringbutton.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/stringbutton.c
X
Xmain.o: $(SRC)/main.c
X	@echo "compiling $(SRC)/main.c"
X	$(RM) $@
X	$(CC) -c  $(CFLAGS) $(SRC)/main.c
X
X#
X# common rules for all Makefiles
X#
X
Xclean::
X	$(RM_CMD) \#*
X
XMakefile::
X	-@if [ -f Makefile ]; then \
X		$(RM) Makefile.bak; \
X		$(MV) Makefile Makefile.bak; \
X	else exit 0; fi
X	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)
X
Xinstall::
XMakefiles::
X
X#
X# dependencies generated by makedepend
X#
X
X# DO NOT DELETE
X
Xcyclebutton.o: cyclebutton.h /usr/include/InterViews/button.h
Xcyclebutton.o: /usr/include/InterViews/interactor.h
Xcyclebutton.o: /usr/include/InterViews/defs.h
Xcyclebutton.o: /usr/include/InterViews/subject.h
Xcyclebutton.o: /usr/include/InterViews/resource.h
Xcyclebutton.o: /usr/include/InterViews/bitmap.h
Xcyclebutton.o: /usr/include/InterViews/font.h
Xcyclebutton.o: /usr/include/InterViews/painter.h
Xcyclebutton.o: /usr/include/InterViews/shape.h
Xfontbrowser.o: fontbrowser.h /usr/include/InterViews/dialog.h
Xfontbrowser.o: /usr/include/InterViews/scene.h
Xfontbrowser.o: /usr/include/InterViews/interactor.h
Xfontbrowser.o: /usr/include/InterViews/defs.h cyclebutton.h
Xfontbrowser.o: /usr/include/InterViews/button.h
Xfontbrowser.o: /usr/include/InterViews/subject.h
Xfontbrowser.o: /usr/include/InterViews/resource.h fontsample.h
Xfontbrowser.o: /usr/include/InterViews/texteditor.h stringbutton.h
Xfontbrowser.o: /usr/include/InterViews/box.h /usr/include/InterViews/deck.h
Xfontbrowser.o: /usr/include/InterViews/frame.h /usr/include/InterViews/glue.h
Xfontbrowser.o: /usr/include/InterViews/shape.h
Xfontbrowser.o: /usr/include/InterViews/message.h
Xfontbrowser.o: /usr/include/InterViews/sensor.h
Xfontbrowser.o: /usr/include/InterViews/event.h
Xfontbrowser.o: /usr/include/InterViews/streditor.h
Xfontbrowser.o: /usr/include/InterViews/tray.h
Xfontbrowser.o: /usr/include/InterViews/Std/stdio.h //usr/include/stdio.h
Xfontbrowser.o: /usr/include/InterViews/Std/string.h
Xfontsample.o: fontsample.h /usr/include/InterViews/texteditor.h
Xfontsample.o: /usr/include/InterViews/interactor.h
Xfontsample.o: /usr/include/InterViews/defs.h /usr/include/InterViews/font.h
Xfontsample.o: /usr/include/InterViews/resource.h
Xfontsample.o: /usr/include/InterViews/painter.h
Xfontsample.o: /usr/include/InterViews/pattern.h
Xfontsample.o: /usr/include/InterViews/sensor.h
Xfontsample.o: /usr/include/InterViews/event.h /usr/include/InterViews/shape.h
Xfontsample.o: /usr/include/InterViews/textbuffer.h
Xfontsample.o: /usr/include/InterViews/Std/ctype.h //usr/include/ctype.h
Xfontsample.o: /usr/include/InterViews/Std/string.h
Xmain.o: /usr/include/InterViews/button.h /usr/include/InterViews/interactor.h
Xmain.o: /usr/include/InterViews/defs.h /usr/include/InterViews/subject.h
Xmain.o: /usr/include/InterViews/resource.h /usr/include/InterViews/world.h
Xmain.o: /usr/include/InterViews/scene.h /usr/include/InterViews/Std/stdio.h
Xmain.o: //usr/include/stdio.h fontbrowser.h /usr/include/InterViews/dialog.h
Xstringbutton.o: stringbutton.h /usr/include/InterViews/button.h
Xstringbutton.o: /usr/include/InterViews/interactor.h
Xstringbutton.o: /usr/include/InterViews/defs.h
Xstringbutton.o: /usr/include/InterViews/subject.h
Xstringbutton.o: /usr/include/InterViews/resource.h
Xstringbutton.o: /usr/include/InterViews/event.h
Xstringbutton.o: /usr/include/InterViews/font.h
Xstringbutton.o: /usr/include/InterViews/painter.h
Xstringbutton.o: /usr/include/InterViews/shape.h
Xstringbutton.o: /usr/include/InterViews/textdisplay.h
Xstringbutton.o: /usr/include/InterViews/Std/ctype.h //usr/include/ctype.h
Xstringbutton.o: /usr/include/InterViews/Std/string.h
END_OF_FILE
if test 7933 -ne `wc -c <'t9/Makefile'`; then
    echo shar: \"'t9/Makefile'\" unpacked with wrong size!
fi
# end of 't9/Makefile'
fi
if test -f 't9/cyclebutton.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t9/cyclebutton.c'\"
else
echo shar: Extracting \"'t9/cyclebutton.c'\" \(2902 characters\)
sed "s/^X//" >'t9/cyclebutton.c' <<'END_OF_FILE'
X/*
X * a Button which cycles through multiple choices
X */
X
X#include "cyclebutton.h"
X
X#include <InterViews/bitmap.h>
X#include <InterViews/font.h>
X#include <InterViews/painter.h>
X#include <InterViews/shape.h>
X
Xstatic const int cycle_width = 11;
Xstatic const int cycle_height = 11;
Xstatic char cycle_mask[] = {
X   0x78, 0x00, 0xfc, 0x05, 0xfe, 0x07, 0xfe, 0x07, 0xff, 0x07, 0xff, 0x07,
X   0xff, 0x07, 0xff, 0x03, 0xff, 0x03, 0xfd, 0x01, 0xf0, 0x00};
Xstatic char cycle_plain[] = {
X   0x78, 0x00, 0x84, 0x05, 0x00, 0x07, 0x80, 0x04, 0x01, 0x05, 0x03, 0x06,
X   0x05, 0x04, 0x09, 0x00, 0x07, 0x00, 0x0d, 0x01, 0xf0, 0x00};
Xstatic char cycle_hit[] = {
X   0x78, 0x00, 0x84, 0x05, 0x00, 0x07, 0x80, 0x07, 0x01, 0x07, 0x03, 0x06,
X   0x07, 0x04, 0x0f, 0x00, 0x07, 0x00, 0x0d, 0x01, 0xf0, 0x00};
X
Xstatic Bitmap* CycleMask;
Xstatic Bitmap* CyclePlain;
Xstatic Bitmap* CycleHit;
X
Xstatic const int Separator = 3;
X
XCycleButton::CycleButton (
X    ButtonState* subject, CycleButtonChoice* choices
X)  : (subject, nil) {
X    Init(choices);
X}
X
XCycleButton::CycleButton (
X    const char* name, ButtonState* subject, CycleButtonChoice* choices
X) : (subject, nil) {
X    SetInstance(name);
X    Init(choices);
X}
X
XCycleButton::~CycleButton () { }
X
Xvoid CycleButton::Init (CycleButtonChoice* c) {
X    SetClassName("CycleButton");
X    if (CycleMask == nil) {
X        CycleMask = new Bitmap(cycle_mask, cycle_width, cycle_height);
X        CyclePlain = new Bitmap(cycle_plain, cycle_width, cycle_height);
X        CycleHit = new Bitmap(cycle_hit, cycle_width, cycle_height);
X    }
X    choices = c;
X    for (count = 0; choices[count].label != nil; ++count) { }
X    current = 0;
X}
X
Xvoid CycleButton::Reconfig () {
X    Font* font = output->GetFont();
X    int width = 0;
X    for (int i = 0; i < count; ++i) {
X        width = max(width, font->Width(choices[i].label));
X    }
X    Button::Reconfig();
X    shape->Rect(width + cycle_width + Separator, font->Height());
X    shape->Rigid();
X}
X
Xvoid CycleButton::Redraw (Coord l, Coord b, Coord r, Coord t) {
X    Coord textx = cycle_width + Separator;
X    Coord texty = (ymax + 1 - output->GetFont()->Height()) / 2;
X    output->ClearRect(canvas, l, b, r, t);
X    output->Text(canvas, choices[current].label, textx, texty);
X    Refresh();
X}
X
Xvoid CycleButton::Refresh () {
X    Coord bitsx = 0;
X    Coord bitsy = (ymax + 1 - cycle_height)/2;
X    if (!hit) {
X        output->Stencil(canvas, bitsx, bitsy, CyclePlain, CycleMask);
X    } else {
X        output->Stencil(canvas, bitsx, bitsy, CycleHit, CycleMask);
X    }
X}
X
Xvoid CycleButton::Press () {
X    subject->SetValue(choices[(current + 1) % count].value);
X}
X
Xvoid CycleButton::Update () {
X    void* v;
X    subject->GetValue(v);
X    if (v != choices[current].value) {
X        for (int i = 0; i < count; ++i) {
X            if (v == choices[i].value) {
X                current = i;
X                break;
X            }
X        }
X        Draw();
X    }
X}
END_OF_FILE
if test 2902 -ne `wc -c <'t9/cyclebutton.c'`; then
    echo shar: \"'t9/cyclebutton.c'\" unpacked with wrong size!
fi
# end of 't9/cyclebutton.c'
fi
if test -f 't9/cyclebutton.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t9/cyclebutton.h'\"
else
echo shar: Extracting \"'t9/cyclebutton.h'\" \(715 characters\)
sed "s/^X//" >'t9/cyclebutton.h' <<'END_OF_FILE'
X/*
X * a Button which cycles through multiple choices
X */
X
X#ifndef cyclebutton_h
X#define cyclebutton_h
X
X#include <InterViews/button.h>
X
Xclass CycleButtonChoice {
Xpublic:
X    const char* label;
X    void* value;
X};
X
Xclass CycleButton : public Button {
Xpublic:
X    CycleButton(ButtonState*, CycleButtonChoice* choices);
X    CycleButton(const char* name, ButtonState*, CycleButtonChoice* choices);
X    virtual ~CycleButton();
Xprotected:
X    virtual void Reconfig();
X    virtual void Redraw(Coord, Coord, Coord, Coord);
X    virtual void Refresh();
X    virtual void Press();
X    virtual void Update();
Xprivate:
X    void Init(CycleButtonChoice*);
X
X    CycleButtonChoice* choices;
X    int count;
X    int current;
X};
X
X#endif
END_OF_FILE
if test 715 -ne `wc -c <'t9/cyclebutton.h'`; then
    echo shar: \"'t9/cyclebutton.h'\" unpacked with wrong size!
fi
# end of 't9/cyclebutton.h'
fi
if test -f 't9/fontbrowser.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t9/fontbrowser.c'\"
else
echo shar: Extracting \"'t9/fontbrowser.c'\" \(8213 characters\)
sed "s/^X//" >'t9/fontbrowser.c' <<'END_OF_FILE'
X/*
X * a Dialog for browsing fonts
X */
X
X#include "fontbrowser.h"
X
X#include "cyclebutton.h"
X#include "fontsample.h"
X#include "stringbutton.h"
X
X#include <InterViews/box.h>
X#include <InterViews/button.h>
X#include <InterViews/deck.h>
X#include <InterViews/frame.h>
X#include <InterViews/glue.h>
X#include <InterViews/message.h>
X#include <InterViews/sensor.h>
X#include <InterViews/streditor.h>
X#include <InterViews/tray.h>
X#include <stdio.h>
X#include <string.h>
X
Xclass ButtonChoice {
Xpublic:
X    const char* label;
X    void* value;
X};
X
Xstatic ButtonChoice ModeChoices[] = {
X    { "family", "family" },
X    { "name", "name" },
X    { nil }
X};
X
Xstatic ButtonChoice FamilyChoices[] = {
X    { "helvetica", "helvetica" },
X    { "times", "times" },
X    { "", "a longish font family name" },
X    { nil }
X};
X
Xstatic ButtonChoice WeightChoices[] = {
X    { "medium", "medium" },
X    { "bold", "bold" },
X    { "", "a weight" },
X    { nil }
X};
X
Xstatic ButtonChoice WidthChoices[] = {
X    { "normal", "normal" },
X    { "", "a width name" },
X    { nil }
X};
X
Xstatic ButtonChoice SlantChoices[] = {
X    { "roman", "r" },
X    { "oblique", "o" },
X    { "italic", "i" },
X    { nil }
X};
X
Xstatic CycleButtonChoice PointChoices[] = {
X    { "24 point", "24" },
X    { "18 point", "18" },
X    { "14 point", "14" },
X    { "12 point", "12" },
X    { "10 point", "10" },
X    { "8 point", "8" },
X    { nil }
X};
X
Xstatic Interactor* ButtonBox (
X    const char* name, ButtonState* state, ButtonChoice* choices
X) {
X    HBox* box = new HBox();
X    box->Align(Center);
X    for (int i = 0; choices[i].label != nil; ++i) {
X        if (strlen(choices[i].label) == 0) {
X            box->Insert(
X                new StringButton(name, state, (char*)choices[i].value)
X            );
X        } else {
X            box->Insert(
X                new RadioButton(name, choices[i].label, state, choices[i].value)
X            );
X        }
X        box->Insert(new HGlue(round(0.05*inch), round(0.05*inch), 0));
X    }
X    return box;
X}
X
XFontBrowser::FontBrowser (ButtonState* s, const char* samp) : (s, nil) {
X    Init(samp);
X}
X
XFontBrowser::FontBrowser (
X    const char* name, ButtonState* s, const char* samp
X) : (s, nil) {
X    SetInstance(name);
X    Init(samp);
X}
X
XFontBrowser::~FontBrowser () {
X    delete mode;
X    delete family;
X    delete weight;
X    delete slant;
X    delete width;
X    delete point;
X}
X
Xvoid FontBrowser::Init (const char* samp) {
X    SetClassName("FontBrowser");
X
X    mode = new ButtonState(ModeChoices[0].value);
X    family = new ButtonState(FamilyChoices[0].value);
X    weight = new ButtonState(WeightChoices[0].value);
X    width = new ButtonState(WidthChoices[0].value);
X    slant = new ButtonState(SlantChoices[0].value);
X    point = new ButtonState(PointChoices[0].value);
X
X    sample = new FontSample(samp);
X    fontname = new StringEditor(
X        nil, "a very long font name with space for lots of characters"
X    );
X
X    Tray* familymode = new Tray();
X    Interactor* familylabel = new Message("label", "Family");
X    Interactor* familychoices = ButtonBox("choice", family, FamilyChoices);
X    Interactor* weightlabel = new Message("label", "Weight");
X    Interactor* weightchoices = ButtonBox("choice", weight, WeightChoices);
X    Interactor* widthlabel = new Message("label", "Width");
X    Interactor* widthchoices = ButtonBox("choice", width, WidthChoices);
X    Interactor* slantlabel = new Message("label", "Slant");
X    Interactor* slantchoices = ButtonBox("choice", slant, SlantChoices);
X    Interactor* pointlabel = new Message("label", "Size");
X    Interactor* pointchoices = new CycleButton("choice", point, PointChoices);
X    familymode->VBox(
X        familymode,
X        familychoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        weightchoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        widthchoices
X    );
X    familymode->VBox(
X        widthchoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        slantchoices,
X        new VGlue(round(0.05*inch), round(0.05*inch), 0),
X        pointchoices,
X        familymode
X    );
X    familymode->HBox(
X        familymode,
X        familylabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        familychoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, familylabel, familychoices);
X    familymode->HBox(
X        familymode,
X        weightlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        weightchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, weightlabel, weightchoices);
X    familymode->HBox(
X        familymode,
X        widthlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        widthchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, widthlabel, widthchoices);
X    familymode->HBox(
X        familymode,
X        slantlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        slantchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, slantlabel, slantchoices);
X    familymode->HBox(
X        familymode,
X        pointlabel,
X        new HGlue(round(0.2*inch), round(0.1*inch), 0),
X        pointchoices,
X        new HGlue(0, 0, hfil),
X        familymode
X    );
X    familymode->Align(VertCenter, pointlabel, pointchoices);
X    familymode->Align(Left,
X        familylabel, weightlabel, widthlabel, slantlabel, pointlabel
X    );
X    familymode->Align(Left,
X        familychoices, weightchoices, widthchoices, slantchoices, pointchoices
X    );
X    Interactor* namemode = new VBox(
X        new Frame(new MarginFrame(fontname, 2, 2)),
X        new VGlue(0, 0, vfil)
X    );
X
X    modeoptions = new Deck();
X    modeoptions->Insert(familymode);
X    modeoptions->Insert(namemode);
X
X    Insert(
X        new MarginFrame(
X            new VBox(
X                new ShadowFrame(new MarginFrame(sample, 2, 2), 2, 2),
X                new VGlue(round(0.3*inch), round(0.2*inch), 0),
X                new HBox(
X                    new VBox(
X                        new HBox(
X                            new Message("label", "Browse by"),
X                            new HGlue(round(0.1*inch), 0, 0),
X                            ButtonBox("choice", mode, ModeChoices)
X                        ),
X                        new VGlue(round(0.1*inch), round(0.05*inch), 0),
X                        new HBox(
X                            new HGlue(round(0.3*inch), round(0.2*inch), 0),
X                            modeoptions
X                        )
X                    ),
X                    new HGlue(round(0.3*inch), round(0.2*inch), hfil),
X                    new PushButton("Quit", state, true)
X                )
X            ),
X            round(0.5*inch), round(0.4*inch), round(2.0*inch),
X            round(0.3*inch), round(0.2*inch), round(1.0*inch)
X        )
X    );
X
X    UpdateFontname();
X    input = new Sensor();
X    input->Catch(KeyEvent);
X}
X
Xconst char* FontBrowser::Fontname () {
X    return fontname->Text();
X}
X
Xboolean FontBrowser::Accept () {
X    Event e;
X    int v;
X    void* m;
X
X    state->SetValue(0);
X    do {
X        Read(e);
X        e.target->Handle(e);
X        mode->GetValue(m);
X        if (strcmp((char*)m, "family") == 0) {
X            modeoptions->FlipTo(1);
X        } else if (strcmp((char*)m, "name") == 0) {
X            modeoptions->FlipTo(2);
X        }
X        UpdateFontname();
X        state->GetValue(v);
X    } while (v == 0 && e.target != nil);
X    return v == 1 || e.target == nil;
X}
X
Xvoid FontBrowser::UpdateFontname () {
X    void* m;
X    mode->GetValue(m);
X    if (strcmp((char*)m, "family") == 0) {
X        void* v;
X        family->GetValue(v);
X        const char* fam = (char*)v;
X        weight->GetValue(v);
X        const char* wgt = (char*)v;
X        slant->GetValue(v);
X        const char* sl = (char*)v;
X        width->GetValue(v);
X        const char* wid = (char*)v;
X        point->GetValue(v);
X        const char* pnt = (char*)v;
X        char name[1000];
X        sprintf(name,
X            "*-*-%s-%s-%s-%s-*-*-%s0-*-*-*-*-iso8859-1",
X            fam, wgt, sl, wid, pnt
X        );
X        fontname->Message(name);
X    }
X    sample->ShowFont(Fontname());
X}
END_OF_FILE
if test 8213 -ne `wc -c <'t9/fontbrowser.c'`; then
    echo shar: \"'t9/fontbrowser.c'\" unpacked with wrong size!
fi
# end of 't9/fontbrowser.c'
fi
if test -f 't9/fontbrowser.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t9/fontbrowser.h'\"
else
echo shar: Extracting \"'t9/fontbrowser.h'\" \(720 characters\)
sed "s/^X//" >'t9/fontbrowser.h' <<'END_OF_FILE'
X/*
X * a Dialog for browsing fonts
X */
X
X#ifndef fontbrowser_h
X#define fontbrowser_h
X
X#include <InterViews/dialog.h>
X
Xclass FontSample;
Xclass Deck;
Xclass StringEditor;
X
Xclass FontBrowser : public Dialog {
Xpublic:
X    FontBrowser(ButtonState*, const char* sample);
X    FontBrowser(const char*, ButtonState*, const char* sample);
X    virtual ~FontBrowser();
X
X    virtual boolean Accept();
X    const char* Fontname();
Xprotected:
X    void UpdateFontname();
X
X    FontSample* sample;
X    StringEditor* fontname;
X    Deck* modeoptions;
X    ButtonState* mode;
X    ButtonState* family;
X    ButtonState* weight;
X    ButtonState* width;
X    ButtonState* slant;
X    ButtonState* point;
Xprivate:
X    void Init(const char*);
X};
X
X#endif
END_OF_FILE
if test 720 -ne `wc -c <'t9/fontbrowser.h'`; then
    echo shar: \"'t9/fontbrowser.h'\" unpacked with wrong size!
fi
# end of 't9/fontbrowser.h'
fi
if test -f 't9/fontsample.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t9/fontsample.c'\"
else
echo shar: Extracting \"'t9/fontsample.c'\" \(3507 characters\)
sed "s/^X//" >'t9/fontsample.c' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#include "fontsample.h"
X
X#include <InterViews/font.h>
X#include <InterViews/painter.h>
X#include <InterViews/pattern.h>
X#include <InterViews/sensor.h>
X#include <InterViews/shape.h>
X#include <InterViews/textbuffer.h>
X#include <ctype.h>
X#include <string.h>
X
Xstatic const int BufferSize = 1000;
Xstatic const int SampleLines = 2;
Xstatic const int TabWidth = 8;
X
XFontSample::FontSample(
X    const char* sample
X) : (SampleLines, strlen(sample), TabWidth, Reversed) {
X    Init(sample);
X}
X
XFontSample::FontSample(
X    const char* name, const char* sample
X) : (SampleLines, strlen(sample), TabWidth, Reversed) {
X    SetInstance(name);
X    Init(sample);
X}
X
XFontSample::~FontSample () {
X    delete text;
X    delete sample;
X    delete fontname;
X    delete font;
X}
X
Xvoid FontSample::Init (const char* samp) {
X    SetClassName("FontSample");
X    font = nil;
X    fontname = new char [BufferSize];
X    sample = new char [BufferSize];
X    text = new TextBuffer(sample, 0, BufferSize);
X    text->Insert(0, samp, strlen(samp));
X    Edit(text);
X    input = new Sensor();
X    input->Catch(KeyEvent);
X    input->Catch(DownEvent);
X}
X
Xvoid FontSample::Reconfig () {
X    Painter* tmp = new Painter(output);
X    Unref(output);
X    output = tmp;
X    output->Reference();
X    output->SetFont(font);
X    TextEditor::Reconfig();
X    shape->vshrink = shape->height - shape->vunits;
X}
X
Xvoid FontSample::ShowFont (const char* name) {
X    if (strcmp(name, fontname) != 0) {
X        strcpy(fontname, name);
X        //Unref(font);
X        font = new Font(fontname);
X        font->Reference();
X        if (output != nil) {
X            if (font->Valid()) {
X                output->FillBg(true);
X                output->SetPattern(solid);
X                Reconfig();
X                Resize();
X            } else {
X                output->FillBg(false);
X                output->SetPattern(gray);
X            }
X            Draw();
X        }
X    }
X}
X
Xvoid FontSample::Handle (Event& e) {
X    if (!font->Valid()) {
X        return;
X    }
X    switch (e.eventType) {
X    case KeyEvent:
X        if (e.len > 0) {
X            char c = e.keystring[0];
X            switch(c) {
X            case '\006':
X                ForwardCharacter(1);
X                break;
X            case '\002':
X                BackwardCharacter(1);
X                break;
X            case '\016':
X                ForwardLine(1);
X                break;
X            case '\020':
X                BackwardLine(1);
X                break;
X            case '\001':
X                BeginningOfLine();
X                break;
X            case '\005':
X                EndOfLine();
X                break;
X            case '\004':
X            case '\010':
X            case '\177':
X                if (Dot() != Mark()) {
X                    DeleteSelection();
X                } else {
X                    DeleteText(c=='\004' ? 1 : -1);
X                }
X                break;
X            default:
X                if (c == '\015' || !iscntrl(c)) {
X                    if (Dot() != Mark()) {
X                        DeleteSelection();
X                    }
X                    InsertText(c=='\015' ? "\n" : &c, 1);
X                }
X            }
X        }
X        ScrollToSelection();
X        break;
X    case DownEvent:
X        Select(Locate(e.x, e.y));
X        do {
X            ScrollToView(e.x, e.y);
X            SelectMore(Locate(e.x, e.y));
X            Poll(e);
X        } while (e.leftmouse || e.middlemouse || e.rightmouse);
X        break;
X    }
X}
END_OF_FILE
if test 3507 -ne `wc -c <'t9/fontsample.c'`; then
    echo shar: \"'t9/fontsample.c'\" unpacked with wrong size!
fi
# end of 't9/fontsample.c'
fi
if test -f 't9/fontsample.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t9/fontsample.h'\"
else
echo shar: Extracting \"'t9/fontsample.h'\" \(544 characters\)
sed "s/^X//" >'t9/fontsample.h' <<'END_OF_FILE'
X/*
X * display a sample of a named Font
X */
X
X#ifndef fontsample_h
X#define fontsample_h
X
X#include <InterViews/texteditor.h>
X
Xclass Font;
X
Xclass FontSample : public TextEditor {
Xpublic:
X    FontSample(const char* sample);
X    FontSample(const char* name, const char* sample);
X    virtual ~FontSample();
X
X    void ShowFont(const char* name);
Xprotected:
X    virtual void Reconfig();
X    virtual void Handle(Event&);
Xprivate:
X    void Init(const char*);
Xprivate:
X    Font* font;
X    char* fontname;
X    char* sample;
X    TextBuffer* text;
X};
X
X#endif
END_OF_FILE
if test 544 -ne `wc -c <'t9/fontsample.h'`; then
    echo shar: \"'t9/fontsample.h'\" unpacked with wrong size!
fi
# end of 't9/fontsample.h'
fi
if test -f 't9/main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t9/main.c'\"
else
echo shar: Extracting \"'t9/main.c'\" \(1146 characters\)
sed "s/^X//" >'t9/main.c' <<'END_OF_FILE'
X#include <InterViews/button.h>
X#include <InterViews/world.h>
X#include <stdio.h>
X
X#include "fontbrowser.h"
X
Xstatic PropertyData properties[] = {
X    { "tutorial*sample", "The quick brown fox..." },
X    { "tutorial*choice*font",
X        "*-*-times-medium-r-normal-*-*-120-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*label*font",
X        "*-*-times-bold-r-normal-*-*-120-*-*-*-*-iso8859-1"
X    },
X    { "tutorial*PushButton*font",
X        "*-*-times-medium-i-normal-*-*-140-*-*-*-*-iso8859-1"
X    },
X    { nil }
X};
X
Xstatic OptionDesc options[] = {
X    { "-sample", "tutorial*sample", OptionValueNext },
X    { nil }
X};
X
Xint main (int argc, char* argv[]) {
X    World* world = new World("tutorial", properties, options, argc, argv);
X    ButtonState* quit = new ButtonState(false);
X    FontBrowser* browser = new FontBrowser(
X        quit, world->GetAttribute("sample")
X    );
X
X    browser->SetName("InterViews font browser");
X    browser->SetIconName("ifb");
X
X    world->InsertApplication(browser);
X    browser->Accept();
X    world->Remove(browser);
X
X    puts(browser->Fontname());
X
X    delete browser;
X    delete quit;
X    delete world;
X    return 0;
X}
END_OF_FILE
if test 1146 -ne `wc -c <'t9/main.c'`; then
    echo shar: \"'t9/main.c'\" unpacked with wrong size!
fi
# end of 't9/main.c'
fi
if test -f 't9/stringbutton.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t9/stringbutton.c'\"
else
echo shar: Extracting \"'t9/stringbutton.c'\" \(2833 characters\)
sed "s/^X//" >'t9/stringbutton.c' <<'END_OF_FILE'
X/*
X * a RadioButton with an editable value
X */
X
X#include "stringbutton.h"
X
X#include <InterViews/event.h>
X#include <InterViews/font.h>
X#include <InterViews/painter.h>
X#include <InterViews/shape.h>
X#include <InterViews/textdisplay.h>
X#include <ctype.h>
X#include <string.h>
X
XStringButton::StringButton (
X    ButtonState* s, const char* sample
X) : (sample, s, nil) {
X    Init();
X}
X
XStringButton::StringButton (
X    const char* name, ButtonState* s, const char* sample
X) : (sample, s, nil) {
X    SetInstance(name);
X    Init();
X}
X
XStringButton::~StringButton () {
X    delete text;
X    delete display;
X}
X
Xvoid StringButton::Init () {
X    text = new char[1000];
X    text[0] = '\0';
X    value = (void*)text;
X    display = new TextDisplay();        
X    display->ReplaceText(0, text, strlen(text));
X    display->CaretStyle(NoCaret);
X    offset = 0;
X}
X
Xvoid StringButton::Reconfig () {
X    RadioButton::Reconfig();
X    shape->width += 4;
X    shape->height += 4;
X}
X
Xvoid StringButton::Resize () {
X    int h = output->GetFont()->Height();
X    offset = h;
X    display->LineHeight(h);
X    display->Resize(offset+2, 2, xmax-2, ymax-2);
X}
X
Xvoid StringButton::Handle (Event& e) {
X    if (e.eventType == DownEvent && e.x > ymax) {
X        hit = true;
X        Refresh();
X        boolean done = false;
X        int p = strlen(text);
X        display->Draw(output, canvas);
X        display->CaretStyle(BarCaret);
X        do {
X            switch (e.eventType) {
X            case KeyEvent:
X                char c = e.keystring[0];
X                if (e.len > 0) {
X                    if (c == '\015') {
X                        done = true;
X                    } else if (c == '\177') {
X                        if (p > 0) {
X                            --p;
X                            text[p] = '\0';
X                            display->DeleteText(0, p, 1);
X                        }
X                    } else if (!iscntrl(c)) {
X                        text[p] = c;
X                        display->InsertText(0, p, &c, 1);
X                        ++p;
X                        text[p] = '\0';
X                    }
X                }
X                break;
X            case DownEvent:
X                if (e.target != this) {
X                    UnRead(e);
X                    done = true;
X                }
X                break;
X            }
X            display->Caret(0, p);
X            if (!done) {
X                Read(e);
X            }
X        } while (!done);
X        display->CaretStyle(NoCaret);
X        hit = false;
X        Refresh();
X        subject->SetValue(value);
X        subject->Notify();
X    } else {
X        RadioButton::Handle(e);
X    }
X}
X
Xvoid StringButton::Redraw (Coord l, Coord b, Coord r, Coord t) {
X    display->Draw(output, canvas);
X    display->Redraw(l, b, r, t);
X    output->Rect(canvas, offset, 0, xmax, ymax);
X    Refresh();
X}
END_OF_FILE
if test 2833 -ne `wc -c <'t9/stringbutton.c'`; then
    echo shar: \"'t9/stringbutton.c'\" unpacked with wrong size!
fi
# end of 't9/stringbutton.c'
fi
if test -f 't9/stringbutton.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'t9/stringbutton.h'\"
else
echo shar: Extracting \"'t9/stringbutton.h'\" \(597 characters\)
sed "s/^X//" >'t9/stringbutton.h' <<'END_OF_FILE'
X/*
X * a RadioButton with an editable value
X */
X
X#ifndef stringbutton_h
X#define stringbutton_h
X
X#include <InterViews/button.h>
X
Xclass TextDisplay;
X
Xclass StringButton : public RadioButton {
Xpublic:
X    StringButton(ButtonState*, const char* sample);
X    StringButton(const char* name, ButtonState*, const char* sample);
X    ~StringButton();
Xprotected:
X    virtual void Handle(Event&);
X    virtual void Redraw(Coord, Coord, Coord, Coord);
X    virtual void Resize();
X    virtual void Reconfig();
Xprivate:
X    void Init();
Xprivate:
X    char* text;
X    TextDisplay* display;
X    int offset;
X};
X
X#endif
END_OF_FILE
if test 597 -ne `wc -c <'t9/stringbutton.h'`; then
    echo shar: \"'t9/stringbutton.h'\" unpacked with wrong size!
fi
# end of 't9/stringbutton.h'
fi
echo shar: End of shell archive.
exit 0
