
			INSTALL for ivtools-0.7

Instructions for building ivtools-0.7.10 from source:

0. Compilation Environment

Tools you will need before you can build (note, if you are attempting
to build on Windows NT, look at README.cygwin as well):

0.a. a Unix machine.  We know it has been built on Linux, Solaris,
Irix, Dec Alpha, HPUX, and SunOS.  

0.b. The gcc compiler.  Recently we've been building and testing with
egcs-1.0.3 and gcc-2.8.1.  gcc-2.7.2 will still work, as probably
would gcc-2.6.3.  You will also need an equivalent copy of libstdc++.
The libstdc++ version numbers stay roughly in synch with the gcc
version numbers.  If you have if you have gcc-2.8.1 you'd want
libstdc++-2.8.1, etc..

0.c. An installed copy of X11R6 as distributed by the Open Group, or
an equivalent (XFree86 for Linux, or X11R5 from MIT).  If you use a
vendor's X11 product, the product should be based on X11R4 or later
and the product should include imake and the config files.

If you can't find imake on your system, you can get the sources for
imake from the X11R5 or X11R6 distribution at several public ftp
archives (such as ftp.x.org).

** warning -- imake used in combination with a non-GNU C preprocessor
** can be troublesome (i.e. the default one delivered with Solaris or
** DEC Alpha).  You'll want to rig your PATH environment variable to
** find the gcc variant of cpp.  Read more about it at
** http://www.vectaport.com/ivtools/faq.html#imakecppprob

0.d. You also might want to acquire and build clippoly, a LGPLed library for
polygon clipping from:

http://www.ph.tn.tudelft.nl/People/klamer/clippoly_entry.html

Add -fPIC to the CCFLAGS in the Makefile, then do a make, then build a
shared library in the clippoly directory with: "gcc -shared -o
libclippoly.so *.o" (you can leave out test.o if you want).

i0.e. You also might want to acquire and build ACE, a C++ middleware
toolkit available from:

http://www.cs.wustl.edu/%7Eschmidt/ACE.html

We currently use ACE-4.6.  You may have to add some of the #define's
listed in the ACE_wrappers/ace/README file to
ACE_wrappers/ace/config.h, to alleviate warnings of undefined
functions.  For example, on Linux RedHat 4.1 we had to add:

#define ACE_LACKS_READIR_R

You may also want to avoid building with thread support if you have
any problems with using ACE.  ivtools makes no use of ACE threads
capability.

gcc-2.8.1 and egcs-1.0.2 or greater are needed for ACE-4.5 or greater.
Ensure -fPIC is used when compiling.  If you are building with
gcc-2.7.2.* or earlier, you'll want to use ACE-4.2 instead of the
latest version of ACE.  You can still get a copy at
http://www.vectaport.com/pub/src/ACE-4.2.tar.gz.  You may want to
apply this patch: http://www.vectaport.com/pub/src/ace4.2warnpatch.

0.f if you want to build the ivxt example program, which demonstrates
the embedding of a ivtools drawing editor inside Motif widgets, you'll
need some version of lesstif or Motif (libXm).  To enable the ivxt
build change line 7 of src/Imakefile from "#if 0" to "#if 1".Without
these libraries and include files the build of ivxt will fail, which
can be safely ignored.

0.g Finally, you might have an interest in building the IueServ
library and iueserv program, a networked command interpreter wrapped
around the class libraries of the Image Understanding Environment.
See http://www.aai.com/AAI/IUE/IUE.html for details on acquiring and
building this sizeable collection of public-domain and free software
class libraries for image understanding application development.

1. Configuring ivtools:

1.a. You no longer need to set your CPU environment variable to build
ivtools, but you still need a CPU specific configuration file.
Ready-made configurations that have been known to work exist for
LINUX, SUN4 (and Solaris), SGI, HP800 (HPUX), ALPHA, and now CYGWIN
(for Windows NT).

Use "make CPU" from the top directory to see the symbol ivtools will
use for your OS (grep config/arch.def for ArchitectureName to get a
complete list of possible OS'es).  Then look for a matching
config/site.def.<CPU> file, where <CPU> is the value returned by "make
CPU".  If it is there proceed to step 1.b.

Other variants of Unix can be attempted by creating the corresponding
config/site.def.<CPU>, i.e. site.def.AIX or site.def.MIPS.

Use SUN4 for Solaris as well as SunOS.  Although SUN5 would be more
correct, the config files automatically determine the difference
between the two OS'es by checking for SVR4'ness.

1.b Run the configure script in the top-level directory, by entering
"./configure" followed by any of the following arguments (--with
arguments are recognized as --enable as well):

  --with-ace=<path>                Path to ACE source
  --with-ace-libs=<path>           Path to ACE libraries
  --with-clippoly=<path>           Path to clippoly source
  --with-clippoly-libs=<path>      Path to clippoly libraries
  --with-iue=<path>                Path to IUE source
  --with-iue-libs=<path>           Path to IUE libraries

  --x-includes=DIR        X include files are in DIR
  --x-libraries=DIR       X library files are in DIR

  --enable-install-relative[=ARG]  install relative to source tree
  --prefix=DIR			   to use when install-relative false
				   (default is /usr/local)

  --enable-use-rpath[=ARG]        use -rpath when linking

ARG can be 0 or 1, default is 1 when not specified.  The configure
script is usually able to automatically determine --x-includes and
--x-libraries (except on DEC Alpha). If the arguments for ACE,
clippoly, or IUE are not supplied, the configure script prints a
reminder, then proceeds to set up to build ivtools without these
libraries.

Here is an example of using the configure script with ACE and clippoly
libraries:

./configure --with-clippoly=/proj/clippoly --with-ace=/proj/ACE_wrappers

Running the configure script generates two files, a config/config.mk
that gets included into each Makefile when used, and a
config/config-<os>-gcc.defs that gets used by "make Makefiles"
described below.  <os> is something like linux.  The last line of
output from the configure script shows this pathname.  Verify that
this is the same as the file included at the end of the
config/site.def.<CPU> file.  Change the site.def.<CPU> file if
necessary.

Also you may want to review the rest of the entries in the
site.def.<CPU> file to see if they are good defaults for your system.
Some of these, like UseRpath and InstallRelative, are overridden in
the config/config-<os>-gcc.defs file, so their value in
config/site.def.<CPU> has no affect.

** See http://www.vectaport.com/ivtools/faq.html for more info.

2. Compiling ivtools:

2.a. cd to the ivtools-0.7/ directory (you'd already be in this
directory after running the configure script).

2.b. Compile it with a "make World" command.  This command:

	- regenerates the top-level Makefile to snap it to 
	  the current directory ("make Makefile").

	- runs through the source tree and generates all 
	  the other Makefile's ("make Makefiles").

	- generates compilation dependencies for each 
	  directory with code to compile -- see the
	  Makefile.depend file in each <CPU> sub-directory
	  ("make depend").

	- compiles and links everything ("make -k").
	
If you have any trouble at this stage take a look at:

  http://www.vectaport.com/ivtools/faq.html#SourceBuild

** The "make World" should no longer need any other command line
** options, since these are generated by the configure script and
** pulled in by the top-level Makefile.  If you have problems and you
** suspect this evolution, verify that the definition of XCONFIGDIR
** and ABSTOP in config/config.mk are accurate (ABSTOP should be set
** to the top-level directory of the ivtools source tree).

3. Testing:

Each directory under ivtools-0.7/src that begins in lower case (except
for "include" and "scripts") contains executables that exercise some
particular functionality.  "cd" to each particular directory, type
"<CPU>/a.out" and see what happens (the utils directory contains more
than one executable, things named other than a.out).  Quite a few
directories have README's that go into further detail on how to use
the programs.  ivtools-0.7/src/glyphs contains sub-directories of
glyph example programs.  ivtools-0.7/src/glyphs/examples3.1 contains
most of the simple example programs that were originally distributed
with InterViews 3.1.

There is also a src/tests directory, with one test program to date,
y2k/y2ktest.c.  This builds a small program that verifies the Date
object of the Time class library has no problem with Y2K or Y2.038K,
by allowing the user to enter "+" and "-" to increment/decrement the
year past these boundaries.

4. Installation:

"make install" is supported for all the libraries and a subset of the
more utilitarian example programs: the four original InterViews
programs (idraw, iclass, idemo, and dclock), the four idraw derived
programs (drawtool, netdraw, flipbook, and comdraw) and the two
comterp programs (comterp and glyphterp).  In addition the scripts in
src/scripts and utilities in src/utils get installed.  "make
uninstall" is supported as well.

When relative install is enabled (--enable-install-relative for the
configure script), the binaries are installed in
ivtools-0.7/bin/<CPU>, the libraries are installed in
ivtools-0.7/lib/<CPU>, and the run-time X resource and config files
are installed in ivtools-0.7/lib/ivtools.

When relative install is disabled (the default for the configure
script) the binaries are installed as stripped executables in `prefix`/bin
the libraries are installed in `prefix`/lib, and the run-time X resource and
config files are installed in `prefix`/lib/ivtools.

note: idemo, comterp, glyphterp, and comdraw have config files that
must be installed (either relative or non-relative) for the program to
find them at runtime.  drawtool relies on several scripts and
utilities for accessing graphics and image files that must be
installed as well for them to work.




