January 26th 1998 ivtools-0.7.3

Drawing Editor Changes

	* add support for CR and ESC to the attribute editing dialog box
 	of any drawing editor.  Now CR accepts the contents of the two
 	field editors (when the focus is in one of them) and ESC clears
 	the field editor with current focus.  Also the current contents of
 	the field editors is added to the attribute list whenever OK is
 	clicked.

	* glyphify (grayish 3d look) the "Precise Page" dialog box, which
 	invokes the command to reset the drawing editor page size.

	* fix the use of the "save by pathname" checkbox on the export
 	dialog box.

	* change both the export and print dialog boxes so that they don't
 	clobber a command line or pathname that has been entered when you
 	click on the "to command" checkbox or the output format
 	enums/checkboxes.  This is done by disabling the auto-update
 	feature (the thing that automatically places a
 	ghostview/idraw/drawtool command line when "to command" is
 	checked) whenever the contents of the field-editor has changed
 	from the default.

Utility Changes

	* add a -d argument to iclass to dump an html file of links to web
 	pages named the same, i.e. Interactor.html or OverlayComp.html.
  	Each class link is followed by a menu of derived classes.  See the
 	result when used on ivtools at
 	http://www.vectaport.com/ivtools/doc/classes/derivedclasses.html.

Library Changes

	-- Attribute --

	* add a ParamStruct copy constructor.

	* protect "int AttributeList::add_attr(Attribute*)", because it
 	requires the user to be aware of the return status and free memory
 	if required, and replace it with a public "void
 	AttributeList::add_attribute(Attribute*)".  NOTE: This is a
 	less-than 100% backward compatible change to the API of the
 	Attribute library.  You may have to switch your code over to the
 	new method, and in the process you might remove a memory leak.

	* add AttributeList::add_attr methods that take an "int symid".

	-- ComTerp -- 

	* changes ComTerp/assignfunc.c to use AttributeList::add_attribute
 	instead of the now protected ::add_attr(Attribute*);

	-- InterViews -- 

	* remove limitation of 1024 command line arguments for any
 	program.  Found while running iclass with more than 1024 header
 	files in the command line.

	-- Unidraw --

	* add a ::Width() and ::Height() method to PageGraphic.

	* change the copyright notices on all the Graphic-related files
 	that were changed back in 1994 to accomodate hide/show/sensitivity
 	and gs/pts/pic compaction.

	-- UniIdraw --

	* add support for floating point line widths to idraw, as
 	requested by Robert S. Maier, the GNU plotutils guy.  This is
 	indicated by Version 11 of the idraw format, but a floating point
 	line width can a) be successfully read if incorporated in an older
 	idraw format, and b) can be successfully ignored by older idraw
 	executables (because the istream method for reading an integer can
 	handle floats).  This was easy to do, because the object
 	underlying the idraw brush object PSBrush is Brush, and it had
 	always supported a floating point line width.  Further plans for
 	Version 11 of idraw format include support for the capstyle and
 	joinstyle of a brush.

	* fix an egcs revealed problem in the Arrowhead class
 	(UniIdraw/idarrowhead.*), where an Arrowhead&
 	Arrowhead::operator=(Arrowhead&) needed to be defined as well as
 	the existing Graphic& Arrowhead::operator=(Arrowhead&) (Debian bug
 	#30749).  This had not been a problem with earlier C++ compilers,
 	because they defaulted to using the assignment operator for
 	Graphic& whenever an assignment operator for Arrowhead& wasn't
 	available.

	-- OverlayUnidraw --

	* remove a mysterious call to OverlayViewer::Update from within
 	OverlayViewer::Update (invoked when _needs_resize is true).

	* change the classid macro in OverlayUnidraw/ovcomps.h so that it
 	adds methods ::class_name() and ::class_symid() to any class
 	definition (instead of the previous ::classname() and ::classid(),
 	the latter which had a confusing similarity to the ::ClassId()
 	method on Unidraw components).  NOTE: this is a less-than 100%
 	backward compatible change to the OverlayUnidraw API, and may
 	require changes in third-party code that makes use of the macro.
	
	* add a call to Observable::notify at the end of
 	OverlayComp::SetAttributeList (something that gets invoked when an
 	attribute editing dialog box gets OK clicked).  By default this
 	invokes OverlayComp::update, which calls OverlayComp::Notify, so
 	the ::notify method (used for generic observable/observer
 	notification) quickly gets transmuted into a subject/view sort of
 	Notify/Update. However a derived class can override this (by
 	providing a different ::update method), keeping the two tracks of
 	notify/update separate, which is exactly what happens in NodeComp
 	described below.

	-- ComUnidraw --

	* create ComUnidraw/plotfunc.(ch) to hold BarPlotFunc and the
 	forthcoming LinePlotFunc and ScatPlotFunc.

	* set up a :newview argument to the barplot func, to make plotting
 	in the current viewer the default behavior.  

	* wrap an OverlayKit::bincheck("plotmtv") around the
 	comterp->add_command for the barplot func.

	-- GraphUnidraw -- 

	* make each end-node an Observer of each start-node (whenever an
 	edge connects two nodes).  Create this observer/observable link in
 	the EdgeConnectCmd, remove it within a GraphDeleteCmd, and restore
 	it after a graphdraw document is newly opened.

	* use this new observer/observable mechanism between nodes to
 	trigger a dataflow process, where each node recomputes its :value
 	attribute based on a :valexpr attribute when told to ::update
 	itself.  Nothing happens if no :valexpr attribute exists.  The
 	command that makes up a valexpr assumes in1, in2, etc.. are
 	predefined.  The NodeComp::update method goes out and gets these
 	values and builds up a string for ComTerp to evaluate that first
 	sets the values within the interpreter, then executes the
 	:valexpr.  The result is place back within a :value attribute.

	* Here is an example of a graphdraw document with embedded
 	dataflow. The executable script (the :valexpr) with each of the
 	three computational nodes represent the AND, OR, and NOT operators
 	of 4-value Null Convention Logic, 4NCL (http://www.theseus.com):


graphdraw(5,5
    gs( :fillbg 1 :brush 65535,0 :fgcolor "Black",0,0,0 :bgcolor "White",1,1,1 :font "-*-helvetica-medium-r-normal-*-12-*-*-*-*-*-*-*","Helvetica",12 :graypat 1),
    gs( :fillbg 1 :brush 65535,0 :fgcolor "Black",0,0,0 :bgcolor "White",1,1,1 :graypat 0),
    node( :reqlabel 1 :ellipse 300,458,35,20 :ellipsetrans 1,0,0,1,15,36 :text 12,"NOT" :texttrans 1,0,0,1,302.5,487 :gs 0 :valexpr "if(in1=='I'||in1=='N' :then in1 :else !in1) /* NOT */" :val N),
    node( :reqlabel 1 :ellipse 300,458,35,20 :ellipsetrans 1,0,0,1,-102,-33 :text 12,"AND" :texttrans 1,0,0,1,185,418 :gs 0 :valexpr "if(in1=='I'||in2=='I' :then 'I' :else if(in1=='N'||in2=='N' :then if(in1=='N'&&in2=='N' :then 'N' :else 'I') :else in1&&in2)) /* OR */" :val 'N'),
    node( :reqlabel 1 :ellipse 300,458,35,20 :ellipsetrans 1,0,0,1,151,-34 :text 12,"OR" :texttrans 1,0,0,1,442.5,418 :gs 0 :transform 1,0,0,1,0,1 :valexpr "if(in1=='I'||in2=='I' :then 'I' :else if(in1=='N'||in2=='N' :then if(in1=='N'&&in2=='N' :then 'N' :else 'I') :else in1||in2)) /* OR */" :val 'N'),
    node( :reqlabel 0 :ellipse 178,503,35,20 :ellipsetrans 1,0,0,1,-118,-3 :text 16,"" :texttrans 1,0,0,1,60,485 :gs 0 :val 'N'),
    node( :reqlabel 0 :ellipse 172,341,35,20 :ellipsetrans 1,0,0,1,-116,15 :text 16,"" :texttrans 1,0,0,1,56,341 :gs 0 :val 'N'),
    edge(85,486,173,439 :arrowscale 1.5 :tail :startnode 3 :endnode 1 :gs 1),
    edge(82,369,172,412 :arrowscale 1.5 :tail :startnode 4 :endnode 1 :gs 1),
    edge(222,439,291,480 :arrowscale 1.5 :tail :startnode 1 :endnode 0 :gs 1),
    edge(341,481,425,438 :arrowscale 1.5 :tail :startnode 0 :endnode 2 :gs 1),
    edge(233,425,416,424 :arrowscale 1.5 :tail :startnode 1 :endnode 2 :gs 1)
)

	* add these methods to ease access of other components from an
 	EdgeComp:

    EdgeComp* EdgeIn(int n) const;
    // return pointer to nth incoming edge.

    EdgeComp* EdgeOut(int n) const;
    // return pointer to nth outgoing edge.

    EdgeComp* EdgeByDir(int n, boolean out_edge) const;
    // return pointer to nth edge of given direction.

    NodeComp* NodeIn(int n) const;
    // return pointer to node on other side of nth incoming edge.

    NodeComp* NodeOut(int n) const;
    // return pointer to node on other side of nth outgoing edge.

	* add these methods to ease access of other components from an
 	NodeComp:

    NodeComp* NodeStart() const;
    // return pointer to start node.

    NodeComp* NodeEnd() const;
    // return pointer to end node.

Configuration, Documentation, and Miscellaneous Changes

	* add PERCEPS (http://friga.mer.utexas.edu/mark/perl/perceps/)
 	extractable documentation to the header files of these class
 	libraries: Attribute, ComTerp, OverlayUnidraw, GraphUnidraw.
  	Result can be found at
 	http://www.vectaport.com/ivtools/doc/classes/index.html.

	* add man pages from iv/src/man/(Dispatch|InterViews|Unidraw) to
 	src/man/man3/.  Also put them online at
 	http://www.vectaport.com/ivtools/doc/man3.1/

	* add PostScript copy of InterViews 3.1 reference manual.  Also
 	put up online at http://www.vectaport.com/ivtools/doc/refman3.1/

	* add in PERCEPS class comments with URLs to point to man page
 	from InterViews 3.1 (i.e. href=../man3.1/Border.html) to be
 	embedded in PERCEPS generated web pages, as well as comments with
 	reference manual web page URLs.
	
	* add output of attributes when serializing a toplevel
 	FrameUnidrawComp or GraphUnidrawComp.

	* fix Solaris build problems with OverlayUnidraw/grayraster.c and
 	utils/ivdl, thanks to feedback from Dan DeJohn at Digicomp.

	* same fixes apply to an Alpha build, given feedback from Bruno
 	Delfosse at Thomson CSF.


December 23rd 1998 ivtools-0.7.2

Drawing Editor Changes

	* enable deferred loading of rasters-by-URL, similar to the
 	deferred loading of PGM/PPM rasters.  Tested with the following
 	flipbook document, which brings up the first frame, and loads the
 	subsequent frames only when moved to:
	
flipbook(
    frame(),
    frame(
        raster("http://www.nps.gov/apis/photo1.jpg" :transform 1,0,0,1,120.5,271)
    ),
    frame(
        raster("http://www.nps.gov/apis/photo2.jpg" :transform 1,0,0,1,120.5,271)
    ),
    frame(
        raster("http://www.nps.gov/apis/photo3.jpg" :transform 1,0,0,1,120.5,271)
    ),
    frame(
        raster("http://www.nps.gov/apis/photo4.jpg" :transform 1,0,0,1,120.5,271)
    )
)

	* set up a continuously-looping slideshow mechanism for flipbook,
 	invoked by a "-slideshow secs" command line argument or a
 	":slideshow secs" attribute in the flipbook document.  At present
 	requires building with ACE (or downloading Linux binaries).
  	Typing "exit" into stdin or Ctrl-Q through the GUI will terminate
 	the show. See this URL for sample on-line slideshows:

	http://www.vectaport.com/ivtools/slideshows.html

	* glyphify the precise move/scale/rotate dialog boxes in
 	drawtool/comdraw/flipbook/graphdraw (under the Edit menu).  This
 	leaves only the precise page dialog box (under the View menu) left
 	to be glyphified.

	* test the new comdraw funcs described below with a script like
 	this entered into stdin:

	for(x=0 x<100 x++ :body ellipse(rand(0,ncols-1),rand(0,nrows-1),rand(20,30),rand(10,20));rotate(rand(1,180));update;colors(rand(1,ncolors) rand(1,ncolors));pattern(rand(1,npatterns)))

	** happy random jelly beans **

Interpreter Changes

	* add rand([minval,maxval]) and srand(seedval) funcs to comterp.

	* add :string argument to print(fmtstr val) func, to cause the
 	output to be pushed on the stack in the form of a string.

	* update documentation (both README and man pages) for comterp and
 	comdraw.

	* add comdraw funcs to return menu sizes: nfonts(), nbrushes(),
 	npatterns(), and ncolors().

	* add comdraw funcs to return onscreen extent of canvas in pixels:
 	ncols() and nrows().

	* generalize the timeexpr func to take a :sec argument, and
 	include this func in a comterp built with ACE (server mode).

Library Changes

	-- ComTerp --

	* generalize the timeoutscript mechanism on the ComterpHandler to
 	take a seconds argument as well (ComTerpHandler::timeoutseconds()).

	-- IVGlyph --

	* add a GFieldEditor::select_all method, to facilitate its use
 	from new precise move/scale/rotate dialog boxes.

	* extend StrEditDialog to accept an arbitrary extra glyph.

	* generalize RadioEnumEditor to allow for horizontal layout and no
 	frame.

	-- OverlayUnidraw --

	* set up OvPreciseMoveCmd, OvPreciseScaleCmd, and
 	OvPreciseRotateCmd, to allow for the glyphification of the
 	"Precise" command dialog boxes.

	* create an OverlayGraphic::new_painter() for use by
 	OverlayUnidraw to slip in an OverlayPainter for the default
 	Graphic Painter (Graphic::_p).  It was discovered that every
 	OverlayRasterRect was creating a new OverlayPainter and stuffing
 	it in Graphic::_p, which wasn't a problem, until I tried to defer
 	the loading of rasters-by-URL.  This meant that the Painter was
 	engaged in rendering the raster before the final OverlayRasterRect
 	was constructed, which caused the Painter currently being used to
 	be deleted (oops).

	-- FrameUnidraw --

	* create a FrameEditor::InitCommands (invoked by the ::Resize
 	method on the viewer) to initialize the slideshow mechanism.

Configuration and Miscellaneous Changes

	* change the construction of the toolbar glyphs, to use a
 	layout.vflexible with infinite stretchability and 0
 	shrinkability. This works to make the whole toolbar automatically
 	appear no matter how long, and obviates the need to have a funky
 	constant that guesses how many pixels long the toolbar really is.

	* switch flipbook from using a Dispatcher based ComTerpIOHandler
 	on stdin to using a Reactor based UnidrawComterpHandler (when
 	built with ACE).  This facilitates the use of the timeexpr func in
 	the flipbook slideshow mechanism.  In the future the older
 	Dispatcher mechanism could handle the slideshow mechanism as well
 	(since timer objects are supported by the Dispatcher).

December 4th 1998 ivtools-0.7.1

Drawing Editor Changes

	* add support for %s embedding in print and export dialog box
 	command strings.  This facilitates the cat'ing of a file to a
 	device (i.e. cat %s >/dev/lp1), and use of utilities like pstoedit
 	(i.e. "pstoedit -f tgif %s /tmp/temp.obj;tgif /tmp/temp.obj") from
 	these dialog boxes. If no %s is found when the "to command" button
 	is checked, the command line is built up the old way, by appending
 	the pathname of the temporary file used for rendering output.  So
 	"ghostview" will still work, as well as "ghostview %s".
	
	* propagate the stay-on-grid bugfix that was introduced in
 	ivtools-0.7 down to idraw.
	
	* recognize and accept the partial idraw format generated by
 	xfig2idraw (idraw already could handle it)
	
	* add full URL support for black-and-white JPEG's and GIF's (color
 	and graylevel were already handled).

Interpreter Changes

	* fix :abs argument on flipbook moveframe func.  Now on a
 	four-frame flipbook these work equally as well:


  for(i=0 i<100 i++ :body 
      for(j=0 j<4 j++ :body moveframe(1);update);moveframe(-3);update)

	*and*

  for(i=0 i<100 i++ :body 
      for(j=0 j<4 j++ :body moveframe(1);update);moveframe(1 :abs);update)

	* complete the iueserv example program, a derived comterp that
 	links against the Image Understanding Environment
 	(http://www.aai.com/AAI/IUE/IUE.html).  Now the following command
 	string works to process an image and export it to a drawing
 	editor:

  export(conncomp(threshold(image("test.pgm") 150)) "localhost" 20001)

Library Changes

	-- ComTerp --

	* fix bug in post-evaluation handling of keyword arguments with no
 	associated values.  See flipbook example above.
	
	-- Unidraw --

	* second attempt to fix the interaction of the Modified (dirty)
 	state variable and the New command.  This time, when
 	ModifStatusVar::SetComponent is called, a check is made to ensure
 	the new component is actually different than the old component
 	before clearing the modified flag.

Configuration and Miscellaneous Changes

	* remove conflicting include of memory.h that impacted a Solaris
 	build in these file: Attribute/attrvalue.c, IV-2_6/textbuffer.c,
 	and IV-2_6/texteditor.c.

	* add back the need for XCONFIGDIR for "make World" in the INSTALL
 	file.

	* expand the Acknowledgements section of the README.

	* incorporate changes suggested by Debian ivtools-0.6.7-4 (the
 	last packaging for the slink release of Debian).

	* rename scripts/install.sh to scripts/install-sh, to avoid a make
 	rule that would automatically create a confusing (to make) install
 	file.


November 12th 1998 ivtools-0.7

Drawing Editor Changes

 	* ivtools drawtool (and every drawing editor that inherits the
 	same mechanism) can now import or open a wide variety of graphics
 	file by URL.  This is done with a separate ivtools executable,
 	ivdl, written by Eric Kahler, which makes a straightforward
 	attempt to connect to any http or ftp server and download the
 	requested file.  Any error messsages are printed to stderr.

	This means that ivtools now supports hyper-structured-graphics, as
 	defined (invented?) by William Chia-Wei Cheng, the author of Tgif:

		http://bourbon.cs.umd.edu:8001/tgif/hgviewer.html

	To try it out, acquire or build a copy of ivtools drawtool, and
 	launch it on this URL:

	        http://www.vectaport.com/ivtools/anteaters.drs

	* In addition to URL support, ivtools drawtool supports launching
 	or importing (to an import port if built with ACE) on any JPEG,
 	GIF, TIFF, or pbmplus image file, any idraw format PostScript, and
 	non-raster portions of any arbitrary PostScript file.  These
 	capabilities require the use of the following executables
 	distributed separately from ivtools: djpeg, giftopnm, tifftopnm,
 	pstoedit.	

	* ivtools drawtool supports launching or importing of any graphic
 	file compressed by gzip or compress as well.	

	* The "auto-convert" check-box on the import dialog box has been
 	removed (by default).  This feature is still available for use in
 	custom applications, or the same effect can be had by entering an
 	"anytopnm" command line into the import dialog box, and selecting
 	the "from command" checkbox before hitting the Import button.	

	* this release fixes a very old stay-on-grid-when-zooming problem
 	in drawtool.  The changes ended up being very minor, and will be
 	propogated to idraw by ivtools-0.7.1, but for now they exist only
 	in drawtool to facilitate independent verification that the
 	problem is gone.

	This might have been one of the inadvertent reasons why Fresco
 	went to all floating-point coordinates.  In the Unidraw graphics
 	library, the graphics are all rendered in integers (collected from
 	the screen coordinates of the original drawing events), then
 	mapped to a floating point drawing coordinate system with a
 	floating point affine transform.  There was an unsolved problem
 	with this strategy, and you can reproduce it in idraw with these
 	steps:

	0) turn on the grid (?) and gravity (,)
	1) zoom in once
	2) pan left once (while at 2x magnification)
	3) zoom back to 1x magnification
	4) draw a rectangle 
	5) zoom in four times or so -- you'll see rectangle isn't on grid

	The reason is that the pan at 2x is really the equivalent of a
 	fractional pan at 1x, so when you get back to 1x the grid is no
 	longer on an integer boundary, but halfway between pixels.  Of
 	course this is impractical for drawing the grid, so the grid
 	coordinates are rounded before rendering.  The same thing is done
 	for the x,y coordinates of the mouse events in Grid::Constrain.

	The resultant rectangle looks great at 1x, where the rounding
 	effects on the grid display match up with the integer-constrained
 	coordinates that define the rectangle.  But as you zoom in, the
 	grid positions are no longer rounded, and you see the error
 	between the actual grid location and the rectangle drawn with
 	gravity on.

	The fix was to simply ensure that the transformer used to
 	construct a graphic when gravity is on would always produce
 	integerized drawing coordinates, by rounding the last two
 	arguments of the affine transform used to map from screen
 	coordinates to drawing coordinates.  This counters for the
 	necessary rounding effect when x,y events are constrained
 	(Grid::Constrain) not to the actual floating point location of the
 	grid, but to the nearest pixel.  Try the above directions in an
 	ivtools-0.7 copy of drawtool, and you'll see the problem is gone.

	Bug reported by Larry Larson and others.

Server Changes

	* a new server, iueserv, was set up to begin experimenting with
 	the packaging of the extensive capability of the Image
 	Understanding Environment class libraries into the command
 	language of comterp.  The IUE is available from:

		http://www.aai.com/AAI/IUE/IUE.html

	--with-iue and --with-iue-libs arguments were added to the
 	configure script to facilitate this.  See src/iueserv/README for
 	more details.

	* add affine transform funcs to comterp, to assist in debugging:

	point=xform(x,y a00,a01,a10,a11,a20,a21) 
		-- affine transform of x,y coordinates
	affine=invert(a00,a01,a10,a11,a20,a21) 
		-- invert affine transform
	
Utility Changes

	* incorporate a URL downloading utility written by Eric F. Kahler,
 	now called ivdl, into the src/utils directory.

Library Changes

	-- IVGlyph --

	* make changes to the ::accept_editor methods of OpenFileChooser
 	and ImportChooser to recognize a URL and avoid pre-processing it
 	like it was a local pathname.

	-- Unidraw --

	* fix bug where the modified flag on a drawing editor was getting
 	inadvertently cleared when the user does the following:

	     - open and modify a drawing
	     - invoke open again, and say No to saving the drawing
	     - type in the same pathname

	The result is that the system recognizes the drawing is the same,
 	and does not reload it, but clears the modified flag without ever
 	saving it.  This is now fixed.  Bug reported by K.C. Ng.

	-- OverlayUnidraw --

	* the majority of work on URL open/import, and compressed image
 	open/import was done in the OvImportCmd.  One evolution (from
 	ivtools-0.6.12) was the use of the ::pathname() method to indicate
 	when a file was coming from a file (instead of just a pipe), which
 	would then allow the import command to configure a filtering
 	command to be popen'ed.  Without knowing the pathname (or when the
 	pathname was an URL or "-"), there was a need to use
 	double-fork/double-pipe architecture, with the child reading the
 	source and writing to the grandchild, and the grandchild exec'ing
 	the filter, causing the result to be written back to the original
 	process. 

	* support for GIF and JPEG file formats was extended by extending
 	the RasterOvComp istream constructor to invoke an OvImportCmd to
 	read them in.  In this way GIF and JPEG files can be
 	saved/restored by pathname, in the same manner long supported
 	for TIFF and pbmplus raster files.

	-- GraphUnidraw -- 

	* fix bug in Alter tool (RESHAPE_TOOL) to make it set the modified
 	flag when something is changed.

	* fix another bug in Alter tool, reported by K.C. Ng, that caused
 	the recreated TextGraphic to have a foreground color with a nil
 	name.

	* finally, fix old problem with moving more than one arc reported
 	by K.C. Ng as well.  The problem occurred when two arcs were
 	selected then moved -- nothing would happen.  This had been
 	disabled a long time ago, because there was a solution in place to
 	handle moving one edge (the CreateManipulator pre-selected the
 	nodes on each end of the edge as well), but there had never been a
 	solution for more than one edge at once.  The fix was simple, in
 	that it only required a derived MoveTool (GraphMoveTool) with a
 	single derived method of note, ::InterpretManipulator, that checks
 	for a selection list longer than 1, and runs through it to augment
 	the selection with any nodes that lie between selected edges.
	

Config/Build Changes

	* a new library, AceDispatch, was set up to isolate any use of the
 	ACE library from the InterViews Dispatch library.  In this way
 	older executables, like idraw, can run without any reference to
 	ACE shared library.	

	* further work was done to isolate older executables from newer
 	shared libraries.  This required #ifdef 0'ing all the OTHER_* make
 	variables defined in config/params.def (OTHER_CCFLAGS,
 	OTHER_CCDEFINES, OTHER_CCINCLUDES, OTHER_CCLDLIBS,
 	OTHER_CCDEPLIBS) and instead defining them within the relevant
 	Imakefile's.  For example, src/comterp/Imakefile has these new
 	definitions:

	OTHER_CCDEFINES = $(ACE_CCDEFINES)
	OTHER_CCINCLUDES = $(ACE_CCINCLUDES)
	OTHER_CCLDLIBS = $(ACE_CCLDLIBS)

	* extraneous arguments were manually trimmed from the configure
 	script generated by autoconf from configure.in.  This process
 	needs to be repeated each time autoconf is run until the time
 	someone figures out how to change configure.in to remove the
 	Cygnus-standard options that are not utilized in the ivtools
 	setup.
